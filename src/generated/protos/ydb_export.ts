/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_export.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./annotations/validation";
import * as dependency_2 from "./ydb_operation";
import * as dependency_3 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace Ydb.Export {
    export class ExportProgress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ExportProgress {
            const message = new ExportProgress({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportProgress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportProgress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportProgress {
            return ExportProgress.deserialize(bytes);
        }
    }
    export namespace ExportProgress {
        export enum Progress {
            PROGRESS_UNSPECIFIED = 0,
            PROGRESS_PREPARING = 1,
            PROGRESS_TRANSFER_DATA = 2,
            PROGRESS_DONE = 3,
            PROGRESS_CANCELLATION = 4,
            PROGRESS_CANCELLED = 5
        }
    }
    export class ExportItemProgress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            parts_total?: number;
            parts_completed?: number;
            start_time?: dependency_3.google.protobuf.Timestamp;
            end_time?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("parts_total" in data && data.parts_total != undefined) {
                    this.parts_total = data.parts_total;
                }
                if ("parts_completed" in data && data.parts_completed != undefined) {
                    this.parts_completed = data.parts_completed;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
            }
        }
        get parts_total() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set parts_total(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get parts_completed() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set parts_completed(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 3) as dependency_3.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 4) as dependency_3.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            parts_total?: number;
            parts_completed?: number;
            start_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): ExportItemProgress {
            const message = new ExportItemProgress({});
            if (data.parts_total != null) {
                message.parts_total = data.parts_total;
            }
            if (data.parts_completed != null) {
                message.parts_completed = data.parts_completed;
            }
            if (data.start_time != null) {
                message.start_time = dependency_3.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_3.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            return message;
        }
        toObject() {
            const data: {
                parts_total?: number;
                parts_completed?: number;
                start_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.parts_total != null) {
                data.parts_total = this.parts_total;
            }
            if (this.parts_completed != null) {
                data.parts_completed = this.parts_completed;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.parts_total != 0)
                writer.writeUint32(1, this.parts_total);
            if (this.parts_completed != 0)
                writer.writeUint32(2, this.parts_completed);
            if (this.has_start_time)
                writer.writeMessage(3, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(4, this.end_time, () => this.end_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportItemProgress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportItemProgress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.parts_total = reader.readUint32();
                        break;
                    case 2:
                        message.parts_completed = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportItemProgress {
            return ExportItemProgress.deserialize(bytes);
        }
    }
    export class ExportToYtSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            host?: string;
            port?: number;
            token?: string;
            items?: ExportToYtSettings.Item[];
            description?: string;
            number_of_retries?: number;
            use_type_v3?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("number_of_retries" in data && data.number_of_retries != undefined) {
                    this.number_of_retries = data.number_of_retries;
                }
                if ("use_type_v3" in data && data.use_type_v3 != undefined) {
                    this.use_type_v3 = data.use_type_v3;
                }
            }
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, ExportToYtSettings.Item, 4) as ExportToYtSettings.Item[];
        }
        set items(value: ExportToYtSettings.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get number_of_retries() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set number_of_retries(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get use_type_v3() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set use_type_v3(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            host?: string;
            port?: number;
            token?: string;
            items?: ReturnType<typeof ExportToYtSettings.Item.prototype.toObject>[];
            description?: string;
            number_of_retries?: number;
            use_type_v3?: boolean;
        }): ExportToYtSettings {
            const message = new ExportToYtSettings({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.items != null) {
                message.items = data.items.map(item => ExportToYtSettings.Item.fromObject(item));
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.number_of_retries != null) {
                message.number_of_retries = data.number_of_retries;
            }
            if (data.use_type_v3 != null) {
                message.use_type_v3 = data.use_type_v3;
            }
            return message;
        }
        toObject() {
            const data: {
                host?: string;
                port?: number;
                token?: string;
                items?: ReturnType<typeof ExportToYtSettings.Item.prototype.toObject>[];
                description?: string;
                number_of_retries?: number;
                use_type_v3?: boolean;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.items != null) {
                data.items = this.items.map((item: ExportToYtSettings.Item) => item.toObject());
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.number_of_retries != null) {
                data.number_of_retries = this.number_of_retries;
            }
            if (this.use_type_v3 != null) {
                data.use_type_v3 = this.use_type_v3;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeString(1, this.host);
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (this.items.length)
                writer.writeRepeatedMessage(4, this.items, (item: ExportToYtSettings.Item) => item.serialize(writer));
            if (this.description.length)
                writer.writeString(5, this.description);
            if (this.number_of_retries != 0)
                writer.writeUint32(6, this.number_of_retries);
            if (this.use_type_v3 != false)
                writer.writeBool(7, this.use_type_v3);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToYtSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToYtSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ExportToYtSettings.Item.deserialize(reader), ExportToYtSettings.Item));
                        break;
                    case 5:
                        message.description = reader.readString();
                        break;
                    case 6:
                        message.number_of_retries = reader.readUint32();
                        break;
                    case 7:
                        message.use_type_v3 = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToYtSettings {
            return ExportToYtSettings.deserialize(bytes);
        }
    }
    export namespace ExportToYtSettings {
        export class Item extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                source_path?: string;
                destination_path?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("source_path" in data && data.source_path != undefined) {
                        this.source_path = data.source_path;
                    }
                    if ("destination_path" in data && data.destination_path != undefined) {
                        this.destination_path = data.destination_path;
                    }
                }
            }
            get source_path() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set source_path(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get destination_path() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set destination_path(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                source_path?: string;
                destination_path?: string;
            }): Item {
                const message = new Item({});
                if (data.source_path != null) {
                    message.source_path = data.source_path;
                }
                if (data.destination_path != null) {
                    message.destination_path = data.destination_path;
                }
                return message;
            }
            toObject() {
                const data: {
                    source_path?: string;
                    destination_path?: string;
                } = {};
                if (this.source_path != null) {
                    data.source_path = this.source_path;
                }
                if (this.destination_path != null) {
                    data.destination_path = this.destination_path;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.source_path.length)
                    writer.writeString(1, this.source_path);
                if (this.destination_path.length)
                    writer.writeString(2, this.destination_path);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Item {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Item();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.source_path = reader.readString();
                            break;
                        case 2:
                            message.destination_path = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Item {
                return Item.deserialize(bytes);
            }
        }
    }
    export class ExportToYtResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ExportToYtResult {
            const message = new ExportToYtResult({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToYtResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToYtResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToYtResult {
            return ExportToYtResult.deserialize(bytes);
        }
    }
    export class ExportToYtMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            settings?: ExportToYtSettings;
            progress?: ExportProgress.Progress;
            items_progress?: ExportItemProgress[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
                if ("progress" in data && data.progress != undefined) {
                    this.progress = data.progress;
                }
                if ("items_progress" in data && data.items_progress != undefined) {
                    this.items_progress = data.items_progress;
                }
            }
        }
        get settings() {
            return pb_1.Message.getWrapperField(this, ExportToYtSettings, 1) as ExportToYtSettings;
        }
        set settings(value: ExportToYtSettings) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_settings() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get progress() {
            return pb_1.Message.getFieldWithDefault(this, 2, ExportProgress.Progress.PROGRESS_UNSPECIFIED) as ExportProgress.Progress;
        }
        set progress(value: ExportProgress.Progress) {
            pb_1.Message.setField(this, 2, value);
        }
        get items_progress() {
            return pb_1.Message.getRepeatedWrapperField(this, ExportItemProgress, 3) as ExportItemProgress[];
        }
        set items_progress(value: ExportItemProgress[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            settings?: ReturnType<typeof ExportToYtSettings.prototype.toObject>;
            progress?: ExportProgress.Progress;
            items_progress?: ReturnType<typeof ExportItemProgress.prototype.toObject>[];
        }): ExportToYtMetadata {
            const message = new ExportToYtMetadata({});
            if (data.settings != null) {
                message.settings = ExportToYtSettings.fromObject(data.settings);
            }
            if (data.progress != null) {
                message.progress = data.progress;
            }
            if (data.items_progress != null) {
                message.items_progress = data.items_progress.map(item => ExportItemProgress.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                settings?: ReturnType<typeof ExportToYtSettings.prototype.toObject>;
                progress?: ExportProgress.Progress;
                items_progress?: ReturnType<typeof ExportItemProgress.prototype.toObject>[];
            } = {};
            if (this.settings != null) {
                data.settings = this.settings.toObject();
            }
            if (this.progress != null) {
                data.progress = this.progress;
            }
            if (this.items_progress != null) {
                data.items_progress = this.items_progress.map((item: ExportItemProgress) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_settings)
                writer.writeMessage(1, this.settings, () => this.settings.serialize(writer));
            if (this.progress != ExportProgress.Progress.PROGRESS_UNSPECIFIED)
                writer.writeEnum(2, this.progress);
            if (this.items_progress.length)
                writer.writeRepeatedMessage(3, this.items_progress, (item: ExportItemProgress) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToYtMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToYtMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.settings, () => message.settings = ExportToYtSettings.deserialize(reader));
                        break;
                    case 2:
                        message.progress = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.items_progress, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ExportItemProgress.deserialize(reader), ExportItemProgress));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToYtMetadata {
            return ExportToYtMetadata.deserialize(bytes);
        }
    }
    export class ExportToYtRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_2.Ydb.Operations.OperationParams;
            settings?: ExportToYtSettings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ydb.Operations.OperationParams, 1) as dependency_2.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_2.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get settings() {
            return pb_1.Message.getWrapperField(this, ExportToYtSettings, 2) as ExportToYtSettings;
        }
        set settings(value: ExportToYtSettings) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_2.Ydb.Operations.OperationParams.prototype.toObject>;
            settings?: ReturnType<typeof ExportToYtSettings.prototype.toObject>;
        }): ExportToYtRequest {
            const message = new ExportToYtRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_2.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.settings != null) {
                message.settings = ExportToYtSettings.fromObject(data.settings);
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_2.Ydb.Operations.OperationParams.prototype.toObject>;
                settings?: ReturnType<typeof ExportToYtSettings.prototype.toObject>;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.settings != null) {
                data.settings = this.settings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.has_settings)
                writer.writeMessage(2, this.settings, () => this.settings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToYtRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToYtRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_2.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.settings, () => message.settings = ExportToYtSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToYtRequest {
            return ExportToYtRequest.deserialize(bytes);
        }
    }
    export class ExportToYtResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_2.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ydb.Operations.Operation, 1) as dependency_2.Ydb.Operations.Operation;
        }
        set operation(value: dependency_2.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_2.Ydb.Operations.Operation.prototype.toObject>;
        }): ExportToYtResponse {
            const message = new ExportToYtResponse({});
            if (data.operation != null) {
                message.operation = dependency_2.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_2.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToYtResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToYtResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_2.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToYtResponse {
            return ExportToYtResponse.deserialize(bytes);
        }
    }
    export class ExportToS3Settings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpoint?: string;
            scheme?: ExportToS3Settings.Scheme;
            bucket?: string;
            access_key?: string;
            secret_key?: string;
            items?: ExportToS3Settings.Item[];
            description?: string;
            number_of_retries?: number;
            storage_class?: ExportToS3Settings.StorageClass;
            compression?: string;
            region?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("scheme" in data && data.scheme != undefined) {
                    this.scheme = data.scheme;
                }
                if ("bucket" in data && data.bucket != undefined) {
                    this.bucket = data.bucket;
                }
                if ("access_key" in data && data.access_key != undefined) {
                    this.access_key = data.access_key;
                }
                if ("secret_key" in data && data.secret_key != undefined) {
                    this.secret_key = data.secret_key;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("number_of_retries" in data && data.number_of_retries != undefined) {
                    this.number_of_retries = data.number_of_retries;
                }
                if ("storage_class" in data && data.storage_class != undefined) {
                    this.storage_class = data.storage_class;
                }
                if ("compression" in data && data.compression != undefined) {
                    this.compression = data.compression;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
            }
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get scheme() {
            return pb_1.Message.getFieldWithDefault(this, 2, ExportToS3Settings.Scheme.UNSPECIFIED) as ExportToS3Settings.Scheme;
        }
        set scheme(value: ExportToS3Settings.Scheme) {
            pb_1.Message.setField(this, 2, value);
        }
        get bucket() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set bucket(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get access_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set access_key(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get secret_key() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set secret_key(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, ExportToS3Settings.Item, 6) as ExportToS3Settings.Item[];
        }
        set items(value: ExportToS3Settings.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get number_of_retries() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set number_of_retries(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get storage_class() {
            return pb_1.Message.getFieldWithDefault(this, 9, ExportToS3Settings.StorageClass.STORAGE_CLASS_UNSPECIFIED) as ExportToS3Settings.StorageClass;
        }
        set storage_class(value: ExportToS3Settings.StorageClass) {
            pb_1.Message.setField(this, 9, value);
        }
        get compression() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set compression(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            endpoint?: string;
            scheme?: ExportToS3Settings.Scheme;
            bucket?: string;
            access_key?: string;
            secret_key?: string;
            items?: ReturnType<typeof ExportToS3Settings.Item.prototype.toObject>[];
            description?: string;
            number_of_retries?: number;
            storage_class?: ExportToS3Settings.StorageClass;
            compression?: string;
            region?: string;
        }): ExportToS3Settings {
            const message = new ExportToS3Settings({});
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.scheme != null) {
                message.scheme = data.scheme;
            }
            if (data.bucket != null) {
                message.bucket = data.bucket;
            }
            if (data.access_key != null) {
                message.access_key = data.access_key;
            }
            if (data.secret_key != null) {
                message.secret_key = data.secret_key;
            }
            if (data.items != null) {
                message.items = data.items.map(item => ExportToS3Settings.Item.fromObject(item));
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.number_of_retries != null) {
                message.number_of_retries = data.number_of_retries;
            }
            if (data.storage_class != null) {
                message.storage_class = data.storage_class;
            }
            if (data.compression != null) {
                message.compression = data.compression;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            return message;
        }
        toObject() {
            const data: {
                endpoint?: string;
                scheme?: ExportToS3Settings.Scheme;
                bucket?: string;
                access_key?: string;
                secret_key?: string;
                items?: ReturnType<typeof ExportToS3Settings.Item.prototype.toObject>[];
                description?: string;
                number_of_retries?: number;
                storage_class?: ExportToS3Settings.StorageClass;
                compression?: string;
                region?: string;
            } = {};
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.scheme != null) {
                data.scheme = this.scheme;
            }
            if (this.bucket != null) {
                data.bucket = this.bucket;
            }
            if (this.access_key != null) {
                data.access_key = this.access_key;
            }
            if (this.secret_key != null) {
                data.secret_key = this.secret_key;
            }
            if (this.items != null) {
                data.items = this.items.map((item: ExportToS3Settings.Item) => item.toObject());
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.number_of_retries != null) {
                data.number_of_retries = this.number_of_retries;
            }
            if (this.storage_class != null) {
                data.storage_class = this.storage_class;
            }
            if (this.compression != null) {
                data.compression = this.compression;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpoint.length)
                writer.writeString(1, this.endpoint);
            if (this.scheme != ExportToS3Settings.Scheme.UNSPECIFIED)
                writer.writeEnum(2, this.scheme);
            if (this.bucket.length)
                writer.writeString(3, this.bucket);
            if (this.access_key.length)
                writer.writeString(4, this.access_key);
            if (this.secret_key.length)
                writer.writeString(5, this.secret_key);
            if (this.items.length)
                writer.writeRepeatedMessage(6, this.items, (item: ExportToS3Settings.Item) => item.serialize(writer));
            if (this.description.length)
                writer.writeString(7, this.description);
            if (this.number_of_retries != 0)
                writer.writeUint32(8, this.number_of_retries);
            if (this.storage_class != ExportToS3Settings.StorageClass.STORAGE_CLASS_UNSPECIFIED)
                writer.writeEnum(9, this.storage_class);
            if (this.compression.length)
                writer.writeString(10, this.compression);
            if (this.region.length)
                writer.writeString(11, this.region);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToS3Settings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToS3Settings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.endpoint = reader.readString();
                        break;
                    case 2:
                        message.scheme = reader.readEnum();
                        break;
                    case 3:
                        message.bucket = reader.readString();
                        break;
                    case 4:
                        message.access_key = reader.readString();
                        break;
                    case 5:
                        message.secret_key = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ExportToS3Settings.Item.deserialize(reader), ExportToS3Settings.Item));
                        break;
                    case 7:
                        message.description = reader.readString();
                        break;
                    case 8:
                        message.number_of_retries = reader.readUint32();
                        break;
                    case 9:
                        message.storage_class = reader.readEnum();
                        break;
                    case 10:
                        message.compression = reader.readString();
                        break;
                    case 11:
                        message.region = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToS3Settings {
            return ExportToS3Settings.deserialize(bytes);
        }
    }
    export namespace ExportToS3Settings {
        export enum Scheme {
            UNSPECIFIED = 0,
            HTTP = 1,
            HTTPS = 2
        }
        export enum StorageClass {
            STORAGE_CLASS_UNSPECIFIED = 0,
            STANDARD = 1,
            REDUCED_REDUNDANCY = 2,
            STANDARD_IA = 3,
            ONEZONE_IA = 4,
            INTELLIGENT_TIERING = 5,
            GLACIER = 6,
            DEEP_ARCHIVE = 7,
            OUTPOSTS = 8
        }
        export class Item extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                source_path?: string;
                destination_prefix?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("source_path" in data && data.source_path != undefined) {
                        this.source_path = data.source_path;
                    }
                    if ("destination_prefix" in data && data.destination_prefix != undefined) {
                        this.destination_prefix = data.destination_prefix;
                    }
                }
            }
            get source_path() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set source_path(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get destination_prefix() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set destination_prefix(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                source_path?: string;
                destination_prefix?: string;
            }): Item {
                const message = new Item({});
                if (data.source_path != null) {
                    message.source_path = data.source_path;
                }
                if (data.destination_prefix != null) {
                    message.destination_prefix = data.destination_prefix;
                }
                return message;
            }
            toObject() {
                const data: {
                    source_path?: string;
                    destination_prefix?: string;
                } = {};
                if (this.source_path != null) {
                    data.source_path = this.source_path;
                }
                if (this.destination_prefix != null) {
                    data.destination_prefix = this.destination_prefix;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.source_path.length)
                    writer.writeString(1, this.source_path);
                if (this.destination_prefix.length)
                    writer.writeString(2, this.destination_prefix);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Item {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Item();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.source_path = reader.readString();
                            break;
                        case 2:
                            message.destination_prefix = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Item {
                return Item.deserialize(bytes);
            }
        }
    }
    export class ExportToS3Result extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ExportToS3Result {
            const message = new ExportToS3Result({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToS3Result {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToS3Result();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToS3Result {
            return ExportToS3Result.deserialize(bytes);
        }
    }
    export class ExportToS3Metadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            settings?: ExportToS3Settings;
            progress?: ExportProgress.Progress;
            items_progress?: ExportItemProgress[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
                if ("progress" in data && data.progress != undefined) {
                    this.progress = data.progress;
                }
                if ("items_progress" in data && data.items_progress != undefined) {
                    this.items_progress = data.items_progress;
                }
            }
        }
        get settings() {
            return pb_1.Message.getWrapperField(this, ExportToS3Settings, 1) as ExportToS3Settings;
        }
        set settings(value: ExportToS3Settings) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_settings() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get progress() {
            return pb_1.Message.getFieldWithDefault(this, 2, ExportProgress.Progress.PROGRESS_UNSPECIFIED) as ExportProgress.Progress;
        }
        set progress(value: ExportProgress.Progress) {
            pb_1.Message.setField(this, 2, value);
        }
        get items_progress() {
            return pb_1.Message.getRepeatedWrapperField(this, ExportItemProgress, 3) as ExportItemProgress[];
        }
        set items_progress(value: ExportItemProgress[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            settings?: ReturnType<typeof ExportToS3Settings.prototype.toObject>;
            progress?: ExportProgress.Progress;
            items_progress?: ReturnType<typeof ExportItemProgress.prototype.toObject>[];
        }): ExportToS3Metadata {
            const message = new ExportToS3Metadata({});
            if (data.settings != null) {
                message.settings = ExportToS3Settings.fromObject(data.settings);
            }
            if (data.progress != null) {
                message.progress = data.progress;
            }
            if (data.items_progress != null) {
                message.items_progress = data.items_progress.map(item => ExportItemProgress.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                settings?: ReturnType<typeof ExportToS3Settings.prototype.toObject>;
                progress?: ExportProgress.Progress;
                items_progress?: ReturnType<typeof ExportItemProgress.prototype.toObject>[];
            } = {};
            if (this.settings != null) {
                data.settings = this.settings.toObject();
            }
            if (this.progress != null) {
                data.progress = this.progress;
            }
            if (this.items_progress != null) {
                data.items_progress = this.items_progress.map((item: ExportItemProgress) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_settings)
                writer.writeMessage(1, this.settings, () => this.settings.serialize(writer));
            if (this.progress != ExportProgress.Progress.PROGRESS_UNSPECIFIED)
                writer.writeEnum(2, this.progress);
            if (this.items_progress.length)
                writer.writeRepeatedMessage(3, this.items_progress, (item: ExportItemProgress) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToS3Metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToS3Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.settings, () => message.settings = ExportToS3Settings.deserialize(reader));
                        break;
                    case 2:
                        message.progress = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.items_progress, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ExportItemProgress.deserialize(reader), ExportItemProgress));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToS3Metadata {
            return ExportToS3Metadata.deserialize(bytes);
        }
    }
    export class ExportToS3Request extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_2.Ydb.Operations.OperationParams;
            settings?: ExportToS3Settings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ydb.Operations.OperationParams, 1) as dependency_2.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_2.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get settings() {
            return pb_1.Message.getWrapperField(this, ExportToS3Settings, 2) as ExportToS3Settings;
        }
        set settings(value: ExportToS3Settings) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_2.Ydb.Operations.OperationParams.prototype.toObject>;
            settings?: ReturnType<typeof ExportToS3Settings.prototype.toObject>;
        }): ExportToS3Request {
            const message = new ExportToS3Request({});
            if (data.operation_params != null) {
                message.operation_params = dependency_2.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.settings != null) {
                message.settings = ExportToS3Settings.fromObject(data.settings);
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_2.Ydb.Operations.OperationParams.prototype.toObject>;
                settings?: ReturnType<typeof ExportToS3Settings.prototype.toObject>;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.settings != null) {
                data.settings = this.settings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.has_settings)
                writer.writeMessage(2, this.settings, () => this.settings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToS3Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToS3Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_2.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.settings, () => message.settings = ExportToS3Settings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToS3Request {
            return ExportToS3Request.deserialize(bytes);
        }
    }
    export class ExportToS3Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_2.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ydb.Operations.Operation, 1) as dependency_2.Ydb.Operations.Operation;
        }
        set operation(value: dependency_2.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_2.Ydb.Operations.Operation.prototype.toObject>;
        }): ExportToS3Response {
            const message = new ExportToS3Response({});
            if (data.operation != null) {
                message.operation = dependency_2.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_2.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportToS3Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportToS3Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_2.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportToS3Response {
            return ExportToS3Response.deserialize(bytes);
        }
    }
}
