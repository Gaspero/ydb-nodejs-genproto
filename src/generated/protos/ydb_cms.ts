/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_cms.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ydb_operation";
import * as pb_1 from "google-protobuf";
export namespace Ydb.Cms {
    export class StorageUnits extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unit_kind?: string;
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unit_kind" in data && data.unit_kind != undefined) {
                    this.unit_kind = data.unit_kind;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get unit_kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set unit_kind(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            unit_kind?: string;
            count?: number;
        }): StorageUnits {
            const message = new StorageUnits({});
            if (data.unit_kind != null) {
                message.unit_kind = data.unit_kind;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                unit_kind?: string;
                count?: number;
            } = {};
            if (this.unit_kind != null) {
                data.unit_kind = this.unit_kind;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.unit_kind.length)
                writer.writeString(1, this.unit_kind);
            if (this.count != 0)
                writer.writeUint64(2, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageUnits {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageUnits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.unit_kind = reader.readString();
                        break;
                    case 2:
                        message.count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageUnits {
            return StorageUnits.deserialize(bytes);
        }
    }
    export class ComputationalUnits extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unit_kind?: string;
            availability_zone?: string;
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unit_kind" in data && data.unit_kind != undefined) {
                    this.unit_kind = data.unit_kind;
                }
                if ("availability_zone" in data && data.availability_zone != undefined) {
                    this.availability_zone = data.availability_zone;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get unit_kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set unit_kind(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get availability_zone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set availability_zone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            unit_kind?: string;
            availability_zone?: string;
            count?: number;
        }): ComputationalUnits {
            const message = new ComputationalUnits({});
            if (data.unit_kind != null) {
                message.unit_kind = data.unit_kind;
            }
            if (data.availability_zone != null) {
                message.availability_zone = data.availability_zone;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                unit_kind?: string;
                availability_zone?: string;
                count?: number;
            } = {};
            if (this.unit_kind != null) {
                data.unit_kind = this.unit_kind;
            }
            if (this.availability_zone != null) {
                data.availability_zone = this.availability_zone;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.unit_kind.length)
                writer.writeString(1, this.unit_kind);
            if (this.availability_zone.length)
                writer.writeString(2, this.availability_zone);
            if (this.count != 0)
                writer.writeUint64(3, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComputationalUnits {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComputationalUnits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.unit_kind = reader.readString();
                        break;
                    case 2:
                        message.availability_zone = reader.readString();
                        break;
                    case 3:
                        message.count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ComputationalUnits {
            return ComputationalUnits.deserialize(bytes);
        }
    }
    export class AllocatedComputationalUnit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            host?: string;
            port?: number;
            unit_kind?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("unit_kind" in data && data.unit_kind != undefined) {
                    this.unit_kind = data.unit_kind;
                }
            }
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get unit_kind() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set unit_kind(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            host?: string;
            port?: number;
            unit_kind?: string;
        }): AllocatedComputationalUnit {
            const message = new AllocatedComputationalUnit({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.unit_kind != null) {
                message.unit_kind = data.unit_kind;
            }
            return message;
        }
        toObject() {
            const data: {
                host?: string;
                port?: number;
                unit_kind?: string;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.unit_kind != null) {
                data.unit_kind = this.unit_kind;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeString(1, this.host);
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.unit_kind.length)
                writer.writeString(3, this.unit_kind);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AllocatedComputationalUnit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AllocatedComputationalUnit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 3:
                        message.unit_kind = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AllocatedComputationalUnit {
            return AllocatedComputationalUnit.deserialize(bytes);
        }
    }
    export class Resources extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storage_units?: StorageUnits[];
            computational_units?: ComputationalUnits[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storage_units" in data && data.storage_units != undefined) {
                    this.storage_units = data.storage_units;
                }
                if ("computational_units" in data && data.computational_units != undefined) {
                    this.computational_units = data.computational_units;
                }
            }
        }
        get storage_units() {
            return pb_1.Message.getRepeatedWrapperField(this, StorageUnits, 1) as StorageUnits[];
        }
        set storage_units(value: StorageUnits[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get computational_units() {
            return pb_1.Message.getRepeatedWrapperField(this, ComputationalUnits, 2) as ComputationalUnits[];
        }
        set computational_units(value: ComputationalUnits[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            storage_units?: ReturnType<typeof StorageUnits.prototype.toObject>[];
            computational_units?: ReturnType<typeof ComputationalUnits.prototype.toObject>[];
        }): Resources {
            const message = new Resources({});
            if (data.storage_units != null) {
                message.storage_units = data.storage_units.map(item => StorageUnits.fromObject(item));
            }
            if (data.computational_units != null) {
                message.computational_units = data.computational_units.map(item => ComputationalUnits.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                storage_units?: ReturnType<typeof StorageUnits.prototype.toObject>[];
                computational_units?: ReturnType<typeof ComputationalUnits.prototype.toObject>[];
            } = {};
            if (this.storage_units != null) {
                data.storage_units = this.storage_units.map((item: StorageUnits) => item.toObject());
            }
            if (this.computational_units != null) {
                data.computational_units = this.computational_units.map((item: ComputationalUnits) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storage_units.length)
                writer.writeRepeatedMessage(1, this.storage_units, (item: StorageUnits) => item.serialize(writer));
            if (this.computational_units.length)
                writer.writeRepeatedMessage(2, this.computational_units, (item: ComputationalUnits) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Resources {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Resources();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.storage_units, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StorageUnits.deserialize(reader), StorageUnits));
                        break;
                    case 2:
                        reader.readMessage(message.computational_units, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ComputationalUnits.deserialize(reader), ComputationalUnits));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Resources {
            return Resources.deserialize(bytes);
        }
    }
    export class ServerlessResources extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shared_database_path?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("shared_database_path" in data && data.shared_database_path != undefined) {
                    this.shared_database_path = data.shared_database_path;
                }
            }
        }
        get shared_database_path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set shared_database_path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            shared_database_path?: string;
        }): ServerlessResources {
            const message = new ServerlessResources({});
            if (data.shared_database_path != null) {
                message.shared_database_path = data.shared_database_path;
            }
            return message;
        }
        toObject() {
            const data: {
                shared_database_path?: string;
            } = {};
            if (this.shared_database_path != null) {
                data.shared_database_path = this.shared_database_path;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shared_database_path.length)
                writer.writeString(1, this.shared_database_path);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerlessResources {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerlessResources();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.shared_database_path = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerlessResources {
            return ServerlessResources.deserialize(bytes);
        }
    }
    export class DatabaseOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            disable_tx_service?: boolean;
            disable_external_subdomain?: boolean;
            plan_resolution?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("disable_tx_service" in data && data.disable_tx_service != undefined) {
                    this.disable_tx_service = data.disable_tx_service;
                }
                if ("disable_external_subdomain" in data && data.disable_external_subdomain != undefined) {
                    this.disable_external_subdomain = data.disable_external_subdomain;
                }
                if ("plan_resolution" in data && data.plan_resolution != undefined) {
                    this.plan_resolution = data.plan_resolution;
                }
            }
        }
        get disable_tx_service() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set disable_tx_service(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get disable_external_subdomain() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set disable_external_subdomain(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get plan_resolution() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set plan_resolution(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            disable_tx_service?: boolean;
            disable_external_subdomain?: boolean;
            plan_resolution?: number;
        }): DatabaseOptions {
            const message = new DatabaseOptions({});
            if (data.disable_tx_service != null) {
                message.disable_tx_service = data.disable_tx_service;
            }
            if (data.disable_external_subdomain != null) {
                message.disable_external_subdomain = data.disable_external_subdomain;
            }
            if (data.plan_resolution != null) {
                message.plan_resolution = data.plan_resolution;
            }
            return message;
        }
        toObject() {
            const data: {
                disable_tx_service?: boolean;
                disable_external_subdomain?: boolean;
                plan_resolution?: number;
            } = {};
            if (this.disable_tx_service != null) {
                data.disable_tx_service = this.disable_tx_service;
            }
            if (this.disable_external_subdomain != null) {
                data.disable_external_subdomain = this.disable_external_subdomain;
            }
            if (this.plan_resolution != null) {
                data.plan_resolution = this.plan_resolution;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.disable_tx_service != false)
                writer.writeBool(1, this.disable_tx_service);
            if (this.disable_external_subdomain != false)
                writer.writeBool(2, this.disable_external_subdomain);
            if (this.plan_resolution != 0)
                writer.writeUint32(3, this.plan_resolution);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DatabaseOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DatabaseOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.disable_tx_service = reader.readBool();
                        break;
                    case 2:
                        message.disable_external_subdomain = reader.readBool();
                        break;
                    case 3:
                        message.plan_resolution = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DatabaseOptions {
            return DatabaseOptions.deserialize(bytes);
        }
    }
    export class SchemaOperationQuotas extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            leaky_bucket_quotas?: SchemaOperationQuotas.LeakyBucket[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("leaky_bucket_quotas" in data && data.leaky_bucket_quotas != undefined) {
                    this.leaky_bucket_quotas = data.leaky_bucket_quotas;
                }
            }
        }
        get leaky_bucket_quotas() {
            return pb_1.Message.getRepeatedWrapperField(this, SchemaOperationQuotas.LeakyBucket, 1) as SchemaOperationQuotas.LeakyBucket[];
        }
        set leaky_bucket_quotas(value: SchemaOperationQuotas.LeakyBucket[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            leaky_bucket_quotas?: ReturnType<typeof SchemaOperationQuotas.LeakyBucket.prototype.toObject>[];
        }): SchemaOperationQuotas {
            const message = new SchemaOperationQuotas({});
            if (data.leaky_bucket_quotas != null) {
                message.leaky_bucket_quotas = data.leaky_bucket_quotas.map(item => SchemaOperationQuotas.LeakyBucket.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                leaky_bucket_quotas?: ReturnType<typeof SchemaOperationQuotas.LeakyBucket.prototype.toObject>[];
            } = {};
            if (this.leaky_bucket_quotas != null) {
                data.leaky_bucket_quotas = this.leaky_bucket_quotas.map((item: SchemaOperationQuotas.LeakyBucket) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.leaky_bucket_quotas.length)
                writer.writeRepeatedMessage(1, this.leaky_bucket_quotas, (item: SchemaOperationQuotas.LeakyBucket) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SchemaOperationQuotas {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SchemaOperationQuotas();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.leaky_bucket_quotas, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SchemaOperationQuotas.LeakyBucket.deserialize(reader), SchemaOperationQuotas.LeakyBucket));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SchemaOperationQuotas {
            return SchemaOperationQuotas.deserialize(bytes);
        }
    }
    export namespace SchemaOperationQuotas {
        export class LeakyBucket extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                bucket_size?: number;
                bucket_seconds?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("bucket_size" in data && data.bucket_size != undefined) {
                        this.bucket_size = data.bucket_size;
                    }
                    if ("bucket_seconds" in data && data.bucket_seconds != undefined) {
                        this.bucket_seconds = data.bucket_seconds;
                    }
                }
            }
            get bucket_size() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set bucket_size(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get bucket_seconds() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set bucket_seconds(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                bucket_size?: number;
                bucket_seconds?: number;
            }): LeakyBucket {
                const message = new LeakyBucket({});
                if (data.bucket_size != null) {
                    message.bucket_size = data.bucket_size;
                }
                if (data.bucket_seconds != null) {
                    message.bucket_seconds = data.bucket_seconds;
                }
                return message;
            }
            toObject() {
                const data: {
                    bucket_size?: number;
                    bucket_seconds?: number;
                } = {};
                if (this.bucket_size != null) {
                    data.bucket_size = this.bucket_size;
                }
                if (this.bucket_seconds != null) {
                    data.bucket_seconds = this.bucket_seconds;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.bucket_size != 0)
                    writer.writeDouble(1, this.bucket_size);
                if (this.bucket_seconds != 0)
                    writer.writeUint64(2, this.bucket_seconds);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeakyBucket {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeakyBucket();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.bucket_size = reader.readDouble();
                            break;
                        case 2:
                            message.bucket_seconds = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LeakyBucket {
                return LeakyBucket.deserialize(bytes);
            }
        }
    }
    export class DatabaseQuotas extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data_size_hard_quota?: number;
            data_size_soft_quota?: number;
            data_stream_shards_quota?: number;
            data_stream_reserved_storage_quota?: number;
            ttl_min_run_internal_seconds?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data_size_hard_quota" in data && data.data_size_hard_quota != undefined) {
                    this.data_size_hard_quota = data.data_size_hard_quota;
                }
                if ("data_size_soft_quota" in data && data.data_size_soft_quota != undefined) {
                    this.data_size_soft_quota = data.data_size_soft_quota;
                }
                if ("data_stream_shards_quota" in data && data.data_stream_shards_quota != undefined) {
                    this.data_stream_shards_quota = data.data_stream_shards_quota;
                }
                if ("data_stream_reserved_storage_quota" in data && data.data_stream_reserved_storage_quota != undefined) {
                    this.data_stream_reserved_storage_quota = data.data_stream_reserved_storage_quota;
                }
                if ("ttl_min_run_internal_seconds" in data && data.ttl_min_run_internal_seconds != undefined) {
                    this.ttl_min_run_internal_seconds = data.ttl_min_run_internal_seconds;
                }
            }
        }
        get data_size_hard_quota() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set data_size_hard_quota(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data_size_soft_quota() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set data_size_soft_quota(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get data_stream_shards_quota() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set data_stream_shards_quota(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get data_stream_reserved_storage_quota() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set data_stream_reserved_storage_quota(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get ttl_min_run_internal_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set ttl_min_run_internal_seconds(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            data_size_hard_quota?: number;
            data_size_soft_quota?: number;
            data_stream_shards_quota?: number;
            data_stream_reserved_storage_quota?: number;
            ttl_min_run_internal_seconds?: number;
        }): DatabaseQuotas {
            const message = new DatabaseQuotas({});
            if (data.data_size_hard_quota != null) {
                message.data_size_hard_quota = data.data_size_hard_quota;
            }
            if (data.data_size_soft_quota != null) {
                message.data_size_soft_quota = data.data_size_soft_quota;
            }
            if (data.data_stream_shards_quota != null) {
                message.data_stream_shards_quota = data.data_stream_shards_quota;
            }
            if (data.data_stream_reserved_storage_quota != null) {
                message.data_stream_reserved_storage_quota = data.data_stream_reserved_storage_quota;
            }
            if (data.ttl_min_run_internal_seconds != null) {
                message.ttl_min_run_internal_seconds = data.ttl_min_run_internal_seconds;
            }
            return message;
        }
        toObject() {
            const data: {
                data_size_hard_quota?: number;
                data_size_soft_quota?: number;
                data_stream_shards_quota?: number;
                data_stream_reserved_storage_quota?: number;
                ttl_min_run_internal_seconds?: number;
            } = {};
            if (this.data_size_hard_quota != null) {
                data.data_size_hard_quota = this.data_size_hard_quota;
            }
            if (this.data_size_soft_quota != null) {
                data.data_size_soft_quota = this.data_size_soft_quota;
            }
            if (this.data_stream_shards_quota != null) {
                data.data_stream_shards_quota = this.data_stream_shards_quota;
            }
            if (this.data_stream_reserved_storage_quota != null) {
                data.data_stream_reserved_storage_quota = this.data_stream_reserved_storage_quota;
            }
            if (this.ttl_min_run_internal_seconds != null) {
                data.ttl_min_run_internal_seconds = this.ttl_min_run_internal_seconds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data_size_hard_quota != 0)
                writer.writeUint64(1, this.data_size_hard_quota);
            if (this.data_size_soft_quota != 0)
                writer.writeUint64(2, this.data_size_soft_quota);
            if (this.data_stream_shards_quota != 0)
                writer.writeUint64(3, this.data_stream_shards_quota);
            if (this.data_stream_reserved_storage_quota != 0)
                writer.writeUint64(5, this.data_stream_reserved_storage_quota);
            if (this.ttl_min_run_internal_seconds != 0)
                writer.writeUint32(4, this.ttl_min_run_internal_seconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DatabaseQuotas {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DatabaseQuotas();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data_size_hard_quota = reader.readUint64();
                        break;
                    case 2:
                        message.data_size_soft_quota = reader.readUint64();
                        break;
                    case 3:
                        message.data_stream_shards_quota = reader.readUint64();
                        break;
                    case 5:
                        message.data_stream_reserved_storage_quota = reader.readUint64();
                        break;
                    case 4:
                        message.ttl_min_run_internal_seconds = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DatabaseQuotas {
            return DatabaseQuotas.deserialize(bytes);
        }
    }
    export class CreateDatabaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 6, 7]];
        constructor(data?: any[] | ({
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
            path?: string;
            options?: DatabaseOptions;
            attributes?: Map<string, string>;
            schema_operation_quotas?: SchemaOperationQuotas;
            idempotency_key?: string;
            database_quotas?: DatabaseQuotas;
        } & (({
            resources?: Resources;
            shared_resources?: never;
            serverless_resources?: never;
        } | {
            resources?: never;
            shared_resources?: Resources;
            serverless_resources?: never;
        } | {
            resources?: never;
            shared_resources?: never;
            serverless_resources?: ServerlessResources;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("resources" in data && data.resources != undefined) {
                    this.resources = data.resources;
                }
                if ("shared_resources" in data && data.shared_resources != undefined) {
                    this.shared_resources = data.shared_resources;
                }
                if ("serverless_resources" in data && data.serverless_resources != undefined) {
                    this.serverless_resources = data.serverless_resources;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("schema_operation_quotas" in data && data.schema_operation_quotas != undefined) {
                    this.schema_operation_quotas = data.schema_operation_quotas;
                }
                if ("idempotency_key" in data && data.idempotency_key != undefined) {
                    this.idempotency_key = data.idempotency_key;
                }
                if ("database_quotas" in data && data.database_quotas != undefined) {
                    this.database_quotas = data.database_quotas;
                }
            }
            if (!this.attributes)
                this.attributes = new Map();
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resources() {
            return pb_1.Message.getWrapperField(this, Resources, 3) as Resources;
        }
        set resources(value: Resources) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_resources() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get shared_resources() {
            return pb_1.Message.getWrapperField(this, Resources, 6) as Resources;
        }
        set shared_resources(value: Resources) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_shared_resources() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get serverless_resources() {
            return pb_1.Message.getWrapperField(this, ServerlessResources, 7) as ServerlessResources;
        }
        set serverless_resources(value: ServerlessResources) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_serverless_resources() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get options() {
            return pb_1.Message.getWrapperField(this, DatabaseOptions, 4) as DatabaseOptions;
        }
        set options(value: DatabaseOptions) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_options() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get attributes() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get schema_operation_quotas() {
            return pb_1.Message.getWrapperField(this, SchemaOperationQuotas, 8) as SchemaOperationQuotas;
        }
        set schema_operation_quotas(value: SchemaOperationQuotas) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_schema_operation_quotas() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get idempotency_key() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set idempotency_key(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get database_quotas() {
            return pb_1.Message.getWrapperField(this, DatabaseQuotas, 10) as DatabaseQuotas;
        }
        set database_quotas(value: DatabaseQuotas) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_database_quotas() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get resources_kind() {
            const cases: {
                [index: number]: "none" | "resources" | "shared_resources" | "serverless_resources";
            } = {
                0: "none",
                3: "resources",
                6: "shared_resources",
                7: "serverless_resources"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 6, 7])];
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            path?: string;
            resources?: ReturnType<typeof Resources.prototype.toObject>;
            shared_resources?: ReturnType<typeof Resources.prototype.toObject>;
            serverless_resources?: ReturnType<typeof ServerlessResources.prototype.toObject>;
            options?: ReturnType<typeof DatabaseOptions.prototype.toObject>;
            attributes?: {
                [key: string]: string;
            };
            schema_operation_quotas?: ReturnType<typeof SchemaOperationQuotas.prototype.toObject>;
            idempotency_key?: string;
            database_quotas?: ReturnType<typeof DatabaseQuotas.prototype.toObject>;
        }): CreateDatabaseRequest {
            const message = new CreateDatabaseRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.resources != null) {
                message.resources = Resources.fromObject(data.resources);
            }
            if (data.shared_resources != null) {
                message.shared_resources = Resources.fromObject(data.shared_resources);
            }
            if (data.serverless_resources != null) {
                message.serverless_resources = ServerlessResources.fromObject(data.serverless_resources);
            }
            if (data.options != null) {
                message.options = DatabaseOptions.fromObject(data.options);
            }
            if (typeof data.attributes == "object") {
                message.attributes = new Map(Object.entries(data.attributes));
            }
            if (data.schema_operation_quotas != null) {
                message.schema_operation_quotas = SchemaOperationQuotas.fromObject(data.schema_operation_quotas);
            }
            if (data.idempotency_key != null) {
                message.idempotency_key = data.idempotency_key;
            }
            if (data.database_quotas != null) {
                message.database_quotas = DatabaseQuotas.fromObject(data.database_quotas);
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
                path?: string;
                resources?: ReturnType<typeof Resources.prototype.toObject>;
                shared_resources?: ReturnType<typeof Resources.prototype.toObject>;
                serverless_resources?: ReturnType<typeof ServerlessResources.prototype.toObject>;
                options?: ReturnType<typeof DatabaseOptions.prototype.toObject>;
                attributes?: {
                    [key: string]: string;
                };
                schema_operation_quotas?: ReturnType<typeof SchemaOperationQuotas.prototype.toObject>;
                idempotency_key?: string;
                database_quotas?: ReturnType<typeof DatabaseQuotas.prototype.toObject>;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.resources != null) {
                data.resources = this.resources.toObject();
            }
            if (this.shared_resources != null) {
                data.shared_resources = this.shared_resources.toObject();
            }
            if (this.serverless_resources != null) {
                data.serverless_resources = this.serverless_resources.toObject();
            }
            if (this.options != null) {
                data.options = this.options.toObject();
            }
            if (this.attributes != null) {
                data.attributes = (Object.fromEntries)(this.attributes);
            }
            if (this.schema_operation_quotas != null) {
                data.schema_operation_quotas = this.schema_operation_quotas.toObject();
            }
            if (this.idempotency_key != null) {
                data.idempotency_key = this.idempotency_key;
            }
            if (this.database_quotas != null) {
                data.database_quotas = this.database_quotas.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.has_resources)
                writer.writeMessage(3, this.resources, () => this.resources.serialize(writer));
            if (this.has_shared_resources)
                writer.writeMessage(6, this.shared_resources, () => this.shared_resources.serialize(writer));
            if (this.has_serverless_resources)
                writer.writeMessage(7, this.serverless_resources, () => this.serverless_resources.serialize(writer));
            if (this.has_options)
                writer.writeMessage(4, this.options, () => this.options.serialize(writer));
            for (const [key, value] of this.attributes) {
                writer.writeMessage(5, this.attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_schema_operation_quotas)
                writer.writeMessage(8, this.schema_operation_quotas, () => this.schema_operation_quotas.serialize(writer));
            if (this.idempotency_key.length)
                writer.writeString(9, this.idempotency_key);
            if (this.has_database_quotas)
                writer.writeMessage(10, this.database_quotas, () => this.database_quotas.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateDatabaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDatabaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.resources, () => message.resources = Resources.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.shared_resources, () => message.shared_resources = Resources.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.serverless_resources, () => message.serverless_resources = ServerlessResources.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.options, () => message.options = DatabaseOptions.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 8:
                        reader.readMessage(message.schema_operation_quotas, () => message.schema_operation_quotas = SchemaOperationQuotas.deserialize(reader));
                        break;
                    case 9:
                        message.idempotency_key = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.database_quotas, () => message.database_quotas = DatabaseQuotas.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateDatabaseRequest {
            return CreateDatabaseRequest.deserialize(bytes);
        }
    }
    export class CreateDatabaseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): CreateDatabaseResponse {
            const message = new CreateDatabaseResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateDatabaseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDatabaseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateDatabaseResponse {
            return CreateDatabaseResponse.deserialize(bytes);
        }
    }
    export class GetDatabaseStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 2) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            path?: string;
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
        }): GetDatabaseStatusRequest {
            const message = new GetDatabaseStatusRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.has_operation_params)
                writer.writeMessage(2, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDatabaseStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDatabaseStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDatabaseStatusRequest {
            return GetDatabaseStatusRequest.deserialize(bytes);
        }
    }
    export class GetDatabaseStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): GetDatabaseStatusResponse {
            const message = new GetDatabaseStatusResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDatabaseStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDatabaseStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDatabaseStatusResponse {
            return GetDatabaseStatusResponse.deserialize(bytes);
        }
    }
    export class GetDatabaseStatusResult extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 7, 8]];
        constructor(data?: any[] | ({
            path?: string;
            state?: GetDatabaseStatusResult.State;
            allocated_resources?: Resources;
            registered_resources?: AllocatedComputationalUnit[];
            generation?: number;
            schema_operation_quotas?: SchemaOperationQuotas;
            database_quotas?: DatabaseQuotas;
        } & (({
            required_resources?: Resources;
            required_shared_resources?: never;
            serverless_resources?: never;
        } | {
            required_resources?: never;
            required_shared_resources?: Resources;
            serverless_resources?: never;
        } | {
            required_resources?: never;
            required_shared_resources?: never;
            serverless_resources?: ServerlessResources;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("required_resources" in data && data.required_resources != undefined) {
                    this.required_resources = data.required_resources;
                }
                if ("required_shared_resources" in data && data.required_shared_resources != undefined) {
                    this.required_shared_resources = data.required_shared_resources;
                }
                if ("serverless_resources" in data && data.serverless_resources != undefined) {
                    this.serverless_resources = data.serverless_resources;
                }
                if ("allocated_resources" in data && data.allocated_resources != undefined) {
                    this.allocated_resources = data.allocated_resources;
                }
                if ("registered_resources" in data && data.registered_resources != undefined) {
                    this.registered_resources = data.registered_resources;
                }
                if ("generation" in data && data.generation != undefined) {
                    this.generation = data.generation;
                }
                if ("schema_operation_quotas" in data && data.schema_operation_quotas != undefined) {
                    this.schema_operation_quotas = data.schema_operation_quotas;
                }
                if ("database_quotas" in data && data.database_quotas != undefined) {
                    this.database_quotas = data.database_quotas;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, GetDatabaseStatusResult.State.STATE_UNSPECIFIED) as GetDatabaseStatusResult.State;
        }
        set state(value: GetDatabaseStatusResult.State) {
            pb_1.Message.setField(this, 2, value);
        }
        get required_resources() {
            return pb_1.Message.getWrapperField(this, Resources, 3) as Resources;
        }
        set required_resources(value: Resources) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_required_resources() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get required_shared_resources() {
            return pb_1.Message.getWrapperField(this, Resources, 7) as Resources;
        }
        set required_shared_resources(value: Resources) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_required_shared_resources() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get serverless_resources() {
            return pb_1.Message.getWrapperField(this, ServerlessResources, 8) as ServerlessResources;
        }
        set serverless_resources(value: ServerlessResources) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_serverless_resources() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get allocated_resources() {
            return pb_1.Message.getWrapperField(this, Resources, 4) as Resources;
        }
        set allocated_resources(value: Resources) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_allocated_resources() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get registered_resources() {
            return pb_1.Message.getRepeatedWrapperField(this, AllocatedComputationalUnit, 5) as AllocatedComputationalUnit[];
        }
        set registered_resources(value: AllocatedComputationalUnit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get generation() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set generation(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get schema_operation_quotas() {
            return pb_1.Message.getWrapperField(this, SchemaOperationQuotas, 9) as SchemaOperationQuotas;
        }
        set schema_operation_quotas(value: SchemaOperationQuotas) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_schema_operation_quotas() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get database_quotas() {
            return pb_1.Message.getWrapperField(this, DatabaseQuotas, 10) as DatabaseQuotas;
        }
        set database_quotas(value: DatabaseQuotas) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_database_quotas() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get resources_kind() {
            const cases: {
                [index: number]: "none" | "required_resources" | "required_shared_resources" | "serverless_resources";
            } = {
                0: "none",
                3: "required_resources",
                7: "required_shared_resources",
                8: "serverless_resources"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 7, 8])];
        }
        static fromObject(data: {
            path?: string;
            state?: GetDatabaseStatusResult.State;
            required_resources?: ReturnType<typeof Resources.prototype.toObject>;
            required_shared_resources?: ReturnType<typeof Resources.prototype.toObject>;
            serverless_resources?: ReturnType<typeof ServerlessResources.prototype.toObject>;
            allocated_resources?: ReturnType<typeof Resources.prototype.toObject>;
            registered_resources?: ReturnType<typeof AllocatedComputationalUnit.prototype.toObject>[];
            generation?: number;
            schema_operation_quotas?: ReturnType<typeof SchemaOperationQuotas.prototype.toObject>;
            database_quotas?: ReturnType<typeof DatabaseQuotas.prototype.toObject>;
        }): GetDatabaseStatusResult {
            const message = new GetDatabaseStatusResult({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.required_resources != null) {
                message.required_resources = Resources.fromObject(data.required_resources);
            }
            if (data.required_shared_resources != null) {
                message.required_shared_resources = Resources.fromObject(data.required_shared_resources);
            }
            if (data.serverless_resources != null) {
                message.serverless_resources = ServerlessResources.fromObject(data.serverless_resources);
            }
            if (data.allocated_resources != null) {
                message.allocated_resources = Resources.fromObject(data.allocated_resources);
            }
            if (data.registered_resources != null) {
                message.registered_resources = data.registered_resources.map(item => AllocatedComputationalUnit.fromObject(item));
            }
            if (data.generation != null) {
                message.generation = data.generation;
            }
            if (data.schema_operation_quotas != null) {
                message.schema_operation_quotas = SchemaOperationQuotas.fromObject(data.schema_operation_quotas);
            }
            if (data.database_quotas != null) {
                message.database_quotas = DatabaseQuotas.fromObject(data.database_quotas);
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                state?: GetDatabaseStatusResult.State;
                required_resources?: ReturnType<typeof Resources.prototype.toObject>;
                required_shared_resources?: ReturnType<typeof Resources.prototype.toObject>;
                serverless_resources?: ReturnType<typeof ServerlessResources.prototype.toObject>;
                allocated_resources?: ReturnType<typeof Resources.prototype.toObject>;
                registered_resources?: ReturnType<typeof AllocatedComputationalUnit.prototype.toObject>[];
                generation?: number;
                schema_operation_quotas?: ReturnType<typeof SchemaOperationQuotas.prototype.toObject>;
                database_quotas?: ReturnType<typeof DatabaseQuotas.prototype.toObject>;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.required_resources != null) {
                data.required_resources = this.required_resources.toObject();
            }
            if (this.required_shared_resources != null) {
                data.required_shared_resources = this.required_shared_resources.toObject();
            }
            if (this.serverless_resources != null) {
                data.serverless_resources = this.serverless_resources.toObject();
            }
            if (this.allocated_resources != null) {
                data.allocated_resources = this.allocated_resources.toObject();
            }
            if (this.registered_resources != null) {
                data.registered_resources = this.registered_resources.map((item: AllocatedComputationalUnit) => item.toObject());
            }
            if (this.generation != null) {
                data.generation = this.generation;
            }
            if (this.schema_operation_quotas != null) {
                data.schema_operation_quotas = this.schema_operation_quotas.toObject();
            }
            if (this.database_quotas != null) {
                data.database_quotas = this.database_quotas.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.state != GetDatabaseStatusResult.State.STATE_UNSPECIFIED)
                writer.writeEnum(2, this.state);
            if (this.has_required_resources)
                writer.writeMessage(3, this.required_resources, () => this.required_resources.serialize(writer));
            if (this.has_required_shared_resources)
                writer.writeMessage(7, this.required_shared_resources, () => this.required_shared_resources.serialize(writer));
            if (this.has_serverless_resources)
                writer.writeMessage(8, this.serverless_resources, () => this.serverless_resources.serialize(writer));
            if (this.has_allocated_resources)
                writer.writeMessage(4, this.allocated_resources, () => this.allocated_resources.serialize(writer));
            if (this.registered_resources.length)
                writer.writeRepeatedMessage(5, this.registered_resources, (item: AllocatedComputationalUnit) => item.serialize(writer));
            if (this.generation != 0)
                writer.writeUint64(6, this.generation);
            if (this.has_schema_operation_quotas)
                writer.writeMessage(9, this.schema_operation_quotas, () => this.schema_operation_quotas.serialize(writer));
            if (this.has_database_quotas)
                writer.writeMessage(10, this.database_quotas, () => this.database_quotas.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDatabaseStatusResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDatabaseStatusResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        message.state = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.required_resources, () => message.required_resources = Resources.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.required_shared_resources, () => message.required_shared_resources = Resources.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.serverless_resources, () => message.serverless_resources = ServerlessResources.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.allocated_resources, () => message.allocated_resources = Resources.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.registered_resources, () => pb_1.Message.addToRepeatedWrapperField(message, 5, AllocatedComputationalUnit.deserialize(reader), AllocatedComputationalUnit));
                        break;
                    case 6:
                        message.generation = reader.readUint64();
                        break;
                    case 9:
                        reader.readMessage(message.schema_operation_quotas, () => message.schema_operation_quotas = SchemaOperationQuotas.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.database_quotas, () => message.database_quotas = DatabaseQuotas.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDatabaseStatusResult {
            return GetDatabaseStatusResult.deserialize(bytes);
        }
    }
    export namespace GetDatabaseStatusResult {
        export enum State {
            STATE_UNSPECIFIED = 0,
            CREATING = 1,
            RUNNING = 2,
            REMOVING = 3,
            PENDING_RESOURCES = 4,
            CONFIGURING = 5
        }
    }
    export class AlterDatabaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            computational_units_to_add?: ComputationalUnits[];
            computational_units_to_remove?: ComputationalUnits[];
            storage_units_to_add?: StorageUnits[];
            computational_units_to_register?: AllocatedComputationalUnit[];
            computational_units_to_deregister?: AllocatedComputationalUnit[];
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
            generation?: number;
            schema_operation_quotas?: SchemaOperationQuotas;
            idempotency_key?: string;
            database_quotas?: DatabaseQuotas;
            alter_attributes?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("computational_units_to_add" in data && data.computational_units_to_add != undefined) {
                    this.computational_units_to_add = data.computational_units_to_add;
                }
                if ("computational_units_to_remove" in data && data.computational_units_to_remove != undefined) {
                    this.computational_units_to_remove = data.computational_units_to_remove;
                }
                if ("storage_units_to_add" in data && data.storage_units_to_add != undefined) {
                    this.storage_units_to_add = data.storage_units_to_add;
                }
                if ("computational_units_to_register" in data && data.computational_units_to_register != undefined) {
                    this.computational_units_to_register = data.computational_units_to_register;
                }
                if ("computational_units_to_deregister" in data && data.computational_units_to_deregister != undefined) {
                    this.computational_units_to_deregister = data.computational_units_to_deregister;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("generation" in data && data.generation != undefined) {
                    this.generation = data.generation;
                }
                if ("schema_operation_quotas" in data && data.schema_operation_quotas != undefined) {
                    this.schema_operation_quotas = data.schema_operation_quotas;
                }
                if ("idempotency_key" in data && data.idempotency_key != undefined) {
                    this.idempotency_key = data.idempotency_key;
                }
                if ("database_quotas" in data && data.database_quotas != undefined) {
                    this.database_quotas = data.database_quotas;
                }
                if ("alter_attributes" in data && data.alter_attributes != undefined) {
                    this.alter_attributes = data.alter_attributes;
                }
            }
            if (!this.alter_attributes)
                this.alter_attributes = new Map();
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get computational_units_to_add() {
            return pb_1.Message.getRepeatedWrapperField(this, ComputationalUnits, 2) as ComputationalUnits[];
        }
        set computational_units_to_add(value: ComputationalUnits[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get computational_units_to_remove() {
            return pb_1.Message.getRepeatedWrapperField(this, ComputationalUnits, 3) as ComputationalUnits[];
        }
        set computational_units_to_remove(value: ComputationalUnits[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get storage_units_to_add() {
            return pb_1.Message.getRepeatedWrapperField(this, StorageUnits, 4) as StorageUnits[];
        }
        set storage_units_to_add(value: StorageUnits[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get computational_units_to_register() {
            return pb_1.Message.getRepeatedWrapperField(this, AllocatedComputationalUnit, 5) as AllocatedComputationalUnit[];
        }
        set computational_units_to_register(value: AllocatedComputationalUnit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get computational_units_to_deregister() {
            return pb_1.Message.getRepeatedWrapperField(this, AllocatedComputationalUnit, 6) as AllocatedComputationalUnit[];
        }
        set computational_units_to_deregister(value: AllocatedComputationalUnit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 7) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get generation() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set generation(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get schema_operation_quotas() {
            return pb_1.Message.getWrapperField(this, SchemaOperationQuotas, 9) as SchemaOperationQuotas;
        }
        set schema_operation_quotas(value: SchemaOperationQuotas) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_schema_operation_quotas() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get idempotency_key() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set idempotency_key(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get database_quotas() {
            return pb_1.Message.getWrapperField(this, DatabaseQuotas, 11) as DatabaseQuotas;
        }
        set database_quotas(value: DatabaseQuotas) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_database_quotas() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get alter_attributes() {
            return pb_1.Message.getField(this, 12) as any as Map<string, string>;
        }
        set alter_attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 12, value as any);
        }
        static fromObject(data: {
            path?: string;
            computational_units_to_add?: ReturnType<typeof ComputationalUnits.prototype.toObject>[];
            computational_units_to_remove?: ReturnType<typeof ComputationalUnits.prototype.toObject>[];
            storage_units_to_add?: ReturnType<typeof StorageUnits.prototype.toObject>[];
            computational_units_to_register?: ReturnType<typeof AllocatedComputationalUnit.prototype.toObject>[];
            computational_units_to_deregister?: ReturnType<typeof AllocatedComputationalUnit.prototype.toObject>[];
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            generation?: number;
            schema_operation_quotas?: ReturnType<typeof SchemaOperationQuotas.prototype.toObject>;
            idempotency_key?: string;
            database_quotas?: ReturnType<typeof DatabaseQuotas.prototype.toObject>;
            alter_attributes?: {
                [key: string]: string;
            };
        }): AlterDatabaseRequest {
            const message = new AlterDatabaseRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.computational_units_to_add != null) {
                message.computational_units_to_add = data.computational_units_to_add.map(item => ComputationalUnits.fromObject(item));
            }
            if (data.computational_units_to_remove != null) {
                message.computational_units_to_remove = data.computational_units_to_remove.map(item => ComputationalUnits.fromObject(item));
            }
            if (data.storage_units_to_add != null) {
                message.storage_units_to_add = data.storage_units_to_add.map(item => StorageUnits.fromObject(item));
            }
            if (data.computational_units_to_register != null) {
                message.computational_units_to_register = data.computational_units_to_register.map(item => AllocatedComputationalUnit.fromObject(item));
            }
            if (data.computational_units_to_deregister != null) {
                message.computational_units_to_deregister = data.computational_units_to_deregister.map(item => AllocatedComputationalUnit.fromObject(item));
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.generation != null) {
                message.generation = data.generation;
            }
            if (data.schema_operation_quotas != null) {
                message.schema_operation_quotas = SchemaOperationQuotas.fromObject(data.schema_operation_quotas);
            }
            if (data.idempotency_key != null) {
                message.idempotency_key = data.idempotency_key;
            }
            if (data.database_quotas != null) {
                message.database_quotas = DatabaseQuotas.fromObject(data.database_quotas);
            }
            if (typeof data.alter_attributes == "object") {
                message.alter_attributes = new Map(Object.entries(data.alter_attributes));
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                computational_units_to_add?: ReturnType<typeof ComputationalUnits.prototype.toObject>[];
                computational_units_to_remove?: ReturnType<typeof ComputationalUnits.prototype.toObject>[];
                storage_units_to_add?: ReturnType<typeof StorageUnits.prototype.toObject>[];
                computational_units_to_register?: ReturnType<typeof AllocatedComputationalUnit.prototype.toObject>[];
                computational_units_to_deregister?: ReturnType<typeof AllocatedComputationalUnit.prototype.toObject>[];
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
                generation?: number;
                schema_operation_quotas?: ReturnType<typeof SchemaOperationQuotas.prototype.toObject>;
                idempotency_key?: string;
                database_quotas?: ReturnType<typeof DatabaseQuotas.prototype.toObject>;
                alter_attributes?: {
                    [key: string]: string;
                };
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.computational_units_to_add != null) {
                data.computational_units_to_add = this.computational_units_to_add.map((item: ComputationalUnits) => item.toObject());
            }
            if (this.computational_units_to_remove != null) {
                data.computational_units_to_remove = this.computational_units_to_remove.map((item: ComputationalUnits) => item.toObject());
            }
            if (this.storage_units_to_add != null) {
                data.storage_units_to_add = this.storage_units_to_add.map((item: StorageUnits) => item.toObject());
            }
            if (this.computational_units_to_register != null) {
                data.computational_units_to_register = this.computational_units_to_register.map((item: AllocatedComputationalUnit) => item.toObject());
            }
            if (this.computational_units_to_deregister != null) {
                data.computational_units_to_deregister = this.computational_units_to_deregister.map((item: AllocatedComputationalUnit) => item.toObject());
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.generation != null) {
                data.generation = this.generation;
            }
            if (this.schema_operation_quotas != null) {
                data.schema_operation_quotas = this.schema_operation_quotas.toObject();
            }
            if (this.idempotency_key != null) {
                data.idempotency_key = this.idempotency_key;
            }
            if (this.database_quotas != null) {
                data.database_quotas = this.database_quotas.toObject();
            }
            if (this.alter_attributes != null) {
                data.alter_attributes = (Object.fromEntries)(this.alter_attributes);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.computational_units_to_add.length)
                writer.writeRepeatedMessage(2, this.computational_units_to_add, (item: ComputationalUnits) => item.serialize(writer));
            if (this.computational_units_to_remove.length)
                writer.writeRepeatedMessage(3, this.computational_units_to_remove, (item: ComputationalUnits) => item.serialize(writer));
            if (this.storage_units_to_add.length)
                writer.writeRepeatedMessage(4, this.storage_units_to_add, (item: StorageUnits) => item.serialize(writer));
            if (this.computational_units_to_register.length)
                writer.writeRepeatedMessage(5, this.computational_units_to_register, (item: AllocatedComputationalUnit) => item.serialize(writer));
            if (this.computational_units_to_deregister.length)
                writer.writeRepeatedMessage(6, this.computational_units_to_deregister, (item: AllocatedComputationalUnit) => item.serialize(writer));
            if (this.has_operation_params)
                writer.writeMessage(7, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.generation != 0)
                writer.writeUint64(8, this.generation);
            if (this.has_schema_operation_quotas)
                writer.writeMessage(9, this.schema_operation_quotas, () => this.schema_operation_quotas.serialize(writer));
            if (this.idempotency_key.length)
                writer.writeString(10, this.idempotency_key);
            if (this.has_database_quotas)
                writer.writeMessage(11, this.database_quotas, () => this.database_quotas.serialize(writer));
            for (const [key, value] of this.alter_attributes) {
                writer.writeMessage(12, this.alter_attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterDatabaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterDatabaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.computational_units_to_add, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ComputationalUnits.deserialize(reader), ComputationalUnits));
                        break;
                    case 3:
                        reader.readMessage(message.computational_units_to_remove, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ComputationalUnits.deserialize(reader), ComputationalUnits));
                        break;
                    case 4:
                        reader.readMessage(message.storage_units_to_add, () => pb_1.Message.addToRepeatedWrapperField(message, 4, StorageUnits.deserialize(reader), StorageUnits));
                        break;
                    case 5:
                        reader.readMessage(message.computational_units_to_register, () => pb_1.Message.addToRepeatedWrapperField(message, 5, AllocatedComputationalUnit.deserialize(reader), AllocatedComputationalUnit));
                        break;
                    case 6:
                        reader.readMessage(message.computational_units_to_deregister, () => pb_1.Message.addToRepeatedWrapperField(message, 6, AllocatedComputationalUnit.deserialize(reader), AllocatedComputationalUnit));
                        break;
                    case 7:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 8:
                        message.generation = reader.readUint64();
                        break;
                    case 9:
                        reader.readMessage(message.schema_operation_quotas, () => message.schema_operation_quotas = SchemaOperationQuotas.deserialize(reader));
                        break;
                    case 10:
                        message.idempotency_key = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.database_quotas, () => message.database_quotas = DatabaseQuotas.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.alter_attributes as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterDatabaseRequest {
            return AlterDatabaseRequest.deserialize(bytes);
        }
    }
    export class AlterDatabaseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): AlterDatabaseResponse {
            const message = new AlterDatabaseResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterDatabaseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterDatabaseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterDatabaseResponse {
            return AlterDatabaseResponse.deserialize(bytes);
        }
    }
    export class ListDatabasesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
        }): ListDatabasesRequest {
            const message = new ListDatabasesRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDatabasesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDatabasesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDatabasesRequest {
            return ListDatabasesRequest.deserialize(bytes);
        }
    }
    export class ListDatabasesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): ListDatabasesResponse {
            const message = new ListDatabasesResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDatabasesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDatabasesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDatabasesResponse {
            return ListDatabasesResponse.deserialize(bytes);
        }
    }
    export class ListDatabasesResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            paths?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("paths" in data && data.paths != undefined) {
                    this.paths = data.paths;
                }
            }
        }
        get paths() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set paths(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            paths?: string[];
        }): ListDatabasesResult {
            const message = new ListDatabasesResult({});
            if (data.paths != null) {
                message.paths = data.paths;
            }
            return message;
        }
        toObject() {
            const data: {
                paths?: string[];
            } = {};
            if (this.paths != null) {
                data.paths = this.paths;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.paths.length)
                writer.writeRepeatedString(1, this.paths);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDatabasesResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDatabasesResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListDatabasesResult {
            return ListDatabasesResult.deserialize(bytes);
        }
    }
    export class RemoveDatabaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 2) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            path?: string;
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
        }): RemoveDatabaseRequest {
            const message = new RemoveDatabaseRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.has_operation_params)
                writer.writeMessage(2, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveDatabaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveDatabaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveDatabaseRequest {
            return RemoveDatabaseRequest.deserialize(bytes);
        }
    }
    export class RemoveDatabaseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): RemoveDatabaseResponse {
            const message = new RemoveDatabaseResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveDatabaseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveDatabaseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RemoveDatabaseResponse {
            return RemoveDatabaseResponse.deserialize(bytes);
        }
    }
    export class StorageUnitDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            kind?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set kind(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            kind?: string;
            labels?: {
                [key: string]: string;
            };
        }): StorageUnitDescription {
            const message = new StorageUnitDescription({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind.length)
                writer.writeString(1, this.kind);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageUnitDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageUnitDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageUnitDescription {
            return StorageUnitDescription.deserialize(bytes);
        }
    }
    export class AvailabilityZoneDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            name?: string;
            labels?: {
                [key: string]: string;
            };
        }): AvailabilityZoneDescription {
            const message = new AvailabilityZoneDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AvailabilityZoneDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvailabilityZoneDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AvailabilityZoneDescription {
            return AvailabilityZoneDescription.deserialize(bytes);
        }
    }
    export class ComputationalUnitDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            kind?: string;
            labels?: Map<string, string>;
            allowed_availability_zones?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
                if ("allowed_availability_zones" in data && data.allowed_availability_zones != undefined) {
                    this.allowed_availability_zones = data.allowed_availability_zones;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set kind(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get allowed_availability_zones() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set allowed_availability_zones(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            kind?: string;
            labels?: {
                [key: string]: string;
            };
            allowed_availability_zones?: string[];
        }): ComputationalUnitDescription {
            const message = new ComputationalUnitDescription({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            if (data.allowed_availability_zones != null) {
                message.allowed_availability_zones = data.allowed_availability_zones;
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: string;
                labels?: {
                    [key: string]: string;
                };
                allowed_availability_zones?: string[];
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            if (this.allowed_availability_zones != null) {
                data.allowed_availability_zones = this.allowed_availability_zones;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind.length)
                writer.writeString(1, this.kind);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.allowed_availability_zones.length)
                writer.writeRepeatedString(3, this.allowed_availability_zones);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComputationalUnitDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComputationalUnitDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ComputationalUnitDescription {
            return ComputationalUnitDescription.deserialize(bytes);
        }
    }
    export class DescribeDatabaseOptionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
        }): DescribeDatabaseOptionsRequest {
            const message = new DescribeDatabaseOptionsRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeDatabaseOptionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeDatabaseOptionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeDatabaseOptionsRequest {
            return DescribeDatabaseOptionsRequest.deserialize(bytes);
        }
    }
    export class DescribeDatabaseOptionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): DescribeDatabaseOptionsResponse {
            const message = new DescribeDatabaseOptionsResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeDatabaseOptionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeDatabaseOptionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeDatabaseOptionsResponse {
            return DescribeDatabaseOptionsResponse.deserialize(bytes);
        }
    }
    export class DescribeDatabaseOptionsResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storage_units?: StorageUnitDescription[];
            availability_zones?: AvailabilityZoneDescription[];
            computational_units?: ComputationalUnitDescription[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storage_units" in data && data.storage_units != undefined) {
                    this.storage_units = data.storage_units;
                }
                if ("availability_zones" in data && data.availability_zones != undefined) {
                    this.availability_zones = data.availability_zones;
                }
                if ("computational_units" in data && data.computational_units != undefined) {
                    this.computational_units = data.computational_units;
                }
            }
        }
        get storage_units() {
            return pb_1.Message.getRepeatedWrapperField(this, StorageUnitDescription, 1) as StorageUnitDescription[];
        }
        set storage_units(value: StorageUnitDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get availability_zones() {
            return pb_1.Message.getRepeatedWrapperField(this, AvailabilityZoneDescription, 2) as AvailabilityZoneDescription[];
        }
        set availability_zones(value: AvailabilityZoneDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get computational_units() {
            return pb_1.Message.getRepeatedWrapperField(this, ComputationalUnitDescription, 3) as ComputationalUnitDescription[];
        }
        set computational_units(value: ComputationalUnitDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            storage_units?: ReturnType<typeof StorageUnitDescription.prototype.toObject>[];
            availability_zones?: ReturnType<typeof AvailabilityZoneDescription.prototype.toObject>[];
            computational_units?: ReturnType<typeof ComputationalUnitDescription.prototype.toObject>[];
        }): DescribeDatabaseOptionsResult {
            const message = new DescribeDatabaseOptionsResult({});
            if (data.storage_units != null) {
                message.storage_units = data.storage_units.map(item => StorageUnitDescription.fromObject(item));
            }
            if (data.availability_zones != null) {
                message.availability_zones = data.availability_zones.map(item => AvailabilityZoneDescription.fromObject(item));
            }
            if (data.computational_units != null) {
                message.computational_units = data.computational_units.map(item => ComputationalUnitDescription.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                storage_units?: ReturnType<typeof StorageUnitDescription.prototype.toObject>[];
                availability_zones?: ReturnType<typeof AvailabilityZoneDescription.prototype.toObject>[];
                computational_units?: ReturnType<typeof ComputationalUnitDescription.prototype.toObject>[];
            } = {};
            if (this.storage_units != null) {
                data.storage_units = this.storage_units.map((item: StorageUnitDescription) => item.toObject());
            }
            if (this.availability_zones != null) {
                data.availability_zones = this.availability_zones.map((item: AvailabilityZoneDescription) => item.toObject());
            }
            if (this.computational_units != null) {
                data.computational_units = this.computational_units.map((item: ComputationalUnitDescription) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storage_units.length)
                writer.writeRepeatedMessage(1, this.storage_units, (item: StorageUnitDescription) => item.serialize(writer));
            if (this.availability_zones.length)
                writer.writeRepeatedMessage(2, this.availability_zones, (item: AvailabilityZoneDescription) => item.serialize(writer));
            if (this.computational_units.length)
                writer.writeRepeatedMessage(3, this.computational_units, (item: ComputationalUnitDescription) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeDatabaseOptionsResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeDatabaseOptionsResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.storage_units, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StorageUnitDescription.deserialize(reader), StorageUnitDescription));
                        break;
                    case 2:
                        reader.readMessage(message.availability_zones, () => pb_1.Message.addToRepeatedWrapperField(message, 2, AvailabilityZoneDescription.deserialize(reader), AvailabilityZoneDescription));
                        break;
                    case 3:
                        reader.readMessage(message.computational_units, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ComputationalUnitDescription.deserialize(reader), ComputationalUnitDescription));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeDatabaseOptionsResult {
            return DescribeDatabaseOptionsResult.deserialize(bytes);
        }
    }
}
