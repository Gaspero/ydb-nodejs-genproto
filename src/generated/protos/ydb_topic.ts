/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_topic.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ydb_operation";
import * as dependency_2 from "./ydb_scheme";
import * as dependency_3 from "./ydb_status_codes";
import * as dependency_4 from "./ydb_issue_message";
import * as dependency_5 from "./ydb_table";
import * as dependency_6 from "./annotations/validation";
import * as dependency_7 from "./../google/protobuf/duration";
import * as dependency_8 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace Ydb.Topic {
    export enum Codec {
        CODEC_UNSPECIFIED = 0,
        CODEC_RAW = 1,
        CODEC_GZIP = 2,
        CODEC_LZOP = 3,
        CODEC_ZSTD = 4,
        CODEC_CUSTOM = 10000
    }
    export enum MeteringMode {
        METERING_MODE_UNSPECIFIED = 0,
        METERING_MODE_RESERVED_CAPACITY = 1,
        METERING_MODE_REQUEST_UNITS = 2
    }
    export class SupportedCodecs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            codecs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("codecs" in data && data.codecs != undefined) {
                    this.codecs = data.codecs;
                }
            }
        }
        get codecs() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set codecs(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            codecs?: number[];
        }): SupportedCodecs {
            const message = new SupportedCodecs({});
            if (data.codecs != null) {
                message.codecs = data.codecs;
            }
            return message;
        }
        toObject() {
            const data: {
                codecs?: number[];
            } = {};
            if (this.codecs != null) {
                data.codecs = this.codecs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.codecs.length)
                writer.writePackedInt32(1, this.codecs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SupportedCodecs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SupportedCodecs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.codecs = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SupportedCodecs {
            return SupportedCodecs.deserialize(bytes);
        }
    }
    export class OffsetsRange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start?: number;
            end?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
            }
        }
        get start() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            start?: number;
            end?: number;
        }): OffsetsRange {
            const message = new OffsetsRange({});
            if (data.start != null) {
                message.start = data.start;
            }
            if (data.end != null) {
                message.end = data.end;
            }
            return message;
        }
        toObject() {
            const data: {
                start?: number;
                end?: number;
            } = {};
            if (this.start != null) {
                data.start = this.start;
            }
            if (this.end != null) {
                data.end = this.end;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start != 0)
                writer.writeInt64(1, this.start);
            if (this.end != 0)
                writer.writeInt64(2, this.end);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OffsetsRange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OffsetsRange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start = reader.readInt64();
                        break;
                    case 2:
                        message.end = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OffsetsRange {
            return OffsetsRange.deserialize(bytes);
        }
    }
    export class UpdateTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): UpdateTokenRequest {
            const message = new UpdateTokenRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTokenRequest {
            return UpdateTokenRequest.deserialize(bytes);
        }
    }
    export class UpdateTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateTokenResponse {
            const message = new UpdateTokenResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTokenResponse {
            return UpdateTokenResponse.deserialize(bytes);
        }
    }
    export class StreamWriteMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StreamWriteMessage {
            const message = new StreamWriteMessage({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamWriteMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamWriteMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamWriteMessage {
            return StreamWriteMessage.deserialize(bytes);
        }
    }
    export namespace StreamWriteMessage {
        export class FromClient extends pb_1.Message {
            #one_of_decls: number[][] = [[1, 2, 3]];
            constructor(data?: any[] | ({} & (({
                init_request?: StreamWriteMessage.InitRequest;
                write_request?: never;
                update_token_request?: never;
            } | {
                init_request?: never;
                write_request?: StreamWriteMessage.WriteRequest;
                update_token_request?: never;
            } | {
                init_request?: never;
                write_request?: never;
                update_token_request?: UpdateTokenRequest;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("init_request" in data && data.init_request != undefined) {
                        this.init_request = data.init_request;
                    }
                    if ("write_request" in data && data.write_request != undefined) {
                        this.write_request = data.write_request;
                    }
                    if ("update_token_request" in data && data.update_token_request != undefined) {
                        this.update_token_request = data.update_token_request;
                    }
                }
            }
            get init_request() {
                return pb_1.Message.getWrapperField(this, StreamWriteMessage.InitRequest, 1) as StreamWriteMessage.InitRequest;
            }
            set init_request(value: StreamWriteMessage.InitRequest) {
                pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_init_request() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get write_request() {
                return pb_1.Message.getWrapperField(this, StreamWriteMessage.WriteRequest, 2) as StreamWriteMessage.WriteRequest;
            }
            set write_request(value: StreamWriteMessage.WriteRequest) {
                pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
            }
            get has_write_request() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get update_token_request() {
                return pb_1.Message.getWrapperField(this, UpdateTokenRequest, 3) as UpdateTokenRequest;
            }
            set update_token_request(value: UpdateTokenRequest) {
                pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_update_token_request() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get client_message() {
                const cases: {
                    [index: number]: "none" | "init_request" | "write_request" | "update_token_request";
                } = {
                    0: "none",
                    1: "init_request",
                    2: "write_request",
                    3: "update_token_request"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
            }
            static fromObject(data: {
                init_request?: ReturnType<typeof StreamWriteMessage.InitRequest.prototype.toObject>;
                write_request?: ReturnType<typeof StreamWriteMessage.WriteRequest.prototype.toObject>;
                update_token_request?: ReturnType<typeof UpdateTokenRequest.prototype.toObject>;
            }): FromClient {
                const message = new FromClient({});
                if (data.init_request != null) {
                    message.init_request = StreamWriteMessage.InitRequest.fromObject(data.init_request);
                }
                if (data.write_request != null) {
                    message.write_request = StreamWriteMessage.WriteRequest.fromObject(data.write_request);
                }
                if (data.update_token_request != null) {
                    message.update_token_request = UpdateTokenRequest.fromObject(data.update_token_request);
                }
                return message;
            }
            toObject() {
                const data: {
                    init_request?: ReturnType<typeof StreamWriteMessage.InitRequest.prototype.toObject>;
                    write_request?: ReturnType<typeof StreamWriteMessage.WriteRequest.prototype.toObject>;
                    update_token_request?: ReturnType<typeof UpdateTokenRequest.prototype.toObject>;
                } = {};
                if (this.init_request != null) {
                    data.init_request = this.init_request.toObject();
                }
                if (this.write_request != null) {
                    data.write_request = this.write_request.toObject();
                }
                if (this.update_token_request != null) {
                    data.update_token_request = this.update_token_request.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_init_request)
                    writer.writeMessage(1, this.init_request, () => this.init_request.serialize(writer));
                if (this.has_write_request)
                    writer.writeMessage(2, this.write_request, () => this.write_request.serialize(writer));
                if (this.has_update_token_request)
                    writer.writeMessage(3, this.update_token_request, () => this.update_token_request.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FromClient {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FromClient();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.init_request, () => message.init_request = StreamWriteMessage.InitRequest.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.write_request, () => message.write_request = StreamWriteMessage.WriteRequest.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.update_token_request, () => message.update_token_request = UpdateTokenRequest.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FromClient {
                return FromClient.deserialize(bytes);
            }
        }
        export class FromServer extends pb_1.Message {
            #one_of_decls: number[][] = [[3, 4, 5]];
            constructor(data?: any[] | ({
                status?: dependency_3.Ydb.StatusIds.StatusCode;
                issues?: dependency_4.Ydb.Issue.IssueMessage[];
            } & (({
                init_response?: StreamWriteMessage.InitResponse;
                write_response?: never;
                update_token_response?: never;
            } | {
                init_response?: never;
                write_response?: StreamWriteMessage.WriteResponse;
                update_token_response?: never;
            } | {
                init_response?: never;
                write_response?: never;
                update_token_response?: UpdateTokenResponse;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                    if ("init_response" in data && data.init_response != undefined) {
                        this.init_response = data.init_response;
                    }
                    if ("write_response" in data && data.write_response != undefined) {
                        this.write_response = data.write_response;
                    }
                    if ("update_token_response" in data && data.update_token_response != undefined) {
                        this.update_token_response = data.update_token_response;
                    }
                }
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 1, dependency_3.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_3.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_3.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 1, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_4.Ydb.Issue.IssueMessage, 2) as dependency_4.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_4.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get init_response() {
                return pb_1.Message.getWrapperField(this, StreamWriteMessage.InitResponse, 3) as StreamWriteMessage.InitResponse;
            }
            set init_response(value: StreamWriteMessage.InitResponse) {
                pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_init_response() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get write_response() {
                return pb_1.Message.getWrapperField(this, StreamWriteMessage.WriteResponse, 4) as StreamWriteMessage.WriteResponse;
            }
            set write_response(value: StreamWriteMessage.WriteResponse) {
                pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
            }
            get has_write_response() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get update_token_response() {
                return pb_1.Message.getWrapperField(this, UpdateTokenResponse, 5) as UpdateTokenResponse;
            }
            set update_token_response(value: UpdateTokenResponse) {
                pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
            }
            get has_update_token_response() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get server_message() {
                const cases: {
                    [index: number]: "none" | "init_response" | "write_response" | "update_token_response";
                } = {
                    0: "none",
                    3: "init_response",
                    4: "write_response",
                    5: "update_token_response"
                };
                return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
            }
            static fromObject(data: {
                status?: dependency_3.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_4.Ydb.Issue.IssueMessage.prototype.toObject>[];
                init_response?: ReturnType<typeof StreamWriteMessage.InitResponse.prototype.toObject>;
                write_response?: ReturnType<typeof StreamWriteMessage.WriteResponse.prototype.toObject>;
                update_token_response?: ReturnType<typeof UpdateTokenResponse.prototype.toObject>;
            }): FromServer {
                const message = new FromServer({});
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_4.Ydb.Issue.IssueMessage.fromObject(item));
                }
                if (data.init_response != null) {
                    message.init_response = StreamWriteMessage.InitResponse.fromObject(data.init_response);
                }
                if (data.write_response != null) {
                    message.write_response = StreamWriteMessage.WriteResponse.fromObject(data.write_response);
                }
                if (data.update_token_response != null) {
                    message.update_token_response = UpdateTokenResponse.fromObject(data.update_token_response);
                }
                return message;
            }
            toObject() {
                const data: {
                    status?: dependency_3.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_4.Ydb.Issue.IssueMessage.prototype.toObject>[];
                    init_response?: ReturnType<typeof StreamWriteMessage.InitResponse.prototype.toObject>;
                    write_response?: ReturnType<typeof StreamWriteMessage.WriteResponse.prototype.toObject>;
                    update_token_response?: ReturnType<typeof UpdateTokenResponse.prototype.toObject>;
                } = {};
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_4.Ydb.Issue.IssueMessage) => item.toObject());
                }
                if (this.init_response != null) {
                    data.init_response = this.init_response.toObject();
                }
                if (this.write_response != null) {
                    data.write_response = this.write_response.toObject();
                }
                if (this.update_token_response != null) {
                    data.update_token_response = this.update_token_response.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.status != dependency_3.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(1, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(2, this.issues, (item: dependency_4.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (this.has_init_response)
                    writer.writeMessage(3, this.init_response, () => this.init_response.serialize(writer));
                if (this.has_write_response)
                    writer.writeMessage(4, this.write_response, () => this.write_response.serialize(writer));
                if (this.has_update_token_response)
                    writer.writeMessage(5, this.update_token_response, () => this.update_token_response.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FromServer {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FromServer();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.status = reader.readEnum();
                            break;
                        case 2:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.Ydb.Issue.IssueMessage.deserialize(reader), dependency_4.Ydb.Issue.IssueMessage));
                            break;
                        case 3:
                            reader.readMessage(message.init_response, () => message.init_response = StreamWriteMessage.InitResponse.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.write_response, () => message.write_response = StreamWriteMessage.WriteResponse.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.update_token_response, () => message.update_token_response = UpdateTokenResponse.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FromServer {
                return FromServer.deserialize(bytes);
            }
        }
        export class InitRequest extends pb_1.Message {
            #one_of_decls: number[][] = [[4, 5]];
            constructor(data?: any[] | ({
                path?: string;
                producer_id?: string;
                write_session_meta?: Map<string, string>;
                get_last_seq_no?: boolean;
            } & (({
                message_group_id?: string;
                partition_id?: never;
            } | {
                message_group_id?: never;
                partition_id?: number;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("path" in data && data.path != undefined) {
                        this.path = data.path;
                    }
                    if ("producer_id" in data && data.producer_id != undefined) {
                        this.producer_id = data.producer_id;
                    }
                    if ("write_session_meta" in data && data.write_session_meta != undefined) {
                        this.write_session_meta = data.write_session_meta;
                    }
                    if ("message_group_id" in data && data.message_group_id != undefined) {
                        this.message_group_id = data.message_group_id;
                    }
                    if ("partition_id" in data && data.partition_id != undefined) {
                        this.partition_id = data.partition_id;
                    }
                    if ("get_last_seq_no" in data && data.get_last_seq_no != undefined) {
                        this.get_last_seq_no = data.get_last_seq_no;
                    }
                }
                if (!this.write_session_meta)
                    this.write_session_meta = new Map();
            }
            get path() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set path(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get producer_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set producer_id(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get write_session_meta() {
                return pb_1.Message.getField(this, 3) as any as Map<string, string>;
            }
            set write_session_meta(value: Map<string, string>) {
                pb_1.Message.setField(this, 3, value as any);
            }
            get message_group_id() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set message_group_id(value: string) {
                pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
            }
            get has_message_group_id() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get partition_id() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set partition_id(value: number) {
                pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
            }
            get has_partition_id() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get get_last_seq_no() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set get_last_seq_no(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get partitioning() {
                const cases: {
                    [index: number]: "none" | "message_group_id" | "partition_id";
                } = {
                    0: "none",
                    4: "message_group_id",
                    5: "partition_id"
                };
                return cases[pb_1.Message.computeOneofCase(this, [4, 5])];
            }
            static fromObject(data: {
                path?: string;
                producer_id?: string;
                write_session_meta?: {
                    [key: string]: string;
                };
                message_group_id?: string;
                partition_id?: number;
                get_last_seq_no?: boolean;
            }): InitRequest {
                const message = new InitRequest({});
                if (data.path != null) {
                    message.path = data.path;
                }
                if (data.producer_id != null) {
                    message.producer_id = data.producer_id;
                }
                if (typeof data.write_session_meta == "object") {
                    message.write_session_meta = new Map(Object.entries(data.write_session_meta));
                }
                if (data.message_group_id != null) {
                    message.message_group_id = data.message_group_id;
                }
                if (data.partition_id != null) {
                    message.partition_id = data.partition_id;
                }
                if (data.get_last_seq_no != null) {
                    message.get_last_seq_no = data.get_last_seq_no;
                }
                return message;
            }
            toObject() {
                const data: {
                    path?: string;
                    producer_id?: string;
                    write_session_meta?: {
                        [key: string]: string;
                    };
                    message_group_id?: string;
                    partition_id?: number;
                    get_last_seq_no?: boolean;
                } = {};
                if (this.path != null) {
                    data.path = this.path;
                }
                if (this.producer_id != null) {
                    data.producer_id = this.producer_id;
                }
                if (this.write_session_meta != null) {
                    data.write_session_meta = (Object.fromEntries)(this.write_session_meta);
                }
                if (this.message_group_id != null) {
                    data.message_group_id = this.message_group_id;
                }
                if (this.partition_id != null) {
                    data.partition_id = this.partition_id;
                }
                if (this.get_last_seq_no != null) {
                    data.get_last_seq_no = this.get_last_seq_no;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.path.length)
                    writer.writeString(1, this.path);
                if (this.producer_id.length)
                    writer.writeString(2, this.producer_id);
                for (const [key, value] of this.write_session_meta) {
                    writer.writeMessage(3, this.write_session_meta, () => {
                        writer.writeString(1, key);
                        writer.writeString(2, value);
                    });
                }
                if (this.has_message_group_id)
                    writer.writeString(4, this.message_group_id);
                if (this.has_partition_id)
                    writer.writeInt64(5, this.partition_id);
                if (this.get_last_seq_no != false)
                    writer.writeBool(6, this.get_last_seq_no);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitRequest {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.path = reader.readString();
                            break;
                        case 2:
                            message.producer_id = reader.readString();
                            break;
                        case 3:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.write_session_meta as any, reader, reader.readString, reader.readString));
                            break;
                        case 4:
                            message.message_group_id = reader.readString();
                            break;
                        case 5:
                            message.partition_id = reader.readInt64();
                            break;
                        case 6:
                            message.get_last_seq_no = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): InitRequest {
                return InitRequest.deserialize(bytes);
            }
        }
        export class InitResponse extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                last_seq_no?: number;
                session_id?: string;
                partition_id?: number;
                supported_codecs?: SupportedCodecs;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("last_seq_no" in data && data.last_seq_no != undefined) {
                        this.last_seq_no = data.last_seq_no;
                    }
                    if ("session_id" in data && data.session_id != undefined) {
                        this.session_id = data.session_id;
                    }
                    if ("partition_id" in data && data.partition_id != undefined) {
                        this.partition_id = data.partition_id;
                    }
                    if ("supported_codecs" in data && data.supported_codecs != undefined) {
                        this.supported_codecs = data.supported_codecs;
                    }
                }
            }
            get last_seq_no() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set last_seq_no(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get session_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set session_id(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get partition_id() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set partition_id(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get supported_codecs() {
                return pb_1.Message.getWrapperField(this, SupportedCodecs, 4) as SupportedCodecs;
            }
            set supported_codecs(value: SupportedCodecs) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_supported_codecs() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                last_seq_no?: number;
                session_id?: string;
                partition_id?: number;
                supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
            }): InitResponse {
                const message = new InitResponse({});
                if (data.last_seq_no != null) {
                    message.last_seq_no = data.last_seq_no;
                }
                if (data.session_id != null) {
                    message.session_id = data.session_id;
                }
                if (data.partition_id != null) {
                    message.partition_id = data.partition_id;
                }
                if (data.supported_codecs != null) {
                    message.supported_codecs = SupportedCodecs.fromObject(data.supported_codecs);
                }
                return message;
            }
            toObject() {
                const data: {
                    last_seq_no?: number;
                    session_id?: string;
                    partition_id?: number;
                    supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
                } = {};
                if (this.last_seq_no != null) {
                    data.last_seq_no = this.last_seq_no;
                }
                if (this.session_id != null) {
                    data.session_id = this.session_id;
                }
                if (this.partition_id != null) {
                    data.partition_id = this.partition_id;
                }
                if (this.supported_codecs != null) {
                    data.supported_codecs = this.supported_codecs.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.last_seq_no != 0)
                    writer.writeInt64(1, this.last_seq_no);
                if (this.session_id.length)
                    writer.writeString(2, this.session_id);
                if (this.partition_id != 0)
                    writer.writeInt64(3, this.partition_id);
                if (this.has_supported_codecs)
                    writer.writeMessage(4, this.supported_codecs, () => this.supported_codecs.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitResponse {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.last_seq_no = reader.readInt64();
                            break;
                        case 2:
                            message.session_id = reader.readString();
                            break;
                        case 3:
                            message.partition_id = reader.readInt64();
                            break;
                        case 4:
                            reader.readMessage(message.supported_codecs, () => message.supported_codecs = SupportedCodecs.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): InitResponse {
                return InitResponse.deserialize(bytes);
            }
        }
        export class WriteRequest extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                messages?: StreamWriteMessage.WriteRequest.MessageData[];
                codec?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("messages" in data && data.messages != undefined) {
                        this.messages = data.messages;
                    }
                    if ("codec" in data && data.codec != undefined) {
                        this.codec = data.codec;
                    }
                }
            }
            get messages() {
                return pb_1.Message.getRepeatedWrapperField(this, StreamWriteMessage.WriteRequest.MessageData, 1) as StreamWriteMessage.WriteRequest.MessageData[];
            }
            set messages(value: StreamWriteMessage.WriteRequest.MessageData[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get codec() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set codec(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                messages?: ReturnType<typeof StreamWriteMessage.WriteRequest.MessageData.prototype.toObject>[];
                codec?: number;
            }): WriteRequest {
                const message = new WriteRequest({});
                if (data.messages != null) {
                    message.messages = data.messages.map(item => StreamWriteMessage.WriteRequest.MessageData.fromObject(item));
                }
                if (data.codec != null) {
                    message.codec = data.codec;
                }
                return message;
            }
            toObject() {
                const data: {
                    messages?: ReturnType<typeof StreamWriteMessage.WriteRequest.MessageData.prototype.toObject>[];
                    codec?: number;
                } = {};
                if (this.messages != null) {
                    data.messages = this.messages.map((item: StreamWriteMessage.WriteRequest.MessageData) => item.toObject());
                }
                if (this.codec != null) {
                    data.codec = this.codec;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.messages.length)
                    writer.writeRepeatedMessage(1, this.messages, (item: StreamWriteMessage.WriteRequest.MessageData) => item.serialize(writer));
                if (this.codec != 0)
                    writer.writeInt32(2, this.codec);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteRequest {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.messages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamWriteMessage.WriteRequest.MessageData.deserialize(reader), StreamWriteMessage.WriteRequest.MessageData));
                            break;
                        case 2:
                            message.codec = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): WriteRequest {
                return WriteRequest.deserialize(bytes);
            }
        }
        export namespace WriteRequest {
            export class MessageData extends pb_1.Message {
                #one_of_decls: number[][] = [[5, 6]];
                constructor(data?: any[] | ({
                    seq_no?: number;
                    created_at?: dependency_8.google.protobuf.Timestamp;
                    data?: Uint8Array;
                    uncompressed_size?: number;
                } & (({
                    message_group_id?: string;
                    partition_id?: never;
                } | {
                    message_group_id?: never;
                    partition_id?: number;
                })))) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("seq_no" in data && data.seq_no != undefined) {
                            this.seq_no = data.seq_no;
                        }
                        if ("created_at" in data && data.created_at != undefined) {
                            this.created_at = data.created_at;
                        }
                        if ("data" in data && data.data != undefined) {
                            this.data = data.data;
                        }
                        if ("uncompressed_size" in data && data.uncompressed_size != undefined) {
                            this.uncompressed_size = data.uncompressed_size;
                        }
                        if ("message_group_id" in data && data.message_group_id != undefined) {
                            this.message_group_id = data.message_group_id;
                        }
                        if ("partition_id" in data && data.partition_id != undefined) {
                            this.partition_id = data.partition_id;
                        }
                    }
                }
                get seq_no() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set seq_no(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get created_at() {
                    return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 2) as dependency_8.google.protobuf.Timestamp;
                }
                set created_at(value: dependency_8.google.protobuf.Timestamp) {
                    pb_1.Message.setWrapperField(this, 2, value);
                }
                get has_created_at() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get data() {
                    return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
                }
                set data(value: Uint8Array) {
                    pb_1.Message.setField(this, 3, value);
                }
                get uncompressed_size() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set uncompressed_size(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get message_group_id() {
                    return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
                }
                set message_group_id(value: string) {
                    pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
                }
                get has_message_group_id() {
                    return pb_1.Message.getField(this, 5) != null;
                }
                get partition_id() {
                    return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
                }
                set partition_id(value: number) {
                    pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
                }
                get has_partition_id() {
                    return pb_1.Message.getField(this, 6) != null;
                }
                get partitioning() {
                    const cases: {
                        [index: number]: "none" | "message_group_id" | "partition_id";
                    } = {
                        0: "none",
                        5: "message_group_id",
                        6: "partition_id"
                    };
                    return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
                }
                static fromObject(data: {
                    seq_no?: number;
                    created_at?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                    data?: Uint8Array;
                    uncompressed_size?: number;
                    message_group_id?: string;
                    partition_id?: number;
                }): MessageData {
                    const message = new MessageData({});
                    if (data.seq_no != null) {
                        message.seq_no = data.seq_no;
                    }
                    if (data.created_at != null) {
                        message.created_at = dependency_8.google.protobuf.Timestamp.fromObject(data.created_at);
                    }
                    if (data.data != null) {
                        message.data = data.data;
                    }
                    if (data.uncompressed_size != null) {
                        message.uncompressed_size = data.uncompressed_size;
                    }
                    if (data.message_group_id != null) {
                        message.message_group_id = data.message_group_id;
                    }
                    if (data.partition_id != null) {
                        message.partition_id = data.partition_id;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        seq_no?: number;
                        created_at?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                        data?: Uint8Array;
                        uncompressed_size?: number;
                        message_group_id?: string;
                        partition_id?: number;
                    } = {};
                    if (this.seq_no != null) {
                        data.seq_no = this.seq_no;
                    }
                    if (this.created_at != null) {
                        data.created_at = this.created_at.toObject();
                    }
                    if (this.data != null) {
                        data.data = this.data;
                    }
                    if (this.uncompressed_size != null) {
                        data.uncompressed_size = this.uncompressed_size;
                    }
                    if (this.message_group_id != null) {
                        data.message_group_id = this.message_group_id;
                    }
                    if (this.partition_id != null) {
                        data.partition_id = this.partition_id;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.seq_no != 0)
                        writer.writeInt64(1, this.seq_no);
                    if (this.has_created_at)
                        writer.writeMessage(2, this.created_at, () => this.created_at.serialize(writer));
                    if (this.data.length)
                        writer.writeBytes(3, this.data);
                    if (this.uncompressed_size != 0)
                        writer.writeInt64(4, this.uncompressed_size);
                    if (this.has_message_group_id)
                        writer.writeString(5, this.message_group_id);
                    if (this.has_partition_id)
                        writer.writeInt64(6, this.partition_id);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageData {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageData();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.seq_no = reader.readInt64();
                                break;
                            case 2:
                                reader.readMessage(message.created_at, () => message.created_at = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                                break;
                            case 3:
                                message.data = reader.readBytes();
                                break;
                            case 4:
                                message.uncompressed_size = reader.readInt64();
                                break;
                            case 5:
                                message.message_group_id = reader.readString();
                                break;
                            case 6:
                                message.partition_id = reader.readInt64();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): MessageData {
                    return MessageData.deserialize(bytes);
                }
            }
        }
        export class WriteResponse extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                acks?: StreamWriteMessage.WriteResponse.WriteAck[];
                partition_id?: number;
                write_statistics?: StreamWriteMessage.WriteResponse.WriteStatistics;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("acks" in data && data.acks != undefined) {
                        this.acks = data.acks;
                    }
                    if ("partition_id" in data && data.partition_id != undefined) {
                        this.partition_id = data.partition_id;
                    }
                    if ("write_statistics" in data && data.write_statistics != undefined) {
                        this.write_statistics = data.write_statistics;
                    }
                }
            }
            get acks() {
                return pb_1.Message.getRepeatedWrapperField(this, StreamWriteMessage.WriteResponse.WriteAck, 1) as StreamWriteMessage.WriteResponse.WriteAck[];
            }
            set acks(value: StreamWriteMessage.WriteResponse.WriteAck[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get partition_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set partition_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get write_statistics() {
                return pb_1.Message.getWrapperField(this, StreamWriteMessage.WriteResponse.WriteStatistics, 3) as StreamWriteMessage.WriteResponse.WriteStatistics;
            }
            set write_statistics(value: StreamWriteMessage.WriteResponse.WriteStatistics) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_write_statistics() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                acks?: ReturnType<typeof StreamWriteMessage.WriteResponse.WriteAck.prototype.toObject>[];
                partition_id?: number;
                write_statistics?: ReturnType<typeof StreamWriteMessage.WriteResponse.WriteStatistics.prototype.toObject>;
            }): WriteResponse {
                const message = new WriteResponse({});
                if (data.acks != null) {
                    message.acks = data.acks.map(item => StreamWriteMessage.WriteResponse.WriteAck.fromObject(item));
                }
                if (data.partition_id != null) {
                    message.partition_id = data.partition_id;
                }
                if (data.write_statistics != null) {
                    message.write_statistics = StreamWriteMessage.WriteResponse.WriteStatistics.fromObject(data.write_statistics);
                }
                return message;
            }
            toObject() {
                const data: {
                    acks?: ReturnType<typeof StreamWriteMessage.WriteResponse.WriteAck.prototype.toObject>[];
                    partition_id?: number;
                    write_statistics?: ReturnType<typeof StreamWriteMessage.WriteResponse.WriteStatistics.prototype.toObject>;
                } = {};
                if (this.acks != null) {
                    data.acks = this.acks.map((item: StreamWriteMessage.WriteResponse.WriteAck) => item.toObject());
                }
                if (this.partition_id != null) {
                    data.partition_id = this.partition_id;
                }
                if (this.write_statistics != null) {
                    data.write_statistics = this.write_statistics.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.acks.length)
                    writer.writeRepeatedMessage(1, this.acks, (item: StreamWriteMessage.WriteResponse.WriteAck) => item.serialize(writer));
                if (this.partition_id != 0)
                    writer.writeInt64(2, this.partition_id);
                if (this.has_write_statistics)
                    writer.writeMessage(3, this.write_statistics, () => this.write_statistics.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteResponse {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.acks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamWriteMessage.WriteResponse.WriteAck.deserialize(reader), StreamWriteMessage.WriteResponse.WriteAck));
                            break;
                        case 2:
                            message.partition_id = reader.readInt64();
                            break;
                        case 3:
                            reader.readMessage(message.write_statistics, () => message.write_statistics = StreamWriteMessage.WriteResponse.WriteStatistics.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): WriteResponse {
                return WriteResponse.deserialize(bytes);
            }
        }
        export namespace WriteResponse {
            export class WriteAck extends pb_1.Message {
                #one_of_decls: number[][] = [[2, 3]];
                constructor(data?: any[] | ({
                    seq_no?: number;
                } & (({
                    written?: StreamWriteMessage.WriteResponse.WriteAck.Written;
                    skipped?: never;
                } | {
                    written?: never;
                    skipped?: StreamWriteMessage.WriteResponse.WriteAck.Skipped;
                })))) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("seq_no" in data && data.seq_no != undefined) {
                            this.seq_no = data.seq_no;
                        }
                        if ("written" in data && data.written != undefined) {
                            this.written = data.written;
                        }
                        if ("skipped" in data && data.skipped != undefined) {
                            this.skipped = data.skipped;
                        }
                    }
                }
                get seq_no() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set seq_no(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get written() {
                    return pb_1.Message.getWrapperField(this, StreamWriteMessage.WriteResponse.WriteAck.Written, 2) as StreamWriteMessage.WriteResponse.WriteAck.Written;
                }
                set written(value: StreamWriteMessage.WriteResponse.WriteAck.Written) {
                    pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
                }
                get has_written() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get skipped() {
                    return pb_1.Message.getWrapperField(this, StreamWriteMessage.WriteResponse.WriteAck.Skipped, 3) as StreamWriteMessage.WriteResponse.WriteAck.Skipped;
                }
                set skipped(value: StreamWriteMessage.WriteResponse.WriteAck.Skipped) {
                    pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
                }
                get has_skipped() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get message_write_status() {
                    const cases: {
                        [index: number]: "none" | "written" | "skipped";
                    } = {
                        0: "none",
                        2: "written",
                        3: "skipped"
                    };
                    return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
                }
                static fromObject(data: {
                    seq_no?: number;
                    written?: ReturnType<typeof StreamWriteMessage.WriteResponse.WriteAck.Written.prototype.toObject>;
                    skipped?: ReturnType<typeof StreamWriteMessage.WriteResponse.WriteAck.Skipped.prototype.toObject>;
                }): WriteAck {
                    const message = new WriteAck({});
                    if (data.seq_no != null) {
                        message.seq_no = data.seq_no;
                    }
                    if (data.written != null) {
                        message.written = StreamWriteMessage.WriteResponse.WriteAck.Written.fromObject(data.written);
                    }
                    if (data.skipped != null) {
                        message.skipped = StreamWriteMessage.WriteResponse.WriteAck.Skipped.fromObject(data.skipped);
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        seq_no?: number;
                        written?: ReturnType<typeof StreamWriteMessage.WriteResponse.WriteAck.Written.prototype.toObject>;
                        skipped?: ReturnType<typeof StreamWriteMessage.WriteResponse.WriteAck.Skipped.prototype.toObject>;
                    } = {};
                    if (this.seq_no != null) {
                        data.seq_no = this.seq_no;
                    }
                    if (this.written != null) {
                        data.written = this.written.toObject();
                    }
                    if (this.skipped != null) {
                        data.skipped = this.skipped.toObject();
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.seq_no != 0)
                        writer.writeInt64(1, this.seq_no);
                    if (this.has_written)
                        writer.writeMessage(2, this.written, () => this.written.serialize(writer));
                    if (this.has_skipped)
                        writer.writeMessage(3, this.skipped, () => this.skipped.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteAck {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteAck();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.seq_no = reader.readInt64();
                                break;
                            case 2:
                                reader.readMessage(message.written, () => message.written = StreamWriteMessage.WriteResponse.WriteAck.Written.deserialize(reader));
                                break;
                            case 3:
                                reader.readMessage(message.skipped, () => message.skipped = StreamWriteMessage.WriteResponse.WriteAck.Skipped.deserialize(reader));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): WriteAck {
                    return WriteAck.deserialize(bytes);
                }
            }
            export namespace WriteAck {
                export class Written extends pb_1.Message {
                    #one_of_decls: number[][] = [];
                    constructor(data?: any[] | {
                        offset?: number;
                    }) {
                        super();
                        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                        if (!Array.isArray(data) && typeof data == "object") {
                            if ("offset" in data && data.offset != undefined) {
                                this.offset = data.offset;
                            }
                        }
                    }
                    get offset() {
                        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                    }
                    set offset(value: number) {
                        pb_1.Message.setField(this, 1, value);
                    }
                    static fromObject(data: {
                        offset?: number;
                    }): Written {
                        const message = new Written({});
                        if (data.offset != null) {
                            message.offset = data.offset;
                        }
                        return message;
                    }
                    toObject() {
                        const data: {
                            offset?: number;
                        } = {};
                        if (this.offset != null) {
                            data.offset = this.offset;
                        }
                        return data;
                    }
                    serialize(): Uint8Array;
                    serialize(w: pb_1.BinaryWriter): void;
                    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                        const writer = w || new pb_1.BinaryWriter();
                        if (this.offset != 0)
                            writer.writeInt64(1, this.offset);
                        if (!w)
                            return writer.getResultBuffer();
                    }
                    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Written {
                        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Written();
                        while (reader.nextField()) {
                            if (reader.isEndGroup())
                                break;
                            switch (reader.getFieldNumber()) {
                                case 1:
                                    message.offset = reader.readInt64();
                                    break;
                                default: reader.skipField();
                            }
                        }
                        return message;
                    }
                    serializeBinary(): Uint8Array {
                        return this.serialize();
                    }
                    static deserializeBinary(bytes: Uint8Array): Written {
                        return Written.deserialize(bytes);
                    }
                }
                export class Skipped extends pb_1.Message {
                    #one_of_decls: number[][] = [];
                    constructor(data?: any[] | {
                        reason?: StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason;
                    }) {
                        super();
                        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                        if (!Array.isArray(data) && typeof data == "object") {
                            if ("reason" in data && data.reason != undefined) {
                                this.reason = data.reason;
                            }
                        }
                    }
                    get reason() {
                        return pb_1.Message.getFieldWithDefault(this, 1, StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason.REASON_UNSPECIFIED) as StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason;
                    }
                    set reason(value: StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason) {
                        pb_1.Message.setField(this, 1, value);
                    }
                    static fromObject(data: {
                        reason?: StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason;
                    }): Skipped {
                        const message = new Skipped({});
                        if (data.reason != null) {
                            message.reason = data.reason;
                        }
                        return message;
                    }
                    toObject() {
                        const data: {
                            reason?: StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason;
                        } = {};
                        if (this.reason != null) {
                            data.reason = this.reason;
                        }
                        return data;
                    }
                    serialize(): Uint8Array;
                    serialize(w: pb_1.BinaryWriter): void;
                    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                        const writer = w || new pb_1.BinaryWriter();
                        if (this.reason != StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason.REASON_UNSPECIFIED)
                            writer.writeEnum(1, this.reason);
                        if (!w)
                            return writer.getResultBuffer();
                    }
                    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Skipped {
                        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Skipped();
                        while (reader.nextField()) {
                            if (reader.isEndGroup())
                                break;
                            switch (reader.getFieldNumber()) {
                                case 1:
                                    message.reason = reader.readEnum();
                                    break;
                                default: reader.skipField();
                            }
                        }
                        return message;
                    }
                    serializeBinary(): Uint8Array {
                        return this.serialize();
                    }
                    static deserializeBinary(bytes: Uint8Array): Skipped {
                        return Skipped.deserialize(bytes);
                    }
                }
                export namespace Skipped {
                    export enum Reason {
                        REASON_UNSPECIFIED = 0,
                        REASON_ALREADY_WRITTEN = 1
                    }
                }
            }
            export class WriteStatistics extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    persisting_time?: dependency_7.google.protobuf.Duration;
                    min_queue_wait_time?: dependency_7.google.protobuf.Duration;
                    max_queue_wait_time?: dependency_7.google.protobuf.Duration;
                    partition_quota_wait_time?: dependency_7.google.protobuf.Duration;
                    topic_quota_wait_time?: dependency_7.google.protobuf.Duration;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("persisting_time" in data && data.persisting_time != undefined) {
                            this.persisting_time = data.persisting_time;
                        }
                        if ("min_queue_wait_time" in data && data.min_queue_wait_time != undefined) {
                            this.min_queue_wait_time = data.min_queue_wait_time;
                        }
                        if ("max_queue_wait_time" in data && data.max_queue_wait_time != undefined) {
                            this.max_queue_wait_time = data.max_queue_wait_time;
                        }
                        if ("partition_quota_wait_time" in data && data.partition_quota_wait_time != undefined) {
                            this.partition_quota_wait_time = data.partition_quota_wait_time;
                        }
                        if ("topic_quota_wait_time" in data && data.topic_quota_wait_time != undefined) {
                            this.topic_quota_wait_time = data.topic_quota_wait_time;
                        }
                    }
                }
                get persisting_time() {
                    return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 1) as dependency_7.google.protobuf.Duration;
                }
                set persisting_time(value: dependency_7.google.protobuf.Duration) {
                    pb_1.Message.setWrapperField(this, 1, value);
                }
                get has_persisting_time() {
                    return pb_1.Message.getField(this, 1) != null;
                }
                get min_queue_wait_time() {
                    return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 2) as dependency_7.google.protobuf.Duration;
                }
                set min_queue_wait_time(value: dependency_7.google.protobuf.Duration) {
                    pb_1.Message.setWrapperField(this, 2, value);
                }
                get has_min_queue_wait_time() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get max_queue_wait_time() {
                    return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 3) as dependency_7.google.protobuf.Duration;
                }
                set max_queue_wait_time(value: dependency_7.google.protobuf.Duration) {
                    pb_1.Message.setWrapperField(this, 3, value);
                }
                get has_max_queue_wait_time() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get partition_quota_wait_time() {
                    return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 4) as dependency_7.google.protobuf.Duration;
                }
                set partition_quota_wait_time(value: dependency_7.google.protobuf.Duration) {
                    pb_1.Message.setWrapperField(this, 4, value);
                }
                get has_partition_quota_wait_time() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                get topic_quota_wait_time() {
                    return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 5) as dependency_7.google.protobuf.Duration;
                }
                set topic_quota_wait_time(value: dependency_7.google.protobuf.Duration) {
                    pb_1.Message.setWrapperField(this, 5, value);
                }
                get has_topic_quota_wait_time() {
                    return pb_1.Message.getField(this, 5) != null;
                }
                static fromObject(data: {
                    persisting_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    min_queue_wait_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    max_queue_wait_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    partition_quota_wait_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    topic_quota_wait_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                }): WriteStatistics {
                    const message = new WriteStatistics({});
                    if (data.persisting_time != null) {
                        message.persisting_time = dependency_7.google.protobuf.Duration.fromObject(data.persisting_time);
                    }
                    if (data.min_queue_wait_time != null) {
                        message.min_queue_wait_time = dependency_7.google.protobuf.Duration.fromObject(data.min_queue_wait_time);
                    }
                    if (data.max_queue_wait_time != null) {
                        message.max_queue_wait_time = dependency_7.google.protobuf.Duration.fromObject(data.max_queue_wait_time);
                    }
                    if (data.partition_quota_wait_time != null) {
                        message.partition_quota_wait_time = dependency_7.google.protobuf.Duration.fromObject(data.partition_quota_wait_time);
                    }
                    if (data.topic_quota_wait_time != null) {
                        message.topic_quota_wait_time = dependency_7.google.protobuf.Duration.fromObject(data.topic_quota_wait_time);
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        persisting_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                        min_queue_wait_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                        max_queue_wait_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                        partition_quota_wait_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                        topic_quota_wait_time?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    } = {};
                    if (this.persisting_time != null) {
                        data.persisting_time = this.persisting_time.toObject();
                    }
                    if (this.min_queue_wait_time != null) {
                        data.min_queue_wait_time = this.min_queue_wait_time.toObject();
                    }
                    if (this.max_queue_wait_time != null) {
                        data.max_queue_wait_time = this.max_queue_wait_time.toObject();
                    }
                    if (this.partition_quota_wait_time != null) {
                        data.partition_quota_wait_time = this.partition_quota_wait_time.toObject();
                    }
                    if (this.topic_quota_wait_time != null) {
                        data.topic_quota_wait_time = this.topic_quota_wait_time.toObject();
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_persisting_time)
                        writer.writeMessage(1, this.persisting_time, () => this.persisting_time.serialize(writer));
                    if (this.has_min_queue_wait_time)
                        writer.writeMessage(2, this.min_queue_wait_time, () => this.min_queue_wait_time.serialize(writer));
                    if (this.has_max_queue_wait_time)
                        writer.writeMessage(3, this.max_queue_wait_time, () => this.max_queue_wait_time.serialize(writer));
                    if (this.has_partition_quota_wait_time)
                        writer.writeMessage(4, this.partition_quota_wait_time, () => this.partition_quota_wait_time.serialize(writer));
                    if (this.has_topic_quota_wait_time)
                        writer.writeMessage(5, this.topic_quota_wait_time, () => this.topic_quota_wait_time.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteStatistics {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteStatistics();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                reader.readMessage(message.persisting_time, () => message.persisting_time = dependency_7.google.protobuf.Duration.deserialize(reader));
                                break;
                            case 2:
                                reader.readMessage(message.min_queue_wait_time, () => message.min_queue_wait_time = dependency_7.google.protobuf.Duration.deserialize(reader));
                                break;
                            case 3:
                                reader.readMessage(message.max_queue_wait_time, () => message.max_queue_wait_time = dependency_7.google.protobuf.Duration.deserialize(reader));
                                break;
                            case 4:
                                reader.readMessage(message.partition_quota_wait_time, () => message.partition_quota_wait_time = dependency_7.google.protobuf.Duration.deserialize(reader));
                                break;
                            case 5:
                                reader.readMessage(message.topic_quota_wait_time, () => message.topic_quota_wait_time = dependency_7.google.protobuf.Duration.deserialize(reader));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): WriteStatistics {
                    return WriteStatistics.deserialize(bytes);
                }
            }
        }
    }
    export class StreamReadMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StreamReadMessage {
            const message = new StreamReadMessage({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamReadMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamReadMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamReadMessage {
            return StreamReadMessage.deserialize(bytes);
        }
    }
    export namespace StreamReadMessage {
        export class PartitionSession extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_session_id?: number;
                path?: string;
                partition_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_session_id" in data && data.partition_session_id != undefined) {
                        this.partition_session_id = data.partition_session_id;
                    }
                    if ("path" in data && data.path != undefined) {
                        this.path = data.path;
                    }
                    if ("partition_id" in data && data.partition_id != undefined) {
                        this.partition_id = data.partition_id;
                    }
                }
            }
            get partition_session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set partition_session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get path() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set path(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get partition_id() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set partition_id(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                partition_session_id?: number;
                path?: string;
                partition_id?: number;
            }): PartitionSession {
                const message = new PartitionSession({});
                if (data.partition_session_id != null) {
                    message.partition_session_id = data.partition_session_id;
                }
                if (data.path != null) {
                    message.path = data.path;
                }
                if (data.partition_id != null) {
                    message.partition_id = data.partition_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_session_id?: number;
                    path?: string;
                    partition_id?: number;
                } = {};
                if (this.partition_session_id != null) {
                    data.partition_session_id = this.partition_session_id;
                }
                if (this.path != null) {
                    data.path = this.path;
                }
                if (this.partition_id != null) {
                    data.partition_id = this.partition_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_session_id != 0)
                    writer.writeInt64(1, this.partition_session_id);
                if (this.path.length)
                    writer.writeString(2, this.path);
                if (this.partition_id != 0)
                    writer.writeInt64(3, this.partition_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionSession {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionSession();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.partition_session_id = reader.readInt64();
                            break;
                        case 2:
                            message.path = reader.readString();
                            break;
                        case 3:
                            message.partition_id = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PartitionSession {
                return PartitionSession.deserialize(bytes);
            }
        }
        export class FromClient extends pb_1.Message {
            #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7]];
            constructor(data?: any[] | ({} & (({
                init_request?: StreamReadMessage.InitRequest;
                read_request?: never;
                commit_offset_request?: never;
                partition_session_status_request?: never;
                update_token_request?: never;
                start_partition_session_response?: never;
                stop_partition_session_response?: never;
            } | {
                init_request?: never;
                read_request?: StreamReadMessage.ReadRequest;
                commit_offset_request?: never;
                partition_session_status_request?: never;
                update_token_request?: never;
                start_partition_session_response?: never;
                stop_partition_session_response?: never;
            } | {
                init_request?: never;
                read_request?: never;
                commit_offset_request?: StreamReadMessage.CommitOffsetRequest;
                partition_session_status_request?: never;
                update_token_request?: never;
                start_partition_session_response?: never;
                stop_partition_session_response?: never;
            } | {
                init_request?: never;
                read_request?: never;
                commit_offset_request?: never;
                partition_session_status_request?: StreamReadMessage.PartitionSessionStatusRequest;
                update_token_request?: never;
                start_partition_session_response?: never;
                stop_partition_session_response?: never;
            } | {
                init_request?: never;
                read_request?: never;
                commit_offset_request?: never;
                partition_session_status_request?: never;
                update_token_request?: UpdateTokenRequest;
                start_partition_session_response?: never;
                stop_partition_session_response?: never;
            } | {
                init_request?: never;
                read_request?: never;
                commit_offset_request?: never;
                partition_session_status_request?: never;
                update_token_request?: never;
                start_partition_session_response?: StreamReadMessage.StartPartitionSessionResponse;
                stop_partition_session_response?: never;
            } | {
                init_request?: never;
                read_request?: never;
                commit_offset_request?: never;
                partition_session_status_request?: never;
                update_token_request?: never;
                start_partition_session_response?: never;
                stop_partition_session_response?: StreamReadMessage.StopPartitionSessionResponse;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("init_request" in data && data.init_request != undefined) {
                        this.init_request = data.init_request;
                    }
                    if ("read_request" in data && data.read_request != undefined) {
                        this.read_request = data.read_request;
                    }
                    if ("commit_offset_request" in data && data.commit_offset_request != undefined) {
                        this.commit_offset_request = data.commit_offset_request;
                    }
                    if ("partition_session_status_request" in data && data.partition_session_status_request != undefined) {
                        this.partition_session_status_request = data.partition_session_status_request;
                    }
                    if ("update_token_request" in data && data.update_token_request != undefined) {
                        this.update_token_request = data.update_token_request;
                    }
                    if ("start_partition_session_response" in data && data.start_partition_session_response != undefined) {
                        this.start_partition_session_response = data.start_partition_session_response;
                    }
                    if ("stop_partition_session_response" in data && data.stop_partition_session_response != undefined) {
                        this.stop_partition_session_response = data.stop_partition_session_response;
                    }
                }
            }
            get init_request() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.InitRequest, 1) as StreamReadMessage.InitRequest;
            }
            set init_request(value: StreamReadMessage.InitRequest) {
                pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_init_request() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get read_request() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.ReadRequest, 2) as StreamReadMessage.ReadRequest;
            }
            set read_request(value: StreamReadMessage.ReadRequest) {
                pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
            }
            get has_read_request() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get commit_offset_request() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.CommitOffsetRequest, 3) as StreamReadMessage.CommitOffsetRequest;
            }
            set commit_offset_request(value: StreamReadMessage.CommitOffsetRequest) {
                pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_commit_offset_request() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get partition_session_status_request() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.PartitionSessionStatusRequest, 4) as StreamReadMessage.PartitionSessionStatusRequest;
            }
            set partition_session_status_request(value: StreamReadMessage.PartitionSessionStatusRequest) {
                pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
            }
            get has_partition_session_status_request() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get update_token_request() {
                return pb_1.Message.getWrapperField(this, UpdateTokenRequest, 5) as UpdateTokenRequest;
            }
            set update_token_request(value: UpdateTokenRequest) {
                pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
            }
            get has_update_token_request() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get start_partition_session_response() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.StartPartitionSessionResponse, 6) as StreamReadMessage.StartPartitionSessionResponse;
            }
            set start_partition_session_response(value: StreamReadMessage.StartPartitionSessionResponse) {
                pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
            }
            get has_start_partition_session_response() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get stop_partition_session_response() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.StopPartitionSessionResponse, 7) as StreamReadMessage.StopPartitionSessionResponse;
            }
            set stop_partition_session_response(value: StreamReadMessage.StopPartitionSessionResponse) {
                pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
            }
            get has_stop_partition_session_response() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get client_message() {
                const cases: {
                    [index: number]: "none" | "init_request" | "read_request" | "commit_offset_request" | "partition_session_status_request" | "update_token_request" | "start_partition_session_response" | "stop_partition_session_response";
                } = {
                    0: "none",
                    1: "init_request",
                    2: "read_request",
                    3: "commit_offset_request",
                    4: "partition_session_status_request",
                    5: "update_token_request",
                    6: "start_partition_session_response",
                    7: "stop_partition_session_response"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
            }
            static fromObject(data: {
                init_request?: ReturnType<typeof StreamReadMessage.InitRequest.prototype.toObject>;
                read_request?: ReturnType<typeof StreamReadMessage.ReadRequest.prototype.toObject>;
                commit_offset_request?: ReturnType<typeof StreamReadMessage.CommitOffsetRequest.prototype.toObject>;
                partition_session_status_request?: ReturnType<typeof StreamReadMessage.PartitionSessionStatusRequest.prototype.toObject>;
                update_token_request?: ReturnType<typeof UpdateTokenRequest.prototype.toObject>;
                start_partition_session_response?: ReturnType<typeof StreamReadMessage.StartPartitionSessionResponse.prototype.toObject>;
                stop_partition_session_response?: ReturnType<typeof StreamReadMessage.StopPartitionSessionResponse.prototype.toObject>;
            }): FromClient {
                const message = new FromClient({});
                if (data.init_request != null) {
                    message.init_request = StreamReadMessage.InitRequest.fromObject(data.init_request);
                }
                if (data.read_request != null) {
                    message.read_request = StreamReadMessage.ReadRequest.fromObject(data.read_request);
                }
                if (data.commit_offset_request != null) {
                    message.commit_offset_request = StreamReadMessage.CommitOffsetRequest.fromObject(data.commit_offset_request);
                }
                if (data.partition_session_status_request != null) {
                    message.partition_session_status_request = StreamReadMessage.PartitionSessionStatusRequest.fromObject(data.partition_session_status_request);
                }
                if (data.update_token_request != null) {
                    message.update_token_request = UpdateTokenRequest.fromObject(data.update_token_request);
                }
                if (data.start_partition_session_response != null) {
                    message.start_partition_session_response = StreamReadMessage.StartPartitionSessionResponse.fromObject(data.start_partition_session_response);
                }
                if (data.stop_partition_session_response != null) {
                    message.stop_partition_session_response = StreamReadMessage.StopPartitionSessionResponse.fromObject(data.stop_partition_session_response);
                }
                return message;
            }
            toObject() {
                const data: {
                    init_request?: ReturnType<typeof StreamReadMessage.InitRequest.prototype.toObject>;
                    read_request?: ReturnType<typeof StreamReadMessage.ReadRequest.prototype.toObject>;
                    commit_offset_request?: ReturnType<typeof StreamReadMessage.CommitOffsetRequest.prototype.toObject>;
                    partition_session_status_request?: ReturnType<typeof StreamReadMessage.PartitionSessionStatusRequest.prototype.toObject>;
                    update_token_request?: ReturnType<typeof UpdateTokenRequest.prototype.toObject>;
                    start_partition_session_response?: ReturnType<typeof StreamReadMessage.StartPartitionSessionResponse.prototype.toObject>;
                    stop_partition_session_response?: ReturnType<typeof StreamReadMessage.StopPartitionSessionResponse.prototype.toObject>;
                } = {};
                if (this.init_request != null) {
                    data.init_request = this.init_request.toObject();
                }
                if (this.read_request != null) {
                    data.read_request = this.read_request.toObject();
                }
                if (this.commit_offset_request != null) {
                    data.commit_offset_request = this.commit_offset_request.toObject();
                }
                if (this.partition_session_status_request != null) {
                    data.partition_session_status_request = this.partition_session_status_request.toObject();
                }
                if (this.update_token_request != null) {
                    data.update_token_request = this.update_token_request.toObject();
                }
                if (this.start_partition_session_response != null) {
                    data.start_partition_session_response = this.start_partition_session_response.toObject();
                }
                if (this.stop_partition_session_response != null) {
                    data.stop_partition_session_response = this.stop_partition_session_response.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_init_request)
                    writer.writeMessage(1, this.init_request, () => this.init_request.serialize(writer));
                if (this.has_read_request)
                    writer.writeMessage(2, this.read_request, () => this.read_request.serialize(writer));
                if (this.has_commit_offset_request)
                    writer.writeMessage(3, this.commit_offset_request, () => this.commit_offset_request.serialize(writer));
                if (this.has_partition_session_status_request)
                    writer.writeMessage(4, this.partition_session_status_request, () => this.partition_session_status_request.serialize(writer));
                if (this.has_update_token_request)
                    writer.writeMessage(5, this.update_token_request, () => this.update_token_request.serialize(writer));
                if (this.has_start_partition_session_response)
                    writer.writeMessage(6, this.start_partition_session_response, () => this.start_partition_session_response.serialize(writer));
                if (this.has_stop_partition_session_response)
                    writer.writeMessage(7, this.stop_partition_session_response, () => this.stop_partition_session_response.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FromClient {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FromClient();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.init_request, () => message.init_request = StreamReadMessage.InitRequest.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.read_request, () => message.read_request = StreamReadMessage.ReadRequest.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.commit_offset_request, () => message.commit_offset_request = StreamReadMessage.CommitOffsetRequest.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.partition_session_status_request, () => message.partition_session_status_request = StreamReadMessage.PartitionSessionStatusRequest.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.update_token_request, () => message.update_token_request = UpdateTokenRequest.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.start_partition_session_response, () => message.start_partition_session_response = StreamReadMessage.StartPartitionSessionResponse.deserialize(reader));
                            break;
                        case 7:
                            reader.readMessage(message.stop_partition_session_response, () => message.stop_partition_session_response = StreamReadMessage.StopPartitionSessionResponse.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FromClient {
                return FromClient.deserialize(bytes);
            }
        }
        export class FromServer extends pb_1.Message {
            #one_of_decls: number[][] = [[3, 4, 5, 6, 7, 8, 9]];
            constructor(data?: any[] | ({
                status?: dependency_3.Ydb.StatusIds.StatusCode;
                issues?: dependency_4.Ydb.Issue.IssueMessage[];
            } & (({
                init_response?: StreamReadMessage.InitResponse;
                read_response?: never;
                commit_offset_response?: never;
                partition_session_status_response?: never;
                update_token_response?: never;
                start_partition_session_request?: never;
                stop_partition_session_request?: never;
            } | {
                init_response?: never;
                read_response?: StreamReadMessage.ReadResponse;
                commit_offset_response?: never;
                partition_session_status_response?: never;
                update_token_response?: never;
                start_partition_session_request?: never;
                stop_partition_session_request?: never;
            } | {
                init_response?: never;
                read_response?: never;
                commit_offset_response?: StreamReadMessage.CommitOffsetResponse;
                partition_session_status_response?: never;
                update_token_response?: never;
                start_partition_session_request?: never;
                stop_partition_session_request?: never;
            } | {
                init_response?: never;
                read_response?: never;
                commit_offset_response?: never;
                partition_session_status_response?: StreamReadMessage.PartitionSessionStatusResponse;
                update_token_response?: never;
                start_partition_session_request?: never;
                stop_partition_session_request?: never;
            } | {
                init_response?: never;
                read_response?: never;
                commit_offset_response?: never;
                partition_session_status_response?: never;
                update_token_response?: UpdateTokenResponse;
                start_partition_session_request?: never;
                stop_partition_session_request?: never;
            } | {
                init_response?: never;
                read_response?: never;
                commit_offset_response?: never;
                partition_session_status_response?: never;
                update_token_response?: never;
                start_partition_session_request?: StreamReadMessage.StartPartitionSessionRequest;
                stop_partition_session_request?: never;
            } | {
                init_response?: never;
                read_response?: never;
                commit_offset_response?: never;
                partition_session_status_response?: never;
                update_token_response?: never;
                start_partition_session_request?: never;
                stop_partition_session_request?: StreamReadMessage.StopPartitionSessionRequest;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                    if ("init_response" in data && data.init_response != undefined) {
                        this.init_response = data.init_response;
                    }
                    if ("read_response" in data && data.read_response != undefined) {
                        this.read_response = data.read_response;
                    }
                    if ("commit_offset_response" in data && data.commit_offset_response != undefined) {
                        this.commit_offset_response = data.commit_offset_response;
                    }
                    if ("partition_session_status_response" in data && data.partition_session_status_response != undefined) {
                        this.partition_session_status_response = data.partition_session_status_response;
                    }
                    if ("update_token_response" in data && data.update_token_response != undefined) {
                        this.update_token_response = data.update_token_response;
                    }
                    if ("start_partition_session_request" in data && data.start_partition_session_request != undefined) {
                        this.start_partition_session_request = data.start_partition_session_request;
                    }
                    if ("stop_partition_session_request" in data && data.stop_partition_session_request != undefined) {
                        this.stop_partition_session_request = data.stop_partition_session_request;
                    }
                }
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 1, dependency_3.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_3.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_3.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 1, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_4.Ydb.Issue.IssueMessage, 2) as dependency_4.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_4.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get init_response() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.InitResponse, 3) as StreamReadMessage.InitResponse;
            }
            set init_response(value: StreamReadMessage.InitResponse) {
                pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_init_response() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get read_response() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.ReadResponse, 4) as StreamReadMessage.ReadResponse;
            }
            set read_response(value: StreamReadMessage.ReadResponse) {
                pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
            }
            get has_read_response() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get commit_offset_response() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.CommitOffsetResponse, 5) as StreamReadMessage.CommitOffsetResponse;
            }
            set commit_offset_response(value: StreamReadMessage.CommitOffsetResponse) {
                pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
            }
            get has_commit_offset_response() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get partition_session_status_response() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.PartitionSessionStatusResponse, 6) as StreamReadMessage.PartitionSessionStatusResponse;
            }
            set partition_session_status_response(value: StreamReadMessage.PartitionSessionStatusResponse) {
                pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
            }
            get has_partition_session_status_response() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get update_token_response() {
                return pb_1.Message.getWrapperField(this, UpdateTokenResponse, 7) as UpdateTokenResponse;
            }
            set update_token_response(value: UpdateTokenResponse) {
                pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
            }
            get has_update_token_response() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get start_partition_session_request() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.StartPartitionSessionRequest, 8) as StreamReadMessage.StartPartitionSessionRequest;
            }
            set start_partition_session_request(value: StreamReadMessage.StartPartitionSessionRequest) {
                pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
            }
            get has_start_partition_session_request() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get stop_partition_session_request() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.StopPartitionSessionRequest, 9) as StreamReadMessage.StopPartitionSessionRequest;
            }
            set stop_partition_session_request(value: StreamReadMessage.StopPartitionSessionRequest) {
                pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
            }
            get has_stop_partition_session_request() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get server_message() {
                const cases: {
                    [index: number]: "none" | "init_response" | "read_response" | "commit_offset_response" | "partition_session_status_response" | "update_token_response" | "start_partition_session_request" | "stop_partition_session_request";
                } = {
                    0: "none",
                    3: "init_response",
                    4: "read_response",
                    5: "commit_offset_response",
                    6: "partition_session_status_response",
                    7: "update_token_response",
                    8: "start_partition_session_request",
                    9: "stop_partition_session_request"
                };
                return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7, 8, 9])];
            }
            static fromObject(data: {
                status?: dependency_3.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_4.Ydb.Issue.IssueMessage.prototype.toObject>[];
                init_response?: ReturnType<typeof StreamReadMessage.InitResponse.prototype.toObject>;
                read_response?: ReturnType<typeof StreamReadMessage.ReadResponse.prototype.toObject>;
                commit_offset_response?: ReturnType<typeof StreamReadMessage.CommitOffsetResponse.prototype.toObject>;
                partition_session_status_response?: ReturnType<typeof StreamReadMessage.PartitionSessionStatusResponse.prototype.toObject>;
                update_token_response?: ReturnType<typeof UpdateTokenResponse.prototype.toObject>;
                start_partition_session_request?: ReturnType<typeof StreamReadMessage.StartPartitionSessionRequest.prototype.toObject>;
                stop_partition_session_request?: ReturnType<typeof StreamReadMessage.StopPartitionSessionRequest.prototype.toObject>;
            }): FromServer {
                const message = new FromServer({});
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_4.Ydb.Issue.IssueMessage.fromObject(item));
                }
                if (data.init_response != null) {
                    message.init_response = StreamReadMessage.InitResponse.fromObject(data.init_response);
                }
                if (data.read_response != null) {
                    message.read_response = StreamReadMessage.ReadResponse.fromObject(data.read_response);
                }
                if (data.commit_offset_response != null) {
                    message.commit_offset_response = StreamReadMessage.CommitOffsetResponse.fromObject(data.commit_offset_response);
                }
                if (data.partition_session_status_response != null) {
                    message.partition_session_status_response = StreamReadMessage.PartitionSessionStatusResponse.fromObject(data.partition_session_status_response);
                }
                if (data.update_token_response != null) {
                    message.update_token_response = UpdateTokenResponse.fromObject(data.update_token_response);
                }
                if (data.start_partition_session_request != null) {
                    message.start_partition_session_request = StreamReadMessage.StartPartitionSessionRequest.fromObject(data.start_partition_session_request);
                }
                if (data.stop_partition_session_request != null) {
                    message.stop_partition_session_request = StreamReadMessage.StopPartitionSessionRequest.fromObject(data.stop_partition_session_request);
                }
                return message;
            }
            toObject() {
                const data: {
                    status?: dependency_3.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_4.Ydb.Issue.IssueMessage.prototype.toObject>[];
                    init_response?: ReturnType<typeof StreamReadMessage.InitResponse.prototype.toObject>;
                    read_response?: ReturnType<typeof StreamReadMessage.ReadResponse.prototype.toObject>;
                    commit_offset_response?: ReturnType<typeof StreamReadMessage.CommitOffsetResponse.prototype.toObject>;
                    partition_session_status_response?: ReturnType<typeof StreamReadMessage.PartitionSessionStatusResponse.prototype.toObject>;
                    update_token_response?: ReturnType<typeof UpdateTokenResponse.prototype.toObject>;
                    start_partition_session_request?: ReturnType<typeof StreamReadMessage.StartPartitionSessionRequest.prototype.toObject>;
                    stop_partition_session_request?: ReturnType<typeof StreamReadMessage.StopPartitionSessionRequest.prototype.toObject>;
                } = {};
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_4.Ydb.Issue.IssueMessage) => item.toObject());
                }
                if (this.init_response != null) {
                    data.init_response = this.init_response.toObject();
                }
                if (this.read_response != null) {
                    data.read_response = this.read_response.toObject();
                }
                if (this.commit_offset_response != null) {
                    data.commit_offset_response = this.commit_offset_response.toObject();
                }
                if (this.partition_session_status_response != null) {
                    data.partition_session_status_response = this.partition_session_status_response.toObject();
                }
                if (this.update_token_response != null) {
                    data.update_token_response = this.update_token_response.toObject();
                }
                if (this.start_partition_session_request != null) {
                    data.start_partition_session_request = this.start_partition_session_request.toObject();
                }
                if (this.stop_partition_session_request != null) {
                    data.stop_partition_session_request = this.stop_partition_session_request.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.status != dependency_3.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(1, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(2, this.issues, (item: dependency_4.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (this.has_init_response)
                    writer.writeMessage(3, this.init_response, () => this.init_response.serialize(writer));
                if (this.has_read_response)
                    writer.writeMessage(4, this.read_response, () => this.read_response.serialize(writer));
                if (this.has_commit_offset_response)
                    writer.writeMessage(5, this.commit_offset_response, () => this.commit_offset_response.serialize(writer));
                if (this.has_partition_session_status_response)
                    writer.writeMessage(6, this.partition_session_status_response, () => this.partition_session_status_response.serialize(writer));
                if (this.has_update_token_response)
                    writer.writeMessage(7, this.update_token_response, () => this.update_token_response.serialize(writer));
                if (this.has_start_partition_session_request)
                    writer.writeMessage(8, this.start_partition_session_request, () => this.start_partition_session_request.serialize(writer));
                if (this.has_stop_partition_session_request)
                    writer.writeMessage(9, this.stop_partition_session_request, () => this.stop_partition_session_request.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FromServer {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FromServer();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.status = reader.readEnum();
                            break;
                        case 2:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.Ydb.Issue.IssueMessage.deserialize(reader), dependency_4.Ydb.Issue.IssueMessage));
                            break;
                        case 3:
                            reader.readMessage(message.init_response, () => message.init_response = StreamReadMessage.InitResponse.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.read_response, () => message.read_response = StreamReadMessage.ReadResponse.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.commit_offset_response, () => message.commit_offset_response = StreamReadMessage.CommitOffsetResponse.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.partition_session_status_response, () => message.partition_session_status_response = StreamReadMessage.PartitionSessionStatusResponse.deserialize(reader));
                            break;
                        case 7:
                            reader.readMessage(message.update_token_response, () => message.update_token_response = UpdateTokenResponse.deserialize(reader));
                            break;
                        case 8:
                            reader.readMessage(message.start_partition_session_request, () => message.start_partition_session_request = StreamReadMessage.StartPartitionSessionRequest.deserialize(reader));
                            break;
                        case 9:
                            reader.readMessage(message.stop_partition_session_request, () => message.stop_partition_session_request = StreamReadMessage.StopPartitionSessionRequest.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FromServer {
                return FromServer.deserialize(bytes);
            }
        }
        export class InitRequest extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                topics_read_settings?: StreamReadMessage.InitRequest.TopicReadSettings[];
                consumer?: string;
                reader_name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("topics_read_settings" in data && data.topics_read_settings != undefined) {
                        this.topics_read_settings = data.topics_read_settings;
                    }
                    if ("consumer" in data && data.consumer != undefined) {
                        this.consumer = data.consumer;
                    }
                    if ("reader_name" in data && data.reader_name != undefined) {
                        this.reader_name = data.reader_name;
                    }
                }
            }
            get topics_read_settings() {
                return pb_1.Message.getRepeatedWrapperField(this, StreamReadMessage.InitRequest.TopicReadSettings, 1) as StreamReadMessage.InitRequest.TopicReadSettings[];
            }
            set topics_read_settings(value: StreamReadMessage.InitRequest.TopicReadSettings[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get consumer() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set consumer(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get reader_name() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set reader_name(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                topics_read_settings?: ReturnType<typeof StreamReadMessage.InitRequest.TopicReadSettings.prototype.toObject>[];
                consumer?: string;
                reader_name?: string;
            }): InitRequest {
                const message = new InitRequest({});
                if (data.topics_read_settings != null) {
                    message.topics_read_settings = data.topics_read_settings.map(item => StreamReadMessage.InitRequest.TopicReadSettings.fromObject(item));
                }
                if (data.consumer != null) {
                    message.consumer = data.consumer;
                }
                if (data.reader_name != null) {
                    message.reader_name = data.reader_name;
                }
                return message;
            }
            toObject() {
                const data: {
                    topics_read_settings?: ReturnType<typeof StreamReadMessage.InitRequest.TopicReadSettings.prototype.toObject>[];
                    consumer?: string;
                    reader_name?: string;
                } = {};
                if (this.topics_read_settings != null) {
                    data.topics_read_settings = this.topics_read_settings.map((item: StreamReadMessage.InitRequest.TopicReadSettings) => item.toObject());
                }
                if (this.consumer != null) {
                    data.consumer = this.consumer;
                }
                if (this.reader_name != null) {
                    data.reader_name = this.reader_name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.topics_read_settings.length)
                    writer.writeRepeatedMessage(1, this.topics_read_settings, (item: StreamReadMessage.InitRequest.TopicReadSettings) => item.serialize(writer));
                if (this.consumer.length)
                    writer.writeString(2, this.consumer);
                if (this.reader_name.length)
                    writer.writeString(3, this.reader_name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitRequest {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.topics_read_settings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamReadMessage.InitRequest.TopicReadSettings.deserialize(reader), StreamReadMessage.InitRequest.TopicReadSettings));
                            break;
                        case 2:
                            message.consumer = reader.readString();
                            break;
                        case 3:
                            message.reader_name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): InitRequest {
                return InitRequest.deserialize(bytes);
            }
        }
        export namespace InitRequest {
            export class TopicReadSettings extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    path?: string;
                    partition_ids?: number[];
                    max_lag?: dependency_7.google.protobuf.Duration;
                    read_from?: dependency_8.google.protobuf.Timestamp;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("path" in data && data.path != undefined) {
                            this.path = data.path;
                        }
                        if ("partition_ids" in data && data.partition_ids != undefined) {
                            this.partition_ids = data.partition_ids;
                        }
                        if ("max_lag" in data && data.max_lag != undefined) {
                            this.max_lag = data.max_lag;
                        }
                        if ("read_from" in data && data.read_from != undefined) {
                            this.read_from = data.read_from;
                        }
                    }
                }
                get path() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set path(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get partition_ids() {
                    return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
                }
                set partition_ids(value: number[]) {
                    pb_1.Message.setField(this, 2, value);
                }
                get max_lag() {
                    return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 3) as dependency_7.google.protobuf.Duration;
                }
                set max_lag(value: dependency_7.google.protobuf.Duration) {
                    pb_1.Message.setWrapperField(this, 3, value);
                }
                get has_max_lag() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get read_from() {
                    return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 4) as dependency_8.google.protobuf.Timestamp;
                }
                set read_from(value: dependency_8.google.protobuf.Timestamp) {
                    pb_1.Message.setWrapperField(this, 4, value);
                }
                get has_read_from() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                static fromObject(data: {
                    path?: string;
                    partition_ids?: number[];
                    max_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    read_from?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                }): TopicReadSettings {
                    const message = new TopicReadSettings({});
                    if (data.path != null) {
                        message.path = data.path;
                    }
                    if (data.partition_ids != null) {
                        message.partition_ids = data.partition_ids;
                    }
                    if (data.max_lag != null) {
                        message.max_lag = dependency_7.google.protobuf.Duration.fromObject(data.max_lag);
                    }
                    if (data.read_from != null) {
                        message.read_from = dependency_8.google.protobuf.Timestamp.fromObject(data.read_from);
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        path?: string;
                        partition_ids?: number[];
                        max_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                        read_from?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                    } = {};
                    if (this.path != null) {
                        data.path = this.path;
                    }
                    if (this.partition_ids != null) {
                        data.partition_ids = this.partition_ids;
                    }
                    if (this.max_lag != null) {
                        data.max_lag = this.max_lag.toObject();
                    }
                    if (this.read_from != null) {
                        data.read_from = this.read_from.toObject();
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.path.length)
                        writer.writeString(1, this.path);
                    if (this.partition_ids.length)
                        writer.writePackedInt64(2, this.partition_ids);
                    if (this.has_max_lag)
                        writer.writeMessage(3, this.max_lag, () => this.max_lag.serialize(writer));
                    if (this.has_read_from)
                        writer.writeMessage(4, this.read_from, () => this.read_from.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TopicReadSettings {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TopicReadSettings();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.path = reader.readString();
                                break;
                            case 2:
                                message.partition_ids = reader.readPackedInt64();
                                break;
                            case 3:
                                reader.readMessage(message.max_lag, () => message.max_lag = dependency_7.google.protobuf.Duration.deserialize(reader));
                                break;
                            case 4:
                                reader.readMessage(message.read_from, () => message.read_from = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): TopicReadSettings {
                    return TopicReadSettings.deserialize(bytes);
                }
            }
        }
        export class InitResponse extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                session_id?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("session_id" in data && data.session_id != undefined) {
                        this.session_id = data.session_id;
                    }
                }
            }
            get session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set session_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                session_id?: string;
            }): InitResponse {
                const message = new InitResponse({});
                if (data.session_id != null) {
                    message.session_id = data.session_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    session_id?: string;
                } = {};
                if (this.session_id != null) {
                    data.session_id = this.session_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.session_id.length)
                    writer.writeString(1, this.session_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitResponse {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.session_id = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): InitResponse {
                return InitResponse.deserialize(bytes);
            }
        }
        export class ReadRequest extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                bytes_size?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("bytes_size" in data && data.bytes_size != undefined) {
                        this.bytes_size = data.bytes_size;
                    }
                }
            }
            get bytes_size() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set bytes_size(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                bytes_size?: number;
            }): ReadRequest {
                const message = new ReadRequest({});
                if (data.bytes_size != null) {
                    message.bytes_size = data.bytes_size;
                }
                return message;
            }
            toObject() {
                const data: {
                    bytes_size?: number;
                } = {};
                if (this.bytes_size != null) {
                    data.bytes_size = this.bytes_size;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.bytes_size != 0)
                    writer.writeInt64(1, this.bytes_size);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadRequest {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.bytes_size = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ReadRequest {
                return ReadRequest.deserialize(bytes);
            }
        }
        export class ReadResponse extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_data?: StreamReadMessage.ReadResponse.PartitionData[];
                bytes_size?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_data" in data && data.partition_data != undefined) {
                        this.partition_data = data.partition_data;
                    }
                    if ("bytes_size" in data && data.bytes_size != undefined) {
                        this.bytes_size = data.bytes_size;
                    }
                }
            }
            get partition_data() {
                return pb_1.Message.getRepeatedWrapperField(this, StreamReadMessage.ReadResponse.PartitionData, 1) as StreamReadMessage.ReadResponse.PartitionData[];
            }
            set partition_data(value: StreamReadMessage.ReadResponse.PartitionData[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get bytes_size() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set bytes_size(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                partition_data?: ReturnType<typeof StreamReadMessage.ReadResponse.PartitionData.prototype.toObject>[];
                bytes_size?: number;
            }): ReadResponse {
                const message = new ReadResponse({});
                if (data.partition_data != null) {
                    message.partition_data = data.partition_data.map(item => StreamReadMessage.ReadResponse.PartitionData.fromObject(item));
                }
                if (data.bytes_size != null) {
                    message.bytes_size = data.bytes_size;
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_data?: ReturnType<typeof StreamReadMessage.ReadResponse.PartitionData.prototype.toObject>[];
                    bytes_size?: number;
                } = {};
                if (this.partition_data != null) {
                    data.partition_data = this.partition_data.map((item: StreamReadMessage.ReadResponse.PartitionData) => item.toObject());
                }
                if (this.bytes_size != null) {
                    data.bytes_size = this.bytes_size;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_data.length)
                    writer.writeRepeatedMessage(1, this.partition_data, (item: StreamReadMessage.ReadResponse.PartitionData) => item.serialize(writer));
                if (this.bytes_size != 0)
                    writer.writeInt64(2, this.bytes_size);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadResponse {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.partition_data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamReadMessage.ReadResponse.PartitionData.deserialize(reader), StreamReadMessage.ReadResponse.PartitionData));
                            break;
                        case 2:
                            message.bytes_size = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ReadResponse {
                return ReadResponse.deserialize(bytes);
            }
        }
        export namespace ReadResponse {
            export class MessageData extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    offset?: number;
                    seq_no?: number;
                    created_at?: dependency_8.google.protobuf.Timestamp;
                    data?: Uint8Array;
                    uncompressed_size?: number;
                    message_group_id?: string;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("offset" in data && data.offset != undefined) {
                            this.offset = data.offset;
                        }
                        if ("seq_no" in data && data.seq_no != undefined) {
                            this.seq_no = data.seq_no;
                        }
                        if ("created_at" in data && data.created_at != undefined) {
                            this.created_at = data.created_at;
                        }
                        if ("data" in data && data.data != undefined) {
                            this.data = data.data;
                        }
                        if ("uncompressed_size" in data && data.uncompressed_size != undefined) {
                            this.uncompressed_size = data.uncompressed_size;
                        }
                        if ("message_group_id" in data && data.message_group_id != undefined) {
                            this.message_group_id = data.message_group_id;
                        }
                    }
                }
                get offset() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set offset(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get seq_no() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set seq_no(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get created_at() {
                    return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 3) as dependency_8.google.protobuf.Timestamp;
                }
                set created_at(value: dependency_8.google.protobuf.Timestamp) {
                    pb_1.Message.setWrapperField(this, 3, value);
                }
                get has_created_at() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get data() {
                    return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
                }
                set data(value: Uint8Array) {
                    pb_1.Message.setField(this, 5, value);
                }
                get uncompressed_size() {
                    return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
                }
                set uncompressed_size(value: number) {
                    pb_1.Message.setField(this, 6, value);
                }
                get message_group_id() {
                    return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
                }
                set message_group_id(value: string) {
                    pb_1.Message.setField(this, 7, value);
                }
                static fromObject(data: {
                    offset?: number;
                    seq_no?: number;
                    created_at?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                    data?: Uint8Array;
                    uncompressed_size?: number;
                    message_group_id?: string;
                }): MessageData {
                    const message = new MessageData({});
                    if (data.offset != null) {
                        message.offset = data.offset;
                    }
                    if (data.seq_no != null) {
                        message.seq_no = data.seq_no;
                    }
                    if (data.created_at != null) {
                        message.created_at = dependency_8.google.protobuf.Timestamp.fromObject(data.created_at);
                    }
                    if (data.data != null) {
                        message.data = data.data;
                    }
                    if (data.uncompressed_size != null) {
                        message.uncompressed_size = data.uncompressed_size;
                    }
                    if (data.message_group_id != null) {
                        message.message_group_id = data.message_group_id;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        offset?: number;
                        seq_no?: number;
                        created_at?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                        data?: Uint8Array;
                        uncompressed_size?: number;
                        message_group_id?: string;
                    } = {};
                    if (this.offset != null) {
                        data.offset = this.offset;
                    }
                    if (this.seq_no != null) {
                        data.seq_no = this.seq_no;
                    }
                    if (this.created_at != null) {
                        data.created_at = this.created_at.toObject();
                    }
                    if (this.data != null) {
                        data.data = this.data;
                    }
                    if (this.uncompressed_size != null) {
                        data.uncompressed_size = this.uncompressed_size;
                    }
                    if (this.message_group_id != null) {
                        data.message_group_id = this.message_group_id;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.offset != 0)
                        writer.writeInt64(1, this.offset);
                    if (this.seq_no != 0)
                        writer.writeInt64(2, this.seq_no);
                    if (this.has_created_at)
                        writer.writeMessage(3, this.created_at, () => this.created_at.serialize(writer));
                    if (this.data.length)
                        writer.writeBytes(5, this.data);
                    if (this.uncompressed_size != 0)
                        writer.writeInt64(6, this.uncompressed_size);
                    if (this.message_group_id.length)
                        writer.writeString(7, this.message_group_id);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageData {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageData();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.offset = reader.readInt64();
                                break;
                            case 2:
                                message.seq_no = reader.readInt64();
                                break;
                            case 3:
                                reader.readMessage(message.created_at, () => message.created_at = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                                break;
                            case 5:
                                message.data = reader.readBytes();
                                break;
                            case 6:
                                message.uncompressed_size = reader.readInt64();
                                break;
                            case 7:
                                message.message_group_id = reader.readString();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): MessageData {
                    return MessageData.deserialize(bytes);
                }
            }
            export class Batch extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    message_data?: StreamReadMessage.ReadResponse.MessageData[];
                    producer_id?: string;
                    write_session_meta?: Map<string, string>;
                    codec?: number;
                    written_at?: dependency_8.google.protobuf.Timestamp;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("message_data" in data && data.message_data != undefined) {
                            this.message_data = data.message_data;
                        }
                        if ("producer_id" in data && data.producer_id != undefined) {
                            this.producer_id = data.producer_id;
                        }
                        if ("write_session_meta" in data && data.write_session_meta != undefined) {
                            this.write_session_meta = data.write_session_meta;
                        }
                        if ("codec" in data && data.codec != undefined) {
                            this.codec = data.codec;
                        }
                        if ("written_at" in data && data.written_at != undefined) {
                            this.written_at = data.written_at;
                        }
                    }
                    if (!this.write_session_meta)
                        this.write_session_meta = new Map();
                }
                get message_data() {
                    return pb_1.Message.getRepeatedWrapperField(this, StreamReadMessage.ReadResponse.MessageData, 1) as StreamReadMessage.ReadResponse.MessageData[];
                }
                set message_data(value: StreamReadMessage.ReadResponse.MessageData[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 1, value);
                }
                get producer_id() {
                    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
                }
                set producer_id(value: string) {
                    pb_1.Message.setField(this, 2, value);
                }
                get write_session_meta() {
                    return pb_1.Message.getField(this, 3) as any as Map<string, string>;
                }
                set write_session_meta(value: Map<string, string>) {
                    pb_1.Message.setField(this, 3, value as any);
                }
                get codec() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set codec(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get written_at() {
                    return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 5) as dependency_8.google.protobuf.Timestamp;
                }
                set written_at(value: dependency_8.google.protobuf.Timestamp) {
                    pb_1.Message.setWrapperField(this, 5, value);
                }
                get has_written_at() {
                    return pb_1.Message.getField(this, 5) != null;
                }
                static fromObject(data: {
                    message_data?: ReturnType<typeof StreamReadMessage.ReadResponse.MessageData.prototype.toObject>[];
                    producer_id?: string;
                    write_session_meta?: {
                        [key: string]: string;
                    };
                    codec?: number;
                    written_at?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                }): Batch {
                    const message = new Batch({});
                    if (data.message_data != null) {
                        message.message_data = data.message_data.map(item => StreamReadMessage.ReadResponse.MessageData.fromObject(item));
                    }
                    if (data.producer_id != null) {
                        message.producer_id = data.producer_id;
                    }
                    if (typeof data.write_session_meta == "object") {
                        message.write_session_meta = new Map(Object.entries(data.write_session_meta));
                    }
                    if (data.codec != null) {
                        message.codec = data.codec;
                    }
                    if (data.written_at != null) {
                        message.written_at = dependency_8.google.protobuf.Timestamp.fromObject(data.written_at);
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        message_data?: ReturnType<typeof StreamReadMessage.ReadResponse.MessageData.prototype.toObject>[];
                        producer_id?: string;
                        write_session_meta?: {
                            [key: string]: string;
                        };
                        codec?: number;
                        written_at?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                    } = {};
                    if (this.message_data != null) {
                        data.message_data = this.message_data.map((item: StreamReadMessage.ReadResponse.MessageData) => item.toObject());
                    }
                    if (this.producer_id != null) {
                        data.producer_id = this.producer_id;
                    }
                    if (this.write_session_meta != null) {
                        data.write_session_meta = (Object.fromEntries)(this.write_session_meta);
                    }
                    if (this.codec != null) {
                        data.codec = this.codec;
                    }
                    if (this.written_at != null) {
                        data.written_at = this.written_at.toObject();
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.message_data.length)
                        writer.writeRepeatedMessage(1, this.message_data, (item: StreamReadMessage.ReadResponse.MessageData) => item.serialize(writer));
                    if (this.producer_id.length)
                        writer.writeString(2, this.producer_id);
                    for (const [key, value] of this.write_session_meta) {
                        writer.writeMessage(3, this.write_session_meta, () => {
                            writer.writeString(1, key);
                            writer.writeString(2, value);
                        });
                    }
                    if (this.codec != 0)
                        writer.writeInt32(4, this.codec);
                    if (this.has_written_at)
                        writer.writeMessage(5, this.written_at, () => this.written_at.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Batch {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Batch();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                reader.readMessage(message.message_data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamReadMessage.ReadResponse.MessageData.deserialize(reader), StreamReadMessage.ReadResponse.MessageData));
                                break;
                            case 2:
                                message.producer_id = reader.readString();
                                break;
                            case 3:
                                reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.write_session_meta as any, reader, reader.readString, reader.readString));
                                break;
                            case 4:
                                message.codec = reader.readInt32();
                                break;
                            case 5:
                                reader.readMessage(message.written_at, () => message.written_at = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Batch {
                    return Batch.deserialize(bytes);
                }
            }
            export class PartitionData extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    partition_session_id?: number;
                    batches?: StreamReadMessage.ReadResponse.Batch[];
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("partition_session_id" in data && data.partition_session_id != undefined) {
                            this.partition_session_id = data.partition_session_id;
                        }
                        if ("batches" in data && data.batches != undefined) {
                            this.batches = data.batches;
                        }
                    }
                }
                get partition_session_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set partition_session_id(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get batches() {
                    return pb_1.Message.getRepeatedWrapperField(this, StreamReadMessage.ReadResponse.Batch, 2) as StreamReadMessage.ReadResponse.Batch[];
                }
                set batches(value: StreamReadMessage.ReadResponse.Batch[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 2, value);
                }
                static fromObject(data: {
                    partition_session_id?: number;
                    batches?: ReturnType<typeof StreamReadMessage.ReadResponse.Batch.prototype.toObject>[];
                }): PartitionData {
                    const message = new PartitionData({});
                    if (data.partition_session_id != null) {
                        message.partition_session_id = data.partition_session_id;
                    }
                    if (data.batches != null) {
                        message.batches = data.batches.map(item => StreamReadMessage.ReadResponse.Batch.fromObject(item));
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        partition_session_id?: number;
                        batches?: ReturnType<typeof StreamReadMessage.ReadResponse.Batch.prototype.toObject>[];
                    } = {};
                    if (this.partition_session_id != null) {
                        data.partition_session_id = this.partition_session_id;
                    }
                    if (this.batches != null) {
                        data.batches = this.batches.map((item: StreamReadMessage.ReadResponse.Batch) => item.toObject());
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.partition_session_id != 0)
                        writer.writeInt64(1, this.partition_session_id);
                    if (this.batches.length)
                        writer.writeRepeatedMessage(2, this.batches, (item: StreamReadMessage.ReadResponse.Batch) => item.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionData {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionData();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.partition_session_id = reader.readInt64();
                                break;
                            case 2:
                                reader.readMessage(message.batches, () => pb_1.Message.addToRepeatedWrapperField(message, 2, StreamReadMessage.ReadResponse.Batch.deserialize(reader), StreamReadMessage.ReadResponse.Batch));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): PartitionData {
                    return PartitionData.deserialize(bytes);
                }
            }
        }
        export class CommitOffsetRequest extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                commit_offsets?: StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("commit_offsets" in data && data.commit_offsets != undefined) {
                        this.commit_offsets = data.commit_offsets;
                    }
                }
            }
            get commit_offsets() {
                return pb_1.Message.getRepeatedWrapperField(this, StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset, 1) as StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset[];
            }
            set commit_offsets(value: StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                commit_offsets?: ReturnType<typeof StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset.prototype.toObject>[];
            }): CommitOffsetRequest {
                const message = new CommitOffsetRequest({});
                if (data.commit_offsets != null) {
                    message.commit_offsets = data.commit_offsets.map(item => StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    commit_offsets?: ReturnType<typeof StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset.prototype.toObject>[];
                } = {};
                if (this.commit_offsets != null) {
                    data.commit_offsets = this.commit_offsets.map((item: StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.commit_offsets.length)
                    writer.writeRepeatedMessage(1, this.commit_offsets, (item: StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitOffsetRequest {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitOffsetRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.commit_offsets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset.deserialize(reader), StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CommitOffsetRequest {
                return CommitOffsetRequest.deserialize(bytes);
            }
        }
        export namespace CommitOffsetRequest {
            export class PartitionCommitOffset extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    partition_session_id?: number;
                    offsets?: OffsetsRange[];
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("partition_session_id" in data && data.partition_session_id != undefined) {
                            this.partition_session_id = data.partition_session_id;
                        }
                        if ("offsets" in data && data.offsets != undefined) {
                            this.offsets = data.offsets;
                        }
                    }
                }
                get partition_session_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set partition_session_id(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get offsets() {
                    return pb_1.Message.getRepeatedWrapperField(this, OffsetsRange, 2) as OffsetsRange[];
                }
                set offsets(value: OffsetsRange[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 2, value);
                }
                static fromObject(data: {
                    partition_session_id?: number;
                    offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>[];
                }): PartitionCommitOffset {
                    const message = new PartitionCommitOffset({});
                    if (data.partition_session_id != null) {
                        message.partition_session_id = data.partition_session_id;
                    }
                    if (data.offsets != null) {
                        message.offsets = data.offsets.map(item => OffsetsRange.fromObject(item));
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        partition_session_id?: number;
                        offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>[];
                    } = {};
                    if (this.partition_session_id != null) {
                        data.partition_session_id = this.partition_session_id;
                    }
                    if (this.offsets != null) {
                        data.offsets = this.offsets.map((item: OffsetsRange) => item.toObject());
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.partition_session_id != 0)
                        writer.writeInt64(1, this.partition_session_id);
                    if (this.offsets.length)
                        writer.writeRepeatedMessage(2, this.offsets, (item: OffsetsRange) => item.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionCommitOffset {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionCommitOffset();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.partition_session_id = reader.readInt64();
                                break;
                            case 2:
                                reader.readMessage(message.offsets, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OffsetsRange.deserialize(reader), OffsetsRange));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): PartitionCommitOffset {
                    return PartitionCommitOffset.deserialize(bytes);
                }
            }
        }
        export class CommitOffsetResponse extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partitions_committed_offsets?: StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partitions_committed_offsets" in data && data.partitions_committed_offsets != undefined) {
                        this.partitions_committed_offsets = data.partitions_committed_offsets;
                    }
                }
            }
            get partitions_committed_offsets() {
                return pb_1.Message.getRepeatedWrapperField(this, StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset, 1) as StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset[];
            }
            set partitions_committed_offsets(value: StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                partitions_committed_offsets?: ReturnType<typeof StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset.prototype.toObject>[];
            }): CommitOffsetResponse {
                const message = new CommitOffsetResponse({});
                if (data.partitions_committed_offsets != null) {
                    message.partitions_committed_offsets = data.partitions_committed_offsets.map(item => StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    partitions_committed_offsets?: ReturnType<typeof StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset.prototype.toObject>[];
                } = {};
                if (this.partitions_committed_offsets != null) {
                    data.partitions_committed_offsets = this.partitions_committed_offsets.map((item: StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partitions_committed_offsets.length)
                    writer.writeRepeatedMessage(1, this.partitions_committed_offsets, (item: StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitOffsetResponse {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitOffsetResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.partitions_committed_offsets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset.deserialize(reader), StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CommitOffsetResponse {
                return CommitOffsetResponse.deserialize(bytes);
            }
        }
        export namespace CommitOffsetResponse {
            export class PartitionCommittedOffset extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    partition_session_id?: number;
                    committed_offset?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("partition_session_id" in data && data.partition_session_id != undefined) {
                            this.partition_session_id = data.partition_session_id;
                        }
                        if ("committed_offset" in data && data.committed_offset != undefined) {
                            this.committed_offset = data.committed_offset;
                        }
                    }
                }
                get partition_session_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set partition_session_id(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get committed_offset() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set committed_offset(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                static fromObject(data: {
                    partition_session_id?: number;
                    committed_offset?: number;
                }): PartitionCommittedOffset {
                    const message = new PartitionCommittedOffset({});
                    if (data.partition_session_id != null) {
                        message.partition_session_id = data.partition_session_id;
                    }
                    if (data.committed_offset != null) {
                        message.committed_offset = data.committed_offset;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        partition_session_id?: number;
                        committed_offset?: number;
                    } = {};
                    if (this.partition_session_id != null) {
                        data.partition_session_id = this.partition_session_id;
                    }
                    if (this.committed_offset != null) {
                        data.committed_offset = this.committed_offset;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.partition_session_id != 0)
                        writer.writeInt64(1, this.partition_session_id);
                    if (this.committed_offset != 0)
                        writer.writeInt64(2, this.committed_offset);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionCommittedOffset {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionCommittedOffset();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.partition_session_id = reader.readInt64();
                                break;
                            case 2:
                                message.committed_offset = reader.readInt64();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): PartitionCommittedOffset {
                    return PartitionCommittedOffset.deserialize(bytes);
                }
            }
        }
        export class PartitionSessionStatusRequest extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_session_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_session_id" in data && data.partition_session_id != undefined) {
                        this.partition_session_id = data.partition_session_id;
                    }
                }
            }
            get partition_session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set partition_session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                partition_session_id?: number;
            }): PartitionSessionStatusRequest {
                const message = new PartitionSessionStatusRequest({});
                if (data.partition_session_id != null) {
                    message.partition_session_id = data.partition_session_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_session_id?: number;
                } = {};
                if (this.partition_session_id != null) {
                    data.partition_session_id = this.partition_session_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_session_id != 0)
                    writer.writeInt64(1, this.partition_session_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionSessionStatusRequest {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionSessionStatusRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.partition_session_id = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PartitionSessionStatusRequest {
                return PartitionSessionStatusRequest.deserialize(bytes);
            }
        }
        export class PartitionSessionStatusResponse extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_session_id?: number;
                partition_offsets?: OffsetsRange;
                committed_offset?: number;
                write_time_high_watermark?: dependency_8.google.protobuf.Timestamp;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_session_id" in data && data.partition_session_id != undefined) {
                        this.partition_session_id = data.partition_session_id;
                    }
                    if ("partition_offsets" in data && data.partition_offsets != undefined) {
                        this.partition_offsets = data.partition_offsets;
                    }
                    if ("committed_offset" in data && data.committed_offset != undefined) {
                        this.committed_offset = data.committed_offset;
                    }
                    if ("write_time_high_watermark" in data && data.write_time_high_watermark != undefined) {
                        this.write_time_high_watermark = data.write_time_high_watermark;
                    }
                }
            }
            get partition_session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set partition_session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get partition_offsets() {
                return pb_1.Message.getWrapperField(this, OffsetsRange, 2) as OffsetsRange;
            }
            set partition_offsets(value: OffsetsRange) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_partition_offsets() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get committed_offset() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set committed_offset(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get write_time_high_watermark() {
                return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 4) as dependency_8.google.protobuf.Timestamp;
            }
            set write_time_high_watermark(value: dependency_8.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_write_time_high_watermark() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                partition_session_id?: number;
                partition_offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>;
                committed_offset?: number;
                write_time_high_watermark?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
            }): PartitionSessionStatusResponse {
                const message = new PartitionSessionStatusResponse({});
                if (data.partition_session_id != null) {
                    message.partition_session_id = data.partition_session_id;
                }
                if (data.partition_offsets != null) {
                    message.partition_offsets = OffsetsRange.fromObject(data.partition_offsets);
                }
                if (data.committed_offset != null) {
                    message.committed_offset = data.committed_offset;
                }
                if (data.write_time_high_watermark != null) {
                    message.write_time_high_watermark = dependency_8.google.protobuf.Timestamp.fromObject(data.write_time_high_watermark);
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_session_id?: number;
                    partition_offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>;
                    committed_offset?: number;
                    write_time_high_watermark?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                } = {};
                if (this.partition_session_id != null) {
                    data.partition_session_id = this.partition_session_id;
                }
                if (this.partition_offsets != null) {
                    data.partition_offsets = this.partition_offsets.toObject();
                }
                if (this.committed_offset != null) {
                    data.committed_offset = this.committed_offset;
                }
                if (this.write_time_high_watermark != null) {
                    data.write_time_high_watermark = this.write_time_high_watermark.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_session_id != 0)
                    writer.writeInt64(1, this.partition_session_id);
                if (this.has_partition_offsets)
                    writer.writeMessage(2, this.partition_offsets, () => this.partition_offsets.serialize(writer));
                if (this.committed_offset != 0)
                    writer.writeInt64(3, this.committed_offset);
                if (this.has_write_time_high_watermark)
                    writer.writeMessage(4, this.write_time_high_watermark, () => this.write_time_high_watermark.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionSessionStatusResponse {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionSessionStatusResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.partition_session_id = reader.readInt64();
                            break;
                        case 2:
                            reader.readMessage(message.partition_offsets, () => message.partition_offsets = OffsetsRange.deserialize(reader));
                            break;
                        case 3:
                            message.committed_offset = reader.readInt64();
                            break;
                        case 4:
                            reader.readMessage(message.write_time_high_watermark, () => message.write_time_high_watermark = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PartitionSessionStatusResponse {
                return PartitionSessionStatusResponse.deserialize(bytes);
            }
        }
        export class StartPartitionSessionRequest extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_session?: StreamReadMessage.PartitionSession;
                committed_offset?: number;
                partition_offsets?: OffsetsRange;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_session" in data && data.partition_session != undefined) {
                        this.partition_session = data.partition_session;
                    }
                    if ("committed_offset" in data && data.committed_offset != undefined) {
                        this.committed_offset = data.committed_offset;
                    }
                    if ("partition_offsets" in data && data.partition_offsets != undefined) {
                        this.partition_offsets = data.partition_offsets;
                    }
                }
            }
            get partition_session() {
                return pb_1.Message.getWrapperField(this, StreamReadMessage.PartitionSession, 1) as StreamReadMessage.PartitionSession;
            }
            set partition_session(value: StreamReadMessage.PartitionSession) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_partition_session() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get committed_offset() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set committed_offset(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get partition_offsets() {
                return pb_1.Message.getWrapperField(this, OffsetsRange, 3) as OffsetsRange;
            }
            set partition_offsets(value: OffsetsRange) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_partition_offsets() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                partition_session?: ReturnType<typeof StreamReadMessage.PartitionSession.prototype.toObject>;
                committed_offset?: number;
                partition_offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>;
            }): StartPartitionSessionRequest {
                const message = new StartPartitionSessionRequest({});
                if (data.partition_session != null) {
                    message.partition_session = StreamReadMessage.PartitionSession.fromObject(data.partition_session);
                }
                if (data.committed_offset != null) {
                    message.committed_offset = data.committed_offset;
                }
                if (data.partition_offsets != null) {
                    message.partition_offsets = OffsetsRange.fromObject(data.partition_offsets);
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_session?: ReturnType<typeof StreamReadMessage.PartitionSession.prototype.toObject>;
                    committed_offset?: number;
                    partition_offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>;
                } = {};
                if (this.partition_session != null) {
                    data.partition_session = this.partition_session.toObject();
                }
                if (this.committed_offset != null) {
                    data.committed_offset = this.committed_offset;
                }
                if (this.partition_offsets != null) {
                    data.partition_offsets = this.partition_offsets.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_partition_session)
                    writer.writeMessage(1, this.partition_session, () => this.partition_session.serialize(writer));
                if (this.committed_offset != 0)
                    writer.writeInt64(2, this.committed_offset);
                if (this.has_partition_offsets)
                    writer.writeMessage(3, this.partition_offsets, () => this.partition_offsets.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartPartitionSessionRequest {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartPartitionSessionRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.partition_session, () => message.partition_session = StreamReadMessage.PartitionSession.deserialize(reader));
                            break;
                        case 2:
                            message.committed_offset = reader.readInt64();
                            break;
                        case 3:
                            reader.readMessage(message.partition_offsets, () => message.partition_offsets = OffsetsRange.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): StartPartitionSessionRequest {
                return StartPartitionSessionRequest.deserialize(bytes);
            }
        }
        export class StartPartitionSessionResponse extends pb_1.Message {
            #one_of_decls: number[][] = [[2], [3]];
            constructor(data?: any[] | ({
                partition_session_id?: number;
            } & (({
                read_offset?: number;
            }) | ({
                commit_offset?: number;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_session_id" in data && data.partition_session_id != undefined) {
                        this.partition_session_id = data.partition_session_id;
                    }
                    if ("read_offset" in data && data.read_offset != undefined) {
                        this.read_offset = data.read_offset;
                    }
                    if ("commit_offset" in data && data.commit_offset != undefined) {
                        this.commit_offset = data.commit_offset;
                    }
                }
            }
            get partition_session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set partition_session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get read_offset() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set read_offset(value: number) {
                pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
            }
            get has_read_offset() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get commit_offset() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set commit_offset(value: number) {
                pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
            }
            get has_commit_offset() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get _read_offset() {
                const cases: {
                    [index: number]: "none" | "read_offset";
                } = {
                    0: "none",
                    2: "read_offset"
                };
                return cases[pb_1.Message.computeOneofCase(this, [2])];
            }
            get _commit_offset() {
                const cases: {
                    [index: number]: "none" | "commit_offset";
                } = {
                    0: "none",
                    3: "commit_offset"
                };
                return cases[pb_1.Message.computeOneofCase(this, [3])];
            }
            static fromObject(data: {
                partition_session_id?: number;
                read_offset?: number;
                commit_offset?: number;
            }): StartPartitionSessionResponse {
                const message = new StartPartitionSessionResponse({});
                if (data.partition_session_id != null) {
                    message.partition_session_id = data.partition_session_id;
                }
                if (data.read_offset != null) {
                    message.read_offset = data.read_offset;
                }
                if (data.commit_offset != null) {
                    message.commit_offset = data.commit_offset;
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_session_id?: number;
                    read_offset?: number;
                    commit_offset?: number;
                } = {};
                if (this.partition_session_id != null) {
                    data.partition_session_id = this.partition_session_id;
                }
                if (this.read_offset != null) {
                    data.read_offset = this.read_offset;
                }
                if (this.commit_offset != null) {
                    data.commit_offset = this.commit_offset;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_session_id != 0)
                    writer.writeInt64(1, this.partition_session_id);
                if (this.has_read_offset)
                    writer.writeInt64(2, this.read_offset);
                if (this.has_commit_offset)
                    writer.writeInt64(3, this.commit_offset);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartPartitionSessionResponse {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartPartitionSessionResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.partition_session_id = reader.readInt64();
                            break;
                        case 2:
                            message.read_offset = reader.readInt64();
                            break;
                        case 3:
                            message.commit_offset = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): StartPartitionSessionResponse {
                return StartPartitionSessionResponse.deserialize(bytes);
            }
        }
        export class StopPartitionSessionRequest extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_session_id?: number;
                graceful?: boolean;
                committed_offset?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_session_id" in data && data.partition_session_id != undefined) {
                        this.partition_session_id = data.partition_session_id;
                    }
                    if ("graceful" in data && data.graceful != undefined) {
                        this.graceful = data.graceful;
                    }
                    if ("committed_offset" in data && data.committed_offset != undefined) {
                        this.committed_offset = data.committed_offset;
                    }
                }
            }
            get partition_session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set partition_session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get graceful() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set graceful(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get committed_offset() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set committed_offset(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                partition_session_id?: number;
                graceful?: boolean;
                committed_offset?: number;
            }): StopPartitionSessionRequest {
                const message = new StopPartitionSessionRequest({});
                if (data.partition_session_id != null) {
                    message.partition_session_id = data.partition_session_id;
                }
                if (data.graceful != null) {
                    message.graceful = data.graceful;
                }
                if (data.committed_offset != null) {
                    message.committed_offset = data.committed_offset;
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_session_id?: number;
                    graceful?: boolean;
                    committed_offset?: number;
                } = {};
                if (this.partition_session_id != null) {
                    data.partition_session_id = this.partition_session_id;
                }
                if (this.graceful != null) {
                    data.graceful = this.graceful;
                }
                if (this.committed_offset != null) {
                    data.committed_offset = this.committed_offset;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_session_id != 0)
                    writer.writeInt64(1, this.partition_session_id);
                if (this.graceful != false)
                    writer.writeBool(2, this.graceful);
                if (this.committed_offset != 0)
                    writer.writeInt64(3, this.committed_offset);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopPartitionSessionRequest {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopPartitionSessionRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.partition_session_id = reader.readInt64();
                            break;
                        case 2:
                            message.graceful = reader.readBool();
                            break;
                        case 3:
                            message.committed_offset = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): StopPartitionSessionRequest {
                return StopPartitionSessionRequest.deserialize(bytes);
            }
        }
        export class StopPartitionSessionResponse extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_session_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_session_id" in data && data.partition_session_id != undefined) {
                        this.partition_session_id = data.partition_session_id;
                    }
                }
            }
            get partition_session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set partition_session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                partition_session_id?: number;
            }): StopPartitionSessionResponse {
                const message = new StopPartitionSessionResponse({});
                if (data.partition_session_id != null) {
                    message.partition_session_id = data.partition_session_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_session_id?: number;
                } = {};
                if (this.partition_session_id != null) {
                    data.partition_session_id = this.partition_session_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_session_id != 0)
                    writer.writeInt64(1, this.partition_session_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StopPartitionSessionResponse {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StopPartitionSessionResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.partition_session_id = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): StopPartitionSessionResponse {
                return StopPartitionSessionResponse.deserialize(bytes);
            }
        }
    }
    export class AddOffsetsToTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
            session_id?: string;
            tx_control?: dependency_5.Ydb.Table.TransactionControl;
            topics?: AddOffsetsToTransactionRequest.TopicOffsets[];
            consumer?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("tx_control" in data && data.tx_control != undefined) {
                    this.tx_control = data.tx_control;
                }
                if ("topics" in data && data.topics != undefined) {
                    this.topics = data.topics;
                }
                if ("consumer" in data && data.consumer != undefined) {
                    this.consumer = data.consumer;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tx_control() {
            return pb_1.Message.getWrapperField(this, dependency_5.Ydb.Table.TransactionControl, 3) as dependency_5.Ydb.Table.TransactionControl;
        }
        set tx_control(value: dependency_5.Ydb.Table.TransactionControl) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_tx_control() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get topics() {
            return pb_1.Message.getRepeatedWrapperField(this, AddOffsetsToTransactionRequest.TopicOffsets, 4) as AddOffsetsToTransactionRequest.TopicOffsets[];
        }
        set topics(value: AddOffsetsToTransactionRequest.TopicOffsets[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get consumer() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set consumer(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            session_id?: string;
            tx_control?: ReturnType<typeof dependency_5.Ydb.Table.TransactionControl.prototype.toObject>;
            topics?: ReturnType<typeof AddOffsetsToTransactionRequest.TopicOffsets.prototype.toObject>[];
            consumer?: string;
        }): AddOffsetsToTransactionRequest {
            const message = new AddOffsetsToTransactionRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.tx_control != null) {
                message.tx_control = dependency_5.Ydb.Table.TransactionControl.fromObject(data.tx_control);
            }
            if (data.topics != null) {
                message.topics = data.topics.map(item => AddOffsetsToTransactionRequest.TopicOffsets.fromObject(item));
            }
            if (data.consumer != null) {
                message.consumer = data.consumer;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
                session_id?: string;
                tx_control?: ReturnType<typeof dependency_5.Ydb.Table.TransactionControl.prototype.toObject>;
                topics?: ReturnType<typeof AddOffsetsToTransactionRequest.TopicOffsets.prototype.toObject>[];
                consumer?: string;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.tx_control != null) {
                data.tx_control = this.tx_control.toObject();
            }
            if (this.topics != null) {
                data.topics = this.topics.map((item: AddOffsetsToTransactionRequest.TopicOffsets) => item.toObject());
            }
            if (this.consumer != null) {
                data.consumer = this.consumer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.session_id.length)
                writer.writeString(2, this.session_id);
            if (this.has_tx_control)
                writer.writeMessage(3, this.tx_control, () => this.tx_control.serialize(writer));
            if (this.topics.length)
                writer.writeRepeatedMessage(4, this.topics, (item: AddOffsetsToTransactionRequest.TopicOffsets) => item.serialize(writer));
            if (this.consumer.length)
                writer.writeString(5, this.consumer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddOffsetsToTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddOffsetsToTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.session_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.tx_control, () => message.tx_control = dependency_5.Ydb.Table.TransactionControl.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.topics, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AddOffsetsToTransactionRequest.TopicOffsets.deserialize(reader), AddOffsetsToTransactionRequest.TopicOffsets));
                        break;
                    case 5:
                        message.consumer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddOffsetsToTransactionRequest {
            return AddOffsetsToTransactionRequest.deserialize(bytes);
        }
    }
    export namespace AddOffsetsToTransactionRequest {
        export class TopicOffsets extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                path?: string;
                partitions?: AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("path" in data && data.path != undefined) {
                        this.path = data.path;
                    }
                    if ("partitions" in data && data.partitions != undefined) {
                        this.partitions = data.partitions;
                    }
                }
            }
            get path() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set path(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get partitions() {
                return pb_1.Message.getRepeatedWrapperField(this, AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets, 2) as AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets[];
            }
            set partitions(value: AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                path?: string;
                partitions?: ReturnType<typeof AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets.prototype.toObject>[];
            }): TopicOffsets {
                const message = new TopicOffsets({});
                if (data.path != null) {
                    message.path = data.path;
                }
                if (data.partitions != null) {
                    message.partitions = data.partitions.map(item => AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    path?: string;
                    partitions?: ReturnType<typeof AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets.prototype.toObject>[];
                } = {};
                if (this.path != null) {
                    data.path = this.path;
                }
                if (this.partitions != null) {
                    data.partitions = this.partitions.map((item: AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.path.length)
                    writer.writeString(1, this.path);
                if (this.partitions.length)
                    writer.writeRepeatedMessage(2, this.partitions, (item: AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TopicOffsets {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TopicOffsets();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.path = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.partitions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets.deserialize(reader), AddOffsetsToTransactionRequest.TopicOffsets.PartitionOffsets));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TopicOffsets {
                return TopicOffsets.deserialize(bytes);
            }
        }
        export namespace TopicOffsets {
            export class PartitionOffsets extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    partition_id?: number;
                    partition_offsets?: OffsetsRange[];
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("partition_id" in data && data.partition_id != undefined) {
                            this.partition_id = data.partition_id;
                        }
                        if ("partition_offsets" in data && data.partition_offsets != undefined) {
                            this.partition_offsets = data.partition_offsets;
                        }
                    }
                }
                get partition_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set partition_id(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get partition_offsets() {
                    return pb_1.Message.getRepeatedWrapperField(this, OffsetsRange, 2) as OffsetsRange[];
                }
                set partition_offsets(value: OffsetsRange[]) {
                    pb_1.Message.setRepeatedWrapperField(this, 2, value);
                }
                static fromObject(data: {
                    partition_id?: number;
                    partition_offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>[];
                }): PartitionOffsets {
                    const message = new PartitionOffsets({});
                    if (data.partition_id != null) {
                        message.partition_id = data.partition_id;
                    }
                    if (data.partition_offsets != null) {
                        message.partition_offsets = data.partition_offsets.map(item => OffsetsRange.fromObject(item));
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        partition_id?: number;
                        partition_offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>[];
                    } = {};
                    if (this.partition_id != null) {
                        data.partition_id = this.partition_id;
                    }
                    if (this.partition_offsets != null) {
                        data.partition_offsets = this.partition_offsets.map((item: OffsetsRange) => item.toObject());
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.partition_id != 0)
                        writer.writeInt64(1, this.partition_id);
                    if (this.partition_offsets.length)
                        writer.writeRepeatedMessage(2, this.partition_offsets, (item: OffsetsRange) => item.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionOffsets {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionOffsets();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.partition_id = reader.readInt64();
                                break;
                            case 2:
                                reader.readMessage(message.partition_offsets, () => pb_1.Message.addToRepeatedWrapperField(message, 2, OffsetsRange.deserialize(reader), OffsetsRange));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): PartitionOffsets {
                    return PartitionOffsets.deserialize(bytes);
                }
            }
        }
    }
    export class AddOffsetsToTransactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): AddOffsetsToTransactionResponse {
            const message = new AddOffsetsToTransactionResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddOffsetsToTransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddOffsetsToTransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddOffsetsToTransactionResponse {
            return AddOffsetsToTransactionResponse.deserialize(bytes);
        }
    }
    export class AddOffsetsToTransactionResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AddOffsetsToTransactionResult {
            const message = new AddOffsetsToTransactionResult({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddOffsetsToTransactionResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddOffsetsToTransactionResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddOffsetsToTransactionResult {
            return AddOffsetsToTransactionResult.deserialize(bytes);
        }
    }
    export class MultipleWindowsStat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            per_minute?: number;
            per_hour?: number;
            per_day?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("per_minute" in data && data.per_minute != undefined) {
                    this.per_minute = data.per_minute;
                }
                if ("per_hour" in data && data.per_hour != undefined) {
                    this.per_hour = data.per_hour;
                }
                if ("per_day" in data && data.per_day != undefined) {
                    this.per_day = data.per_day;
                }
            }
        }
        get per_minute() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set per_minute(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get per_hour() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set per_hour(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get per_day() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set per_day(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            per_minute?: number;
            per_hour?: number;
            per_day?: number;
        }): MultipleWindowsStat {
            const message = new MultipleWindowsStat({});
            if (data.per_minute != null) {
                message.per_minute = data.per_minute;
            }
            if (data.per_hour != null) {
                message.per_hour = data.per_hour;
            }
            if (data.per_day != null) {
                message.per_day = data.per_day;
            }
            return message;
        }
        toObject() {
            const data: {
                per_minute?: number;
                per_hour?: number;
                per_day?: number;
            } = {};
            if (this.per_minute != null) {
                data.per_minute = this.per_minute;
            }
            if (this.per_hour != null) {
                data.per_hour = this.per_hour;
            }
            if (this.per_day != null) {
                data.per_day = this.per_day;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.per_minute != 0)
                writer.writeInt64(1, this.per_minute);
            if (this.per_hour != 0)
                writer.writeInt64(2, this.per_hour);
            if (this.per_day != 0)
                writer.writeInt64(3, this.per_day);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultipleWindowsStat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultipleWindowsStat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.per_minute = reader.readInt64();
                        break;
                    case 2:
                        message.per_hour = reader.readInt64();
                        break;
                    case 3:
                        message.per_day = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultipleWindowsStat {
            return MultipleWindowsStat.deserialize(bytes);
        }
    }
    export class Consumer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            important?: boolean;
            read_from?: dependency_8.google.protobuf.Timestamp;
            supported_codecs?: SupportedCodecs;
            attributes?: Map<string, string>;
            consumer_stats?: Consumer.ConsumerStats;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("important" in data && data.important != undefined) {
                    this.important = data.important;
                }
                if ("read_from" in data && data.read_from != undefined) {
                    this.read_from = data.read_from;
                }
                if ("supported_codecs" in data && data.supported_codecs != undefined) {
                    this.supported_codecs = data.supported_codecs;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("consumer_stats" in data && data.consumer_stats != undefined) {
                    this.consumer_stats = data.consumer_stats;
                }
            }
            if (!this.attributes)
                this.attributes = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get important() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set important(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get read_from() {
            return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 3) as dependency_8.google.protobuf.Timestamp;
        }
        set read_from(value: dependency_8.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_read_from() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get supported_codecs() {
            return pb_1.Message.getWrapperField(this, SupportedCodecs, 5) as SupportedCodecs;
        }
        set supported_codecs(value: SupportedCodecs) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_supported_codecs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get attributes() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get consumer_stats() {
            return pb_1.Message.getWrapperField(this, Consumer.ConsumerStats, 7) as Consumer.ConsumerStats;
        }
        set consumer_stats(value: Consumer.ConsumerStats) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_consumer_stats() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            name?: string;
            important?: boolean;
            read_from?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
            supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
            attributes?: {
                [key: string]: string;
            };
            consumer_stats?: ReturnType<typeof Consumer.ConsumerStats.prototype.toObject>;
        }): Consumer {
            const message = new Consumer({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.important != null) {
                message.important = data.important;
            }
            if (data.read_from != null) {
                message.read_from = dependency_8.google.protobuf.Timestamp.fromObject(data.read_from);
            }
            if (data.supported_codecs != null) {
                message.supported_codecs = SupportedCodecs.fromObject(data.supported_codecs);
            }
            if (typeof data.attributes == "object") {
                message.attributes = new Map(Object.entries(data.attributes));
            }
            if (data.consumer_stats != null) {
                message.consumer_stats = Consumer.ConsumerStats.fromObject(data.consumer_stats);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                important?: boolean;
                read_from?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
                attributes?: {
                    [key: string]: string;
                };
                consumer_stats?: ReturnType<typeof Consumer.ConsumerStats.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.important != null) {
                data.important = this.important;
            }
            if (this.read_from != null) {
                data.read_from = this.read_from.toObject();
            }
            if (this.supported_codecs != null) {
                data.supported_codecs = this.supported_codecs.toObject();
            }
            if (this.attributes != null) {
                data.attributes = (Object.fromEntries)(this.attributes);
            }
            if (this.consumer_stats != null) {
                data.consumer_stats = this.consumer_stats.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.important != false)
                writer.writeBool(2, this.important);
            if (this.has_read_from)
                writer.writeMessage(3, this.read_from, () => this.read_from.serialize(writer));
            if (this.has_supported_codecs)
                writer.writeMessage(5, this.supported_codecs, () => this.supported_codecs.serialize(writer));
            for (const [key, value] of this.attributes) {
                writer.writeMessage(6, this.attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_consumer_stats)
                writer.writeMessage(7, this.consumer_stats, () => this.consumer_stats.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Consumer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Consumer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.important = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.read_from, () => message.read_from = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.supported_codecs, () => message.supported_codecs = SupportedCodecs.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 7:
                        reader.readMessage(message.consumer_stats, () => message.consumer_stats = Consumer.ConsumerStats.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Consumer {
            return Consumer.deserialize(bytes);
        }
    }
    export namespace Consumer {
        export class ConsumerStats extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                min_partitions_last_read_time?: dependency_8.google.protobuf.Timestamp;
                max_read_time_lag?: dependency_7.google.protobuf.Duration;
                max_write_time_lag?: dependency_7.google.protobuf.Duration;
                bytes_read?: MultipleWindowsStat;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("min_partitions_last_read_time" in data && data.min_partitions_last_read_time != undefined) {
                        this.min_partitions_last_read_time = data.min_partitions_last_read_time;
                    }
                    if ("max_read_time_lag" in data && data.max_read_time_lag != undefined) {
                        this.max_read_time_lag = data.max_read_time_lag;
                    }
                    if ("max_write_time_lag" in data && data.max_write_time_lag != undefined) {
                        this.max_write_time_lag = data.max_write_time_lag;
                    }
                    if ("bytes_read" in data && data.bytes_read != undefined) {
                        this.bytes_read = data.bytes_read;
                    }
                }
            }
            get min_partitions_last_read_time() {
                return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 1) as dependency_8.google.protobuf.Timestamp;
            }
            set min_partitions_last_read_time(value: dependency_8.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_min_partitions_last_read_time() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get max_read_time_lag() {
                return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 2) as dependency_7.google.protobuf.Duration;
            }
            set max_read_time_lag(value: dependency_7.google.protobuf.Duration) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_max_read_time_lag() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get max_write_time_lag() {
                return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 3) as dependency_7.google.protobuf.Duration;
            }
            set max_write_time_lag(value: dependency_7.google.protobuf.Duration) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_max_write_time_lag() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get bytes_read() {
                return pb_1.Message.getWrapperField(this, MultipleWindowsStat, 4) as MultipleWindowsStat;
            }
            set bytes_read(value: MultipleWindowsStat) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_bytes_read() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                min_partitions_last_read_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                max_read_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                max_write_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                bytes_read?: ReturnType<typeof MultipleWindowsStat.prototype.toObject>;
            }): ConsumerStats {
                const message = new ConsumerStats({});
                if (data.min_partitions_last_read_time != null) {
                    message.min_partitions_last_read_time = dependency_8.google.protobuf.Timestamp.fromObject(data.min_partitions_last_read_time);
                }
                if (data.max_read_time_lag != null) {
                    message.max_read_time_lag = dependency_7.google.protobuf.Duration.fromObject(data.max_read_time_lag);
                }
                if (data.max_write_time_lag != null) {
                    message.max_write_time_lag = dependency_7.google.protobuf.Duration.fromObject(data.max_write_time_lag);
                }
                if (data.bytes_read != null) {
                    message.bytes_read = MultipleWindowsStat.fromObject(data.bytes_read);
                }
                return message;
            }
            toObject() {
                const data: {
                    min_partitions_last_read_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                    max_read_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    max_write_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    bytes_read?: ReturnType<typeof MultipleWindowsStat.prototype.toObject>;
                } = {};
                if (this.min_partitions_last_read_time != null) {
                    data.min_partitions_last_read_time = this.min_partitions_last_read_time.toObject();
                }
                if (this.max_read_time_lag != null) {
                    data.max_read_time_lag = this.max_read_time_lag.toObject();
                }
                if (this.max_write_time_lag != null) {
                    data.max_write_time_lag = this.max_write_time_lag.toObject();
                }
                if (this.bytes_read != null) {
                    data.bytes_read = this.bytes_read.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_min_partitions_last_read_time)
                    writer.writeMessage(1, this.min_partitions_last_read_time, () => this.min_partitions_last_read_time.serialize(writer));
                if (this.has_max_read_time_lag)
                    writer.writeMessage(2, this.max_read_time_lag, () => this.max_read_time_lag.serialize(writer));
                if (this.has_max_write_time_lag)
                    writer.writeMessage(3, this.max_write_time_lag, () => this.max_write_time_lag.serialize(writer));
                if (this.has_bytes_read)
                    writer.writeMessage(4, this.bytes_read, () => this.bytes_read.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsumerStats {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsumerStats();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.min_partitions_last_read_time, () => message.min_partitions_last_read_time = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.max_read_time_lag, () => message.max_read_time_lag = dependency_7.google.protobuf.Duration.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.max_write_time_lag, () => message.max_write_time_lag = dependency_7.google.protobuf.Duration.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.bytes_read, () => message.bytes_read = MultipleWindowsStat.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ConsumerStats {
                return ConsumerStats.deserialize(bytes);
            }
        }
    }
    export class AlterConsumer extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            name?: string;
            set_read_from?: dependency_8.google.protobuf.Timestamp;
            set_supported_codecs?: SupportedCodecs;
            alter_attributes?: Map<string, string>;
        } & (({
            set_important?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("set_important" in data && data.set_important != undefined) {
                    this.set_important = data.set_important;
                }
                if ("set_read_from" in data && data.set_read_from != undefined) {
                    this.set_read_from = data.set_read_from;
                }
                if ("set_supported_codecs" in data && data.set_supported_codecs != undefined) {
                    this.set_supported_codecs = data.set_supported_codecs;
                }
                if ("alter_attributes" in data && data.alter_attributes != undefined) {
                    this.alter_attributes = data.alter_attributes;
                }
            }
            if (!this.alter_attributes)
                this.alter_attributes = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get set_important() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set set_important(value: boolean) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_set_important() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get set_read_from() {
            return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 3) as dependency_8.google.protobuf.Timestamp;
        }
        set set_read_from(value: dependency_8.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_set_read_from() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get set_supported_codecs() {
            return pb_1.Message.getWrapperField(this, SupportedCodecs, 5) as SupportedCodecs;
        }
        set set_supported_codecs(value: SupportedCodecs) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_set_supported_codecs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get alter_attributes() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set alter_attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get _set_important() {
            const cases: {
                [index: number]: "none" | "set_important";
            } = {
                0: "none",
                2: "set_important"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            name?: string;
            set_important?: boolean;
            set_read_from?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
            set_supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
            alter_attributes?: {
                [key: string]: string;
            };
        }): AlterConsumer {
            const message = new AlterConsumer({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.set_important != null) {
                message.set_important = data.set_important;
            }
            if (data.set_read_from != null) {
                message.set_read_from = dependency_8.google.protobuf.Timestamp.fromObject(data.set_read_from);
            }
            if (data.set_supported_codecs != null) {
                message.set_supported_codecs = SupportedCodecs.fromObject(data.set_supported_codecs);
            }
            if (typeof data.alter_attributes == "object") {
                message.alter_attributes = new Map(Object.entries(data.alter_attributes));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                set_important?: boolean;
                set_read_from?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                set_supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
                alter_attributes?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.set_important != null) {
                data.set_important = this.set_important;
            }
            if (this.set_read_from != null) {
                data.set_read_from = this.set_read_from.toObject();
            }
            if (this.set_supported_codecs != null) {
                data.set_supported_codecs = this.set_supported_codecs.toObject();
            }
            if (this.alter_attributes != null) {
                data.alter_attributes = (Object.fromEntries)(this.alter_attributes);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_set_important)
                writer.writeBool(2, this.set_important);
            if (this.has_set_read_from)
                writer.writeMessage(3, this.set_read_from, () => this.set_read_from.serialize(writer));
            if (this.has_set_supported_codecs)
                writer.writeMessage(5, this.set_supported_codecs, () => this.set_supported_codecs.serialize(writer));
            for (const [key, value] of this.alter_attributes) {
                writer.writeMessage(6, this.alter_attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterConsumer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterConsumer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.set_important = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.set_read_from, () => message.set_read_from = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.set_supported_codecs, () => message.set_supported_codecs = SupportedCodecs.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.alter_attributes as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterConsumer {
            return AlterConsumer.deserialize(bytes);
        }
    }
    export class PartitioningSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            min_active_partitions?: number;
            partition_count_limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("min_active_partitions" in data && data.min_active_partitions != undefined) {
                    this.min_active_partitions = data.min_active_partitions;
                }
                if ("partition_count_limit" in data && data.partition_count_limit != undefined) {
                    this.partition_count_limit = data.partition_count_limit;
                }
            }
        }
        get min_active_partitions() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set min_active_partitions(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get partition_count_limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set partition_count_limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            min_active_partitions?: number;
            partition_count_limit?: number;
        }): PartitioningSettings {
            const message = new PartitioningSettings({});
            if (data.min_active_partitions != null) {
                message.min_active_partitions = data.min_active_partitions;
            }
            if (data.partition_count_limit != null) {
                message.partition_count_limit = data.partition_count_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                min_active_partitions?: number;
                partition_count_limit?: number;
            } = {};
            if (this.min_active_partitions != null) {
                data.min_active_partitions = this.min_active_partitions;
            }
            if (this.partition_count_limit != null) {
                data.partition_count_limit = this.partition_count_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.min_active_partitions != 0)
                writer.writeInt64(1, this.min_active_partitions);
            if (this.partition_count_limit != 0)
                writer.writeInt64(2, this.partition_count_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitioningSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitioningSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.min_active_partitions = reader.readInt64();
                        break;
                    case 2:
                        message.partition_count_limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PartitioningSettings {
            return PartitioningSettings.deserialize(bytes);
        }
    }
    export class AlterPartitioningSettings extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            set_min_active_partitions?: number;
        }) | ({
            set_partition_count_limit?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("set_min_active_partitions" in data && data.set_min_active_partitions != undefined) {
                    this.set_min_active_partitions = data.set_min_active_partitions;
                }
                if ("set_partition_count_limit" in data && data.set_partition_count_limit != undefined) {
                    this.set_partition_count_limit = data.set_partition_count_limit;
                }
            }
        }
        get set_min_active_partitions() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set set_min_active_partitions(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_set_min_active_partitions() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get set_partition_count_limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set set_partition_count_limit(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_set_partition_count_limit() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _set_min_active_partitions() {
            const cases: {
                [index: number]: "none" | "set_min_active_partitions";
            } = {
                0: "none",
                1: "set_min_active_partitions"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _set_partition_count_limit() {
            const cases: {
                [index: number]: "none" | "set_partition_count_limit";
            } = {
                0: "none",
                2: "set_partition_count_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            set_min_active_partitions?: number;
            set_partition_count_limit?: number;
        }): AlterPartitioningSettings {
            const message = new AlterPartitioningSettings({});
            if (data.set_min_active_partitions != null) {
                message.set_min_active_partitions = data.set_min_active_partitions;
            }
            if (data.set_partition_count_limit != null) {
                message.set_partition_count_limit = data.set_partition_count_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                set_min_active_partitions?: number;
                set_partition_count_limit?: number;
            } = {};
            if (this.set_min_active_partitions != null) {
                data.set_min_active_partitions = this.set_min_active_partitions;
            }
            if (this.set_partition_count_limit != null) {
                data.set_partition_count_limit = this.set_partition_count_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_set_min_active_partitions)
                writer.writeInt64(1, this.set_min_active_partitions);
            if (this.has_set_partition_count_limit)
                writer.writeInt64(2, this.set_partition_count_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterPartitioningSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterPartitioningSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.set_min_active_partitions = reader.readInt64();
                        break;
                    case 2:
                        message.set_partition_count_limit = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterPartitioningSettings {
            return AlterPartitioningSettings.deserialize(bytes);
        }
    }
    export class CreateTopicRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
            path?: string;
            partitioning_settings?: PartitioningSettings;
            retention_period?: dependency_7.google.protobuf.Duration;
            retention_storage_mb?: number;
            supported_codecs?: SupportedCodecs;
            partition_write_speed_bytes_per_second?: number;
            partition_write_burst_bytes?: number;
            attributes?: Map<string, string>;
            consumers?: Consumer[];
            metering_mode?: MeteringMode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("partitioning_settings" in data && data.partitioning_settings != undefined) {
                    this.partitioning_settings = data.partitioning_settings;
                }
                if ("retention_period" in data && data.retention_period != undefined) {
                    this.retention_period = data.retention_period;
                }
                if ("retention_storage_mb" in data && data.retention_storage_mb != undefined) {
                    this.retention_storage_mb = data.retention_storage_mb;
                }
                if ("supported_codecs" in data && data.supported_codecs != undefined) {
                    this.supported_codecs = data.supported_codecs;
                }
                if ("partition_write_speed_bytes_per_second" in data && data.partition_write_speed_bytes_per_second != undefined) {
                    this.partition_write_speed_bytes_per_second = data.partition_write_speed_bytes_per_second;
                }
                if ("partition_write_burst_bytes" in data && data.partition_write_burst_bytes != undefined) {
                    this.partition_write_burst_bytes = data.partition_write_burst_bytes;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("consumers" in data && data.consumers != undefined) {
                    this.consumers = data.consumers;
                }
                if ("metering_mode" in data && data.metering_mode != undefined) {
                    this.metering_mode = data.metering_mode;
                }
            }
            if (!this.attributes)
                this.attributes = new Map();
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get partitioning_settings() {
            return pb_1.Message.getWrapperField(this, PartitioningSettings, 3) as PartitioningSettings;
        }
        set partitioning_settings(value: PartitioningSettings) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_partitioning_settings() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get retention_period() {
            return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 4) as dependency_7.google.protobuf.Duration;
        }
        set retention_period(value: dependency_7.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_retention_period() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get retention_storage_mb() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set retention_storage_mb(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get supported_codecs() {
            return pb_1.Message.getWrapperField(this, SupportedCodecs, 7) as SupportedCodecs;
        }
        set supported_codecs(value: SupportedCodecs) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_supported_codecs() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get partition_write_speed_bytes_per_second() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set partition_write_speed_bytes_per_second(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get partition_write_burst_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set partition_write_burst_bytes(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get attributes() {
            return pb_1.Message.getField(this, 10) as any as Map<string, string>;
        }
        set attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        get consumers() {
            return pb_1.Message.getRepeatedWrapperField(this, Consumer, 11) as Consumer[];
        }
        set consumers(value: Consumer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get metering_mode() {
            return pb_1.Message.getFieldWithDefault(this, 12, MeteringMode.METERING_MODE_UNSPECIFIED) as MeteringMode;
        }
        set metering_mode(value: MeteringMode) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            path?: string;
            partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
            retention_period?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
            retention_storage_mb?: number;
            supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
            partition_write_speed_bytes_per_second?: number;
            partition_write_burst_bytes?: number;
            attributes?: {
                [key: string]: string;
            };
            consumers?: ReturnType<typeof Consumer.prototype.toObject>[];
            metering_mode?: MeteringMode;
        }): CreateTopicRequest {
            const message = new CreateTopicRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.partitioning_settings != null) {
                message.partitioning_settings = PartitioningSettings.fromObject(data.partitioning_settings);
            }
            if (data.retention_period != null) {
                message.retention_period = dependency_7.google.protobuf.Duration.fromObject(data.retention_period);
            }
            if (data.retention_storage_mb != null) {
                message.retention_storage_mb = data.retention_storage_mb;
            }
            if (data.supported_codecs != null) {
                message.supported_codecs = SupportedCodecs.fromObject(data.supported_codecs);
            }
            if (data.partition_write_speed_bytes_per_second != null) {
                message.partition_write_speed_bytes_per_second = data.partition_write_speed_bytes_per_second;
            }
            if (data.partition_write_burst_bytes != null) {
                message.partition_write_burst_bytes = data.partition_write_burst_bytes;
            }
            if (typeof data.attributes == "object") {
                message.attributes = new Map(Object.entries(data.attributes));
            }
            if (data.consumers != null) {
                message.consumers = data.consumers.map(item => Consumer.fromObject(item));
            }
            if (data.metering_mode != null) {
                message.metering_mode = data.metering_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
                path?: string;
                partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
                retention_period?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                retention_storage_mb?: number;
                supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
                partition_write_speed_bytes_per_second?: number;
                partition_write_burst_bytes?: number;
                attributes?: {
                    [key: string]: string;
                };
                consumers?: ReturnType<typeof Consumer.prototype.toObject>[];
                metering_mode?: MeteringMode;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.partitioning_settings != null) {
                data.partitioning_settings = this.partitioning_settings.toObject();
            }
            if (this.retention_period != null) {
                data.retention_period = this.retention_period.toObject();
            }
            if (this.retention_storage_mb != null) {
                data.retention_storage_mb = this.retention_storage_mb;
            }
            if (this.supported_codecs != null) {
                data.supported_codecs = this.supported_codecs.toObject();
            }
            if (this.partition_write_speed_bytes_per_second != null) {
                data.partition_write_speed_bytes_per_second = this.partition_write_speed_bytes_per_second;
            }
            if (this.partition_write_burst_bytes != null) {
                data.partition_write_burst_bytes = this.partition_write_burst_bytes;
            }
            if (this.attributes != null) {
                data.attributes = (Object.fromEntries)(this.attributes);
            }
            if (this.consumers != null) {
                data.consumers = this.consumers.map((item: Consumer) => item.toObject());
            }
            if (this.metering_mode != null) {
                data.metering_mode = this.metering_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.has_partitioning_settings)
                writer.writeMessage(3, this.partitioning_settings, () => this.partitioning_settings.serialize(writer));
            if (this.has_retention_period)
                writer.writeMessage(4, this.retention_period, () => this.retention_period.serialize(writer));
            if (this.retention_storage_mb != 0)
                writer.writeInt64(5, this.retention_storage_mb);
            if (this.has_supported_codecs)
                writer.writeMessage(7, this.supported_codecs, () => this.supported_codecs.serialize(writer));
            if (this.partition_write_speed_bytes_per_second != 0)
                writer.writeInt64(8, this.partition_write_speed_bytes_per_second);
            if (this.partition_write_burst_bytes != 0)
                writer.writeInt64(9, this.partition_write_burst_bytes);
            for (const [key, value] of this.attributes) {
                writer.writeMessage(10, this.attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.consumers.length)
                writer.writeRepeatedMessage(11, this.consumers, (item: Consumer) => item.serialize(writer));
            if (this.metering_mode != MeteringMode.METERING_MODE_UNSPECIFIED)
                writer.writeEnum(12, this.metering_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTopicRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTopicRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.partitioning_settings, () => message.partitioning_settings = PartitioningSettings.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.retention_period, () => message.retention_period = dependency_7.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 5:
                        message.retention_storage_mb = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message.supported_codecs, () => message.supported_codecs = SupportedCodecs.deserialize(reader));
                        break;
                    case 8:
                        message.partition_write_speed_bytes_per_second = reader.readInt64();
                        break;
                    case 9:
                        message.partition_write_burst_bytes = reader.readInt64();
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 11:
                        reader.readMessage(message.consumers, () => pb_1.Message.addToRepeatedWrapperField(message, 11, Consumer.deserialize(reader), Consumer));
                        break;
                    case 12:
                        message.metering_mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTopicRequest {
            return CreateTopicRequest.deserialize(bytes);
        }
    }
    export class CreateTopicResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): CreateTopicResponse {
            const message = new CreateTopicResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTopicResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTopicResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTopicResponse {
            return CreateTopicResponse.deserialize(bytes);
        }
    }
    export class CreateTopicResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): CreateTopicResult {
            const message = new CreateTopicResult({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTopicResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTopicResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTopicResult {
            return CreateTopicResult.deserialize(bytes);
        }
    }
    export class DescribeTopicRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
            path?: string;
            include_stats?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("include_stats" in data && data.include_stats != undefined) {
                    this.include_stats = data.include_stats;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get include_stats() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set include_stats(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            path?: string;
            include_stats?: boolean;
        }): DescribeTopicRequest {
            const message = new DescribeTopicRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.include_stats != null) {
                message.include_stats = data.include_stats;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
                path?: string;
                include_stats?: boolean;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.include_stats != null) {
                data.include_stats = this.include_stats;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.include_stats != false)
                writer.writeBool(3, this.include_stats);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTopicRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTopicRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        message.include_stats = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTopicRequest {
            return DescribeTopicRequest.deserialize(bytes);
        }
    }
    export class DescribeTopicResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): DescribeTopicResponse {
            const message = new DescribeTopicResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTopicResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTopicResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTopicResponse {
            return DescribeTopicResponse.deserialize(bytes);
        }
    }
    export class DescribeTopicResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            self?: dependency_2.Ydb.Scheme.Entry;
            partitioning_settings?: PartitioningSettings;
            partitions?: DescribeTopicResult.PartitionInfo[];
            retention_period?: dependency_7.google.protobuf.Duration;
            retention_storage_mb?: number;
            supported_codecs?: SupportedCodecs;
            partition_write_speed_bytes_per_second?: number;
            partition_write_burst_bytes?: number;
            attributes?: Map<string, string>;
            consumers?: Consumer[];
            metering_mode?: MeteringMode;
            topic_stats?: DescribeTopicResult.TopicStats;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("self" in data && data.self != undefined) {
                    this.self = data.self;
                }
                if ("partitioning_settings" in data && data.partitioning_settings != undefined) {
                    this.partitioning_settings = data.partitioning_settings;
                }
                if ("partitions" in data && data.partitions != undefined) {
                    this.partitions = data.partitions;
                }
                if ("retention_period" in data && data.retention_period != undefined) {
                    this.retention_period = data.retention_period;
                }
                if ("retention_storage_mb" in data && data.retention_storage_mb != undefined) {
                    this.retention_storage_mb = data.retention_storage_mb;
                }
                if ("supported_codecs" in data && data.supported_codecs != undefined) {
                    this.supported_codecs = data.supported_codecs;
                }
                if ("partition_write_speed_bytes_per_second" in data && data.partition_write_speed_bytes_per_second != undefined) {
                    this.partition_write_speed_bytes_per_second = data.partition_write_speed_bytes_per_second;
                }
                if ("partition_write_burst_bytes" in data && data.partition_write_burst_bytes != undefined) {
                    this.partition_write_burst_bytes = data.partition_write_burst_bytes;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("consumers" in data && data.consumers != undefined) {
                    this.consumers = data.consumers;
                }
                if ("metering_mode" in data && data.metering_mode != undefined) {
                    this.metering_mode = data.metering_mode;
                }
                if ("topic_stats" in data && data.topic_stats != undefined) {
                    this.topic_stats = data.topic_stats;
                }
            }
            if (!this.attributes)
                this.attributes = new Map();
        }
        get self() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ydb.Scheme.Entry, 1) as dependency_2.Ydb.Scheme.Entry;
        }
        set self(value: dependency_2.Ydb.Scheme.Entry) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_self() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get partitioning_settings() {
            return pb_1.Message.getWrapperField(this, PartitioningSettings, 2) as PartitioningSettings;
        }
        set partitioning_settings(value: PartitioningSettings) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_partitioning_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get partitions() {
            return pb_1.Message.getRepeatedWrapperField(this, DescribeTopicResult.PartitionInfo, 3) as DescribeTopicResult.PartitionInfo[];
        }
        set partitions(value: DescribeTopicResult.PartitionInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get retention_period() {
            return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 4) as dependency_7.google.protobuf.Duration;
        }
        set retention_period(value: dependency_7.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_retention_period() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get retention_storage_mb() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set retention_storage_mb(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get supported_codecs() {
            return pb_1.Message.getWrapperField(this, SupportedCodecs, 7) as SupportedCodecs;
        }
        set supported_codecs(value: SupportedCodecs) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_supported_codecs() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get partition_write_speed_bytes_per_second() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set partition_write_speed_bytes_per_second(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get partition_write_burst_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set partition_write_burst_bytes(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get attributes() {
            return pb_1.Message.getField(this, 10) as any as Map<string, string>;
        }
        set attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        get consumers() {
            return pb_1.Message.getRepeatedWrapperField(this, Consumer, 11) as Consumer[];
        }
        set consumers(value: Consumer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get metering_mode() {
            return pb_1.Message.getFieldWithDefault(this, 12, MeteringMode.METERING_MODE_UNSPECIFIED) as MeteringMode;
        }
        set metering_mode(value: MeteringMode) {
            pb_1.Message.setField(this, 12, value);
        }
        get topic_stats() {
            return pb_1.Message.getWrapperField(this, DescribeTopicResult.TopicStats, 13) as DescribeTopicResult.TopicStats;
        }
        set topic_stats(value: DescribeTopicResult.TopicStats) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_topic_stats() {
            return pb_1.Message.getField(this, 13) != null;
        }
        static fromObject(data: {
            self?: ReturnType<typeof dependency_2.Ydb.Scheme.Entry.prototype.toObject>;
            partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
            partitions?: ReturnType<typeof DescribeTopicResult.PartitionInfo.prototype.toObject>[];
            retention_period?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
            retention_storage_mb?: number;
            supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
            partition_write_speed_bytes_per_second?: number;
            partition_write_burst_bytes?: number;
            attributes?: {
                [key: string]: string;
            };
            consumers?: ReturnType<typeof Consumer.prototype.toObject>[];
            metering_mode?: MeteringMode;
            topic_stats?: ReturnType<typeof DescribeTopicResult.TopicStats.prototype.toObject>;
        }): DescribeTopicResult {
            const message = new DescribeTopicResult({});
            if (data.self != null) {
                message.self = dependency_2.Ydb.Scheme.Entry.fromObject(data.self);
            }
            if (data.partitioning_settings != null) {
                message.partitioning_settings = PartitioningSettings.fromObject(data.partitioning_settings);
            }
            if (data.partitions != null) {
                message.partitions = data.partitions.map(item => DescribeTopicResult.PartitionInfo.fromObject(item));
            }
            if (data.retention_period != null) {
                message.retention_period = dependency_7.google.protobuf.Duration.fromObject(data.retention_period);
            }
            if (data.retention_storage_mb != null) {
                message.retention_storage_mb = data.retention_storage_mb;
            }
            if (data.supported_codecs != null) {
                message.supported_codecs = SupportedCodecs.fromObject(data.supported_codecs);
            }
            if (data.partition_write_speed_bytes_per_second != null) {
                message.partition_write_speed_bytes_per_second = data.partition_write_speed_bytes_per_second;
            }
            if (data.partition_write_burst_bytes != null) {
                message.partition_write_burst_bytes = data.partition_write_burst_bytes;
            }
            if (typeof data.attributes == "object") {
                message.attributes = new Map(Object.entries(data.attributes));
            }
            if (data.consumers != null) {
                message.consumers = data.consumers.map(item => Consumer.fromObject(item));
            }
            if (data.metering_mode != null) {
                message.metering_mode = data.metering_mode;
            }
            if (data.topic_stats != null) {
                message.topic_stats = DescribeTopicResult.TopicStats.fromObject(data.topic_stats);
            }
            return message;
        }
        toObject() {
            const data: {
                self?: ReturnType<typeof dependency_2.Ydb.Scheme.Entry.prototype.toObject>;
                partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
                partitions?: ReturnType<typeof DescribeTopicResult.PartitionInfo.prototype.toObject>[];
                retention_period?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                retention_storage_mb?: number;
                supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
                partition_write_speed_bytes_per_second?: number;
                partition_write_burst_bytes?: number;
                attributes?: {
                    [key: string]: string;
                };
                consumers?: ReturnType<typeof Consumer.prototype.toObject>[];
                metering_mode?: MeteringMode;
                topic_stats?: ReturnType<typeof DescribeTopicResult.TopicStats.prototype.toObject>;
            } = {};
            if (this.self != null) {
                data.self = this.self.toObject();
            }
            if (this.partitioning_settings != null) {
                data.partitioning_settings = this.partitioning_settings.toObject();
            }
            if (this.partitions != null) {
                data.partitions = this.partitions.map((item: DescribeTopicResult.PartitionInfo) => item.toObject());
            }
            if (this.retention_period != null) {
                data.retention_period = this.retention_period.toObject();
            }
            if (this.retention_storage_mb != null) {
                data.retention_storage_mb = this.retention_storage_mb;
            }
            if (this.supported_codecs != null) {
                data.supported_codecs = this.supported_codecs.toObject();
            }
            if (this.partition_write_speed_bytes_per_second != null) {
                data.partition_write_speed_bytes_per_second = this.partition_write_speed_bytes_per_second;
            }
            if (this.partition_write_burst_bytes != null) {
                data.partition_write_burst_bytes = this.partition_write_burst_bytes;
            }
            if (this.attributes != null) {
                data.attributes = (Object.fromEntries)(this.attributes);
            }
            if (this.consumers != null) {
                data.consumers = this.consumers.map((item: Consumer) => item.toObject());
            }
            if (this.metering_mode != null) {
                data.metering_mode = this.metering_mode;
            }
            if (this.topic_stats != null) {
                data.topic_stats = this.topic_stats.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_self)
                writer.writeMessage(1, this.self, () => this.self.serialize(writer));
            if (this.has_partitioning_settings)
                writer.writeMessage(2, this.partitioning_settings, () => this.partitioning_settings.serialize(writer));
            if (this.partitions.length)
                writer.writeRepeatedMessage(3, this.partitions, (item: DescribeTopicResult.PartitionInfo) => item.serialize(writer));
            if (this.has_retention_period)
                writer.writeMessage(4, this.retention_period, () => this.retention_period.serialize(writer));
            if (this.retention_storage_mb != 0)
                writer.writeInt64(5, this.retention_storage_mb);
            if (this.has_supported_codecs)
                writer.writeMessage(7, this.supported_codecs, () => this.supported_codecs.serialize(writer));
            if (this.partition_write_speed_bytes_per_second != 0)
                writer.writeInt64(8, this.partition_write_speed_bytes_per_second);
            if (this.partition_write_burst_bytes != 0)
                writer.writeInt64(9, this.partition_write_burst_bytes);
            for (const [key, value] of this.attributes) {
                writer.writeMessage(10, this.attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.consumers.length)
                writer.writeRepeatedMessage(11, this.consumers, (item: Consumer) => item.serialize(writer));
            if (this.metering_mode != MeteringMode.METERING_MODE_UNSPECIFIED)
                writer.writeEnum(12, this.metering_mode);
            if (this.has_topic_stats)
                writer.writeMessage(13, this.topic_stats, () => this.topic_stats.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTopicResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTopicResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.self, () => message.self = dependency_2.Ydb.Scheme.Entry.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.partitioning_settings, () => message.partitioning_settings = PartitioningSettings.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.partitions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, DescribeTopicResult.PartitionInfo.deserialize(reader), DescribeTopicResult.PartitionInfo));
                        break;
                    case 4:
                        reader.readMessage(message.retention_period, () => message.retention_period = dependency_7.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 5:
                        message.retention_storage_mb = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message.supported_codecs, () => message.supported_codecs = SupportedCodecs.deserialize(reader));
                        break;
                    case 8:
                        message.partition_write_speed_bytes_per_second = reader.readInt64();
                        break;
                    case 9:
                        message.partition_write_burst_bytes = reader.readInt64();
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 11:
                        reader.readMessage(message.consumers, () => pb_1.Message.addToRepeatedWrapperField(message, 11, Consumer.deserialize(reader), Consumer));
                        break;
                    case 12:
                        message.metering_mode = reader.readEnum();
                        break;
                    case 13:
                        reader.readMessage(message.topic_stats, () => message.topic_stats = DescribeTopicResult.TopicStats.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTopicResult {
            return DescribeTopicResult.deserialize(bytes);
        }
    }
    export namespace DescribeTopicResult {
        export class PartitionInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_id?: number;
                active?: boolean;
                child_partition_ids?: number[];
                parent_partition_ids?: number[];
                partition_stats?: PartitionStats;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_id" in data && data.partition_id != undefined) {
                        this.partition_id = data.partition_id;
                    }
                    if ("active" in data && data.active != undefined) {
                        this.active = data.active;
                    }
                    if ("child_partition_ids" in data && data.child_partition_ids != undefined) {
                        this.child_partition_ids = data.child_partition_ids;
                    }
                    if ("parent_partition_ids" in data && data.parent_partition_ids != undefined) {
                        this.parent_partition_ids = data.parent_partition_ids;
                    }
                    if ("partition_stats" in data && data.partition_stats != undefined) {
                        this.partition_stats = data.partition_stats;
                    }
                }
            }
            get partition_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set partition_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get active() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set active(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get child_partition_ids() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
            }
            set child_partition_ids(value: number[]) {
                pb_1.Message.setField(this, 3, value);
            }
            get parent_partition_ids() {
                return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
            }
            set parent_partition_ids(value: number[]) {
                pb_1.Message.setField(this, 4, value);
            }
            get partition_stats() {
                return pb_1.Message.getWrapperField(this, PartitionStats, 5) as PartitionStats;
            }
            set partition_stats(value: PartitionStats) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_partition_stats() {
                return pb_1.Message.getField(this, 5) != null;
            }
            static fromObject(data: {
                partition_id?: number;
                active?: boolean;
                child_partition_ids?: number[];
                parent_partition_ids?: number[];
                partition_stats?: ReturnType<typeof PartitionStats.prototype.toObject>;
            }): PartitionInfo {
                const message = new PartitionInfo({});
                if (data.partition_id != null) {
                    message.partition_id = data.partition_id;
                }
                if (data.active != null) {
                    message.active = data.active;
                }
                if (data.child_partition_ids != null) {
                    message.child_partition_ids = data.child_partition_ids;
                }
                if (data.parent_partition_ids != null) {
                    message.parent_partition_ids = data.parent_partition_ids;
                }
                if (data.partition_stats != null) {
                    message.partition_stats = PartitionStats.fromObject(data.partition_stats);
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_id?: number;
                    active?: boolean;
                    child_partition_ids?: number[];
                    parent_partition_ids?: number[];
                    partition_stats?: ReturnType<typeof PartitionStats.prototype.toObject>;
                } = {};
                if (this.partition_id != null) {
                    data.partition_id = this.partition_id;
                }
                if (this.active != null) {
                    data.active = this.active;
                }
                if (this.child_partition_ids != null) {
                    data.child_partition_ids = this.child_partition_ids;
                }
                if (this.parent_partition_ids != null) {
                    data.parent_partition_ids = this.parent_partition_ids;
                }
                if (this.partition_stats != null) {
                    data.partition_stats = this.partition_stats.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_id != 0)
                    writer.writeInt64(1, this.partition_id);
                if (this.active != false)
                    writer.writeBool(2, this.active);
                if (this.child_partition_ids.length)
                    writer.writePackedInt64(3, this.child_partition_ids);
                if (this.parent_partition_ids.length)
                    writer.writePackedInt64(4, this.parent_partition_ids);
                if (this.has_partition_stats)
                    writer.writeMessage(5, this.partition_stats, () => this.partition_stats.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.partition_id = reader.readInt64();
                            break;
                        case 2:
                            message.active = reader.readBool();
                            break;
                        case 3:
                            message.child_partition_ids = reader.readPackedInt64();
                            break;
                        case 4:
                            message.parent_partition_ids = reader.readPackedInt64();
                            break;
                        case 5:
                            reader.readMessage(message.partition_stats, () => message.partition_stats = PartitionStats.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PartitionInfo {
                return PartitionInfo.deserialize(bytes);
            }
        }
        export class TopicStats extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                store_size_bytes?: number;
                min_last_write_time?: dependency_8.google.protobuf.Timestamp;
                max_write_time_lag?: dependency_7.google.protobuf.Duration;
                bytes_written?: MultipleWindowsStat;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("store_size_bytes" in data && data.store_size_bytes != undefined) {
                        this.store_size_bytes = data.store_size_bytes;
                    }
                    if ("min_last_write_time" in data && data.min_last_write_time != undefined) {
                        this.min_last_write_time = data.min_last_write_time;
                    }
                    if ("max_write_time_lag" in data && data.max_write_time_lag != undefined) {
                        this.max_write_time_lag = data.max_write_time_lag;
                    }
                    if ("bytes_written" in data && data.bytes_written != undefined) {
                        this.bytes_written = data.bytes_written;
                    }
                }
            }
            get store_size_bytes() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set store_size_bytes(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get min_last_write_time() {
                return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 2) as dependency_8.google.protobuf.Timestamp;
            }
            set min_last_write_time(value: dependency_8.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_min_last_write_time() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get max_write_time_lag() {
                return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 3) as dependency_7.google.protobuf.Duration;
            }
            set max_write_time_lag(value: dependency_7.google.protobuf.Duration) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_max_write_time_lag() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get bytes_written() {
                return pb_1.Message.getWrapperField(this, MultipleWindowsStat, 4) as MultipleWindowsStat;
            }
            set bytes_written(value: MultipleWindowsStat) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_bytes_written() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                store_size_bytes?: number;
                min_last_write_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                max_write_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                bytes_written?: ReturnType<typeof MultipleWindowsStat.prototype.toObject>;
            }): TopicStats {
                const message = new TopicStats({});
                if (data.store_size_bytes != null) {
                    message.store_size_bytes = data.store_size_bytes;
                }
                if (data.min_last_write_time != null) {
                    message.min_last_write_time = dependency_8.google.protobuf.Timestamp.fromObject(data.min_last_write_time);
                }
                if (data.max_write_time_lag != null) {
                    message.max_write_time_lag = dependency_7.google.protobuf.Duration.fromObject(data.max_write_time_lag);
                }
                if (data.bytes_written != null) {
                    message.bytes_written = MultipleWindowsStat.fromObject(data.bytes_written);
                }
                return message;
            }
            toObject() {
                const data: {
                    store_size_bytes?: number;
                    min_last_write_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                    max_write_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    bytes_written?: ReturnType<typeof MultipleWindowsStat.prototype.toObject>;
                } = {};
                if (this.store_size_bytes != null) {
                    data.store_size_bytes = this.store_size_bytes;
                }
                if (this.min_last_write_time != null) {
                    data.min_last_write_time = this.min_last_write_time.toObject();
                }
                if (this.max_write_time_lag != null) {
                    data.max_write_time_lag = this.max_write_time_lag.toObject();
                }
                if (this.bytes_written != null) {
                    data.bytes_written = this.bytes_written.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.store_size_bytes != 0)
                    writer.writeInt64(1, this.store_size_bytes);
                if (this.has_min_last_write_time)
                    writer.writeMessage(2, this.min_last_write_time, () => this.min_last_write_time.serialize(writer));
                if (this.has_max_write_time_lag)
                    writer.writeMessage(3, this.max_write_time_lag, () => this.max_write_time_lag.serialize(writer));
                if (this.has_bytes_written)
                    writer.writeMessage(4, this.bytes_written, () => this.bytes_written.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TopicStats {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TopicStats();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.store_size_bytes = reader.readInt64();
                            break;
                        case 2:
                            reader.readMessage(message.min_last_write_time, () => message.min_last_write_time = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.max_write_time_lag, () => message.max_write_time_lag = dependency_7.google.protobuf.Duration.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.bytes_written, () => message.bytes_written = MultipleWindowsStat.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TopicStats {
                return TopicStats.deserialize(bytes);
            }
        }
    }
    export class DescribeConsumerRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
            path?: string;
            consumer?: string;
            include_stats?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("consumer" in data && data.consumer != undefined) {
                    this.consumer = data.consumer;
                }
                if ("include_stats" in data && data.include_stats != undefined) {
                    this.include_stats = data.include_stats;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get consumer() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set consumer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get include_stats() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set include_stats(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            path?: string;
            consumer?: string;
            include_stats?: boolean;
        }): DescribeConsumerRequest {
            const message = new DescribeConsumerRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.consumer != null) {
                message.consumer = data.consumer;
            }
            if (data.include_stats != null) {
                message.include_stats = data.include_stats;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
                path?: string;
                consumer?: string;
                include_stats?: boolean;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.consumer != null) {
                data.consumer = this.consumer;
            }
            if (this.include_stats != null) {
                data.include_stats = this.include_stats;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.consumer.length)
                writer.writeString(3, this.consumer);
            if (this.include_stats != false)
                writer.writeBool(4, this.include_stats);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeConsumerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeConsumerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        message.consumer = reader.readString();
                        break;
                    case 4:
                        message.include_stats = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeConsumerRequest {
            return DescribeConsumerRequest.deserialize(bytes);
        }
    }
    export class DescribeConsumerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): DescribeConsumerResponse {
            const message = new DescribeConsumerResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeConsumerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeConsumerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeConsumerResponse {
            return DescribeConsumerResponse.deserialize(bytes);
        }
    }
    export class DescribeConsumerResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            self?: dependency_2.Ydb.Scheme.Entry;
            consumer?: Consumer;
            partitions?: DescribeConsumerResult.PartitionInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("self" in data && data.self != undefined) {
                    this.self = data.self;
                }
                if ("consumer" in data && data.consumer != undefined) {
                    this.consumer = data.consumer;
                }
                if ("partitions" in data && data.partitions != undefined) {
                    this.partitions = data.partitions;
                }
            }
        }
        get self() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ydb.Scheme.Entry, 1) as dependency_2.Ydb.Scheme.Entry;
        }
        set self(value: dependency_2.Ydb.Scheme.Entry) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_self() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get consumer() {
            return pb_1.Message.getWrapperField(this, Consumer, 2) as Consumer;
        }
        set consumer(value: Consumer) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_consumer() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get partitions() {
            return pb_1.Message.getRepeatedWrapperField(this, DescribeConsumerResult.PartitionInfo, 3) as DescribeConsumerResult.PartitionInfo[];
        }
        set partitions(value: DescribeConsumerResult.PartitionInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            self?: ReturnType<typeof dependency_2.Ydb.Scheme.Entry.prototype.toObject>;
            consumer?: ReturnType<typeof Consumer.prototype.toObject>;
            partitions?: ReturnType<typeof DescribeConsumerResult.PartitionInfo.prototype.toObject>[];
        }): DescribeConsumerResult {
            const message = new DescribeConsumerResult({});
            if (data.self != null) {
                message.self = dependency_2.Ydb.Scheme.Entry.fromObject(data.self);
            }
            if (data.consumer != null) {
                message.consumer = Consumer.fromObject(data.consumer);
            }
            if (data.partitions != null) {
                message.partitions = data.partitions.map(item => DescribeConsumerResult.PartitionInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                self?: ReturnType<typeof dependency_2.Ydb.Scheme.Entry.prototype.toObject>;
                consumer?: ReturnType<typeof Consumer.prototype.toObject>;
                partitions?: ReturnType<typeof DescribeConsumerResult.PartitionInfo.prototype.toObject>[];
            } = {};
            if (this.self != null) {
                data.self = this.self.toObject();
            }
            if (this.consumer != null) {
                data.consumer = this.consumer.toObject();
            }
            if (this.partitions != null) {
                data.partitions = this.partitions.map((item: DescribeConsumerResult.PartitionInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_self)
                writer.writeMessage(1, this.self, () => this.self.serialize(writer));
            if (this.has_consumer)
                writer.writeMessage(2, this.consumer, () => this.consumer.serialize(writer));
            if (this.partitions.length)
                writer.writeRepeatedMessage(3, this.partitions, (item: DescribeConsumerResult.PartitionInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeConsumerResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeConsumerResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.self, () => message.self = dependency_2.Ydb.Scheme.Entry.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.consumer, () => message.consumer = Consumer.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.partitions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, DescribeConsumerResult.PartitionInfo.deserialize(reader), DescribeConsumerResult.PartitionInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeConsumerResult {
            return DescribeConsumerResult.deserialize(bytes);
        }
    }
    export namespace DescribeConsumerResult {
        export class PartitionInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                partition_id?: number;
                active?: boolean;
                child_partition_ids?: number[];
                parent_partition_ids?: number[];
                partition_stats?: PartitionStats;
                partition_consumer_stats?: DescribeConsumerResult.PartitionConsumerStats;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("partition_id" in data && data.partition_id != undefined) {
                        this.partition_id = data.partition_id;
                    }
                    if ("active" in data && data.active != undefined) {
                        this.active = data.active;
                    }
                    if ("child_partition_ids" in data && data.child_partition_ids != undefined) {
                        this.child_partition_ids = data.child_partition_ids;
                    }
                    if ("parent_partition_ids" in data && data.parent_partition_ids != undefined) {
                        this.parent_partition_ids = data.parent_partition_ids;
                    }
                    if ("partition_stats" in data && data.partition_stats != undefined) {
                        this.partition_stats = data.partition_stats;
                    }
                    if ("partition_consumer_stats" in data && data.partition_consumer_stats != undefined) {
                        this.partition_consumer_stats = data.partition_consumer_stats;
                    }
                }
            }
            get partition_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set partition_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get active() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set active(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get child_partition_ids() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
            }
            set child_partition_ids(value: number[]) {
                pb_1.Message.setField(this, 3, value);
            }
            get parent_partition_ids() {
                return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
            }
            set parent_partition_ids(value: number[]) {
                pb_1.Message.setField(this, 4, value);
            }
            get partition_stats() {
                return pb_1.Message.getWrapperField(this, PartitionStats, 5) as PartitionStats;
            }
            set partition_stats(value: PartitionStats) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_partition_stats() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get partition_consumer_stats() {
                return pb_1.Message.getWrapperField(this, DescribeConsumerResult.PartitionConsumerStats, 6) as DescribeConsumerResult.PartitionConsumerStats;
            }
            set partition_consumer_stats(value: DescribeConsumerResult.PartitionConsumerStats) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_partition_consumer_stats() {
                return pb_1.Message.getField(this, 6) != null;
            }
            static fromObject(data: {
                partition_id?: number;
                active?: boolean;
                child_partition_ids?: number[];
                parent_partition_ids?: number[];
                partition_stats?: ReturnType<typeof PartitionStats.prototype.toObject>;
                partition_consumer_stats?: ReturnType<typeof DescribeConsumerResult.PartitionConsumerStats.prototype.toObject>;
            }): PartitionInfo {
                const message = new PartitionInfo({});
                if (data.partition_id != null) {
                    message.partition_id = data.partition_id;
                }
                if (data.active != null) {
                    message.active = data.active;
                }
                if (data.child_partition_ids != null) {
                    message.child_partition_ids = data.child_partition_ids;
                }
                if (data.parent_partition_ids != null) {
                    message.parent_partition_ids = data.parent_partition_ids;
                }
                if (data.partition_stats != null) {
                    message.partition_stats = PartitionStats.fromObject(data.partition_stats);
                }
                if (data.partition_consumer_stats != null) {
                    message.partition_consumer_stats = DescribeConsumerResult.PartitionConsumerStats.fromObject(data.partition_consumer_stats);
                }
                return message;
            }
            toObject() {
                const data: {
                    partition_id?: number;
                    active?: boolean;
                    child_partition_ids?: number[];
                    parent_partition_ids?: number[];
                    partition_stats?: ReturnType<typeof PartitionStats.prototype.toObject>;
                    partition_consumer_stats?: ReturnType<typeof DescribeConsumerResult.PartitionConsumerStats.prototype.toObject>;
                } = {};
                if (this.partition_id != null) {
                    data.partition_id = this.partition_id;
                }
                if (this.active != null) {
                    data.active = this.active;
                }
                if (this.child_partition_ids != null) {
                    data.child_partition_ids = this.child_partition_ids;
                }
                if (this.parent_partition_ids != null) {
                    data.parent_partition_ids = this.parent_partition_ids;
                }
                if (this.partition_stats != null) {
                    data.partition_stats = this.partition_stats.toObject();
                }
                if (this.partition_consumer_stats != null) {
                    data.partition_consumer_stats = this.partition_consumer_stats.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.partition_id != 0)
                    writer.writeInt64(1, this.partition_id);
                if (this.active != false)
                    writer.writeBool(2, this.active);
                if (this.child_partition_ids.length)
                    writer.writePackedInt64(3, this.child_partition_ids);
                if (this.parent_partition_ids.length)
                    writer.writePackedInt64(4, this.parent_partition_ids);
                if (this.has_partition_stats)
                    writer.writeMessage(5, this.partition_stats, () => this.partition_stats.serialize(writer));
                if (this.has_partition_consumer_stats)
                    writer.writeMessage(6, this.partition_consumer_stats, () => this.partition_consumer_stats.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.partition_id = reader.readInt64();
                            break;
                        case 2:
                            message.active = reader.readBool();
                            break;
                        case 3:
                            message.child_partition_ids = reader.readPackedInt64();
                            break;
                        case 4:
                            message.parent_partition_ids = reader.readPackedInt64();
                            break;
                        case 5:
                            reader.readMessage(message.partition_stats, () => message.partition_stats = PartitionStats.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.partition_consumer_stats, () => message.partition_consumer_stats = DescribeConsumerResult.PartitionConsumerStats.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PartitionInfo {
                return PartitionInfo.deserialize(bytes);
            }
        }
        export class PartitionConsumerStats extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                last_read_offset?: number;
                committed_offset?: number;
                read_session_id?: string;
                partition_read_session_create_time?: dependency_8.google.protobuf.Timestamp;
                last_read_time?: dependency_8.google.protobuf.Timestamp;
                max_read_time_lag?: dependency_7.google.protobuf.Duration;
                max_write_time_lag?: dependency_7.google.protobuf.Duration;
                bytes_read?: MultipleWindowsStat;
                reader_name?: string;
                connection_node_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("last_read_offset" in data && data.last_read_offset != undefined) {
                        this.last_read_offset = data.last_read_offset;
                    }
                    if ("committed_offset" in data && data.committed_offset != undefined) {
                        this.committed_offset = data.committed_offset;
                    }
                    if ("read_session_id" in data && data.read_session_id != undefined) {
                        this.read_session_id = data.read_session_id;
                    }
                    if ("partition_read_session_create_time" in data && data.partition_read_session_create_time != undefined) {
                        this.partition_read_session_create_time = data.partition_read_session_create_time;
                    }
                    if ("last_read_time" in data && data.last_read_time != undefined) {
                        this.last_read_time = data.last_read_time;
                    }
                    if ("max_read_time_lag" in data && data.max_read_time_lag != undefined) {
                        this.max_read_time_lag = data.max_read_time_lag;
                    }
                    if ("max_write_time_lag" in data && data.max_write_time_lag != undefined) {
                        this.max_write_time_lag = data.max_write_time_lag;
                    }
                    if ("bytes_read" in data && data.bytes_read != undefined) {
                        this.bytes_read = data.bytes_read;
                    }
                    if ("reader_name" in data && data.reader_name != undefined) {
                        this.reader_name = data.reader_name;
                    }
                    if ("connection_node_id" in data && data.connection_node_id != undefined) {
                        this.connection_node_id = data.connection_node_id;
                    }
                }
            }
            get last_read_offset() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set last_read_offset(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get committed_offset() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set committed_offset(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get read_session_id() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set read_session_id(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get partition_read_session_create_time() {
                return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 4) as dependency_8.google.protobuf.Timestamp;
            }
            set partition_read_session_create_time(value: dependency_8.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_partition_read_session_create_time() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get last_read_time() {
                return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 5) as dependency_8.google.protobuf.Timestamp;
            }
            set last_read_time(value: dependency_8.google.protobuf.Timestamp) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_last_read_time() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get max_read_time_lag() {
                return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 6) as dependency_7.google.protobuf.Duration;
            }
            set max_read_time_lag(value: dependency_7.google.protobuf.Duration) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_max_read_time_lag() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get max_write_time_lag() {
                return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 7) as dependency_7.google.protobuf.Duration;
            }
            set max_write_time_lag(value: dependency_7.google.protobuf.Duration) {
                pb_1.Message.setWrapperField(this, 7, value);
            }
            get has_max_write_time_lag() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get bytes_read() {
                return pb_1.Message.getWrapperField(this, MultipleWindowsStat, 8) as MultipleWindowsStat;
            }
            set bytes_read(value: MultipleWindowsStat) {
                pb_1.Message.setWrapperField(this, 8, value);
            }
            get has_bytes_read() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get reader_name() {
                return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
            }
            set reader_name(value: string) {
                pb_1.Message.setField(this, 11, value);
            }
            get connection_node_id() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set connection_node_id(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            static fromObject(data: {
                last_read_offset?: number;
                committed_offset?: number;
                read_session_id?: string;
                partition_read_session_create_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                last_read_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                max_read_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                max_write_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                bytes_read?: ReturnType<typeof MultipleWindowsStat.prototype.toObject>;
                reader_name?: string;
                connection_node_id?: number;
            }): PartitionConsumerStats {
                const message = new PartitionConsumerStats({});
                if (data.last_read_offset != null) {
                    message.last_read_offset = data.last_read_offset;
                }
                if (data.committed_offset != null) {
                    message.committed_offset = data.committed_offset;
                }
                if (data.read_session_id != null) {
                    message.read_session_id = data.read_session_id;
                }
                if (data.partition_read_session_create_time != null) {
                    message.partition_read_session_create_time = dependency_8.google.protobuf.Timestamp.fromObject(data.partition_read_session_create_time);
                }
                if (data.last_read_time != null) {
                    message.last_read_time = dependency_8.google.protobuf.Timestamp.fromObject(data.last_read_time);
                }
                if (data.max_read_time_lag != null) {
                    message.max_read_time_lag = dependency_7.google.protobuf.Duration.fromObject(data.max_read_time_lag);
                }
                if (data.max_write_time_lag != null) {
                    message.max_write_time_lag = dependency_7.google.protobuf.Duration.fromObject(data.max_write_time_lag);
                }
                if (data.bytes_read != null) {
                    message.bytes_read = MultipleWindowsStat.fromObject(data.bytes_read);
                }
                if (data.reader_name != null) {
                    message.reader_name = data.reader_name;
                }
                if (data.connection_node_id != null) {
                    message.connection_node_id = data.connection_node_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    last_read_offset?: number;
                    committed_offset?: number;
                    read_session_id?: string;
                    partition_read_session_create_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                    last_read_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                    max_read_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    max_write_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                    bytes_read?: ReturnType<typeof MultipleWindowsStat.prototype.toObject>;
                    reader_name?: string;
                    connection_node_id?: number;
                } = {};
                if (this.last_read_offset != null) {
                    data.last_read_offset = this.last_read_offset;
                }
                if (this.committed_offset != null) {
                    data.committed_offset = this.committed_offset;
                }
                if (this.read_session_id != null) {
                    data.read_session_id = this.read_session_id;
                }
                if (this.partition_read_session_create_time != null) {
                    data.partition_read_session_create_time = this.partition_read_session_create_time.toObject();
                }
                if (this.last_read_time != null) {
                    data.last_read_time = this.last_read_time.toObject();
                }
                if (this.max_read_time_lag != null) {
                    data.max_read_time_lag = this.max_read_time_lag.toObject();
                }
                if (this.max_write_time_lag != null) {
                    data.max_write_time_lag = this.max_write_time_lag.toObject();
                }
                if (this.bytes_read != null) {
                    data.bytes_read = this.bytes_read.toObject();
                }
                if (this.reader_name != null) {
                    data.reader_name = this.reader_name;
                }
                if (this.connection_node_id != null) {
                    data.connection_node_id = this.connection_node_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.last_read_offset != 0)
                    writer.writeInt64(1, this.last_read_offset);
                if (this.committed_offset != 0)
                    writer.writeInt64(2, this.committed_offset);
                if (this.read_session_id.length)
                    writer.writeString(3, this.read_session_id);
                if (this.has_partition_read_session_create_time)
                    writer.writeMessage(4, this.partition_read_session_create_time, () => this.partition_read_session_create_time.serialize(writer));
                if (this.has_last_read_time)
                    writer.writeMessage(5, this.last_read_time, () => this.last_read_time.serialize(writer));
                if (this.has_max_read_time_lag)
                    writer.writeMessage(6, this.max_read_time_lag, () => this.max_read_time_lag.serialize(writer));
                if (this.has_max_write_time_lag)
                    writer.writeMessage(7, this.max_write_time_lag, () => this.max_write_time_lag.serialize(writer));
                if (this.has_bytes_read)
                    writer.writeMessage(8, this.bytes_read, () => this.bytes_read.serialize(writer));
                if (this.reader_name.length)
                    writer.writeString(11, this.reader_name);
                if (this.connection_node_id != 0)
                    writer.writeInt32(12, this.connection_node_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionConsumerStats {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionConsumerStats();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.last_read_offset = reader.readInt64();
                            break;
                        case 2:
                            message.committed_offset = reader.readInt64();
                            break;
                        case 3:
                            message.read_session_id = reader.readString();
                            break;
                        case 4:
                            reader.readMessage(message.partition_read_session_create_time, () => message.partition_read_session_create_time = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.last_read_time, () => message.last_read_time = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.max_read_time_lag, () => message.max_read_time_lag = dependency_7.google.protobuf.Duration.deserialize(reader));
                            break;
                        case 7:
                            reader.readMessage(message.max_write_time_lag, () => message.max_write_time_lag = dependency_7.google.protobuf.Duration.deserialize(reader));
                            break;
                        case 8:
                            reader.readMessage(message.bytes_read, () => message.bytes_read = MultipleWindowsStat.deserialize(reader));
                            break;
                        case 11:
                            message.reader_name = reader.readString();
                            break;
                        case 12:
                            message.connection_node_id = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PartitionConsumerStats {
                return PartitionConsumerStats.deserialize(bytes);
            }
        }
    }
    export class PartitionStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            partition_offsets?: OffsetsRange;
            store_size_bytes?: number;
            last_write_time?: dependency_8.google.protobuf.Timestamp;
            max_write_time_lag?: dependency_7.google.protobuf.Duration;
            bytes_written?: MultipleWindowsStat;
            partition_node_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("partition_offsets" in data && data.partition_offsets != undefined) {
                    this.partition_offsets = data.partition_offsets;
                }
                if ("store_size_bytes" in data && data.store_size_bytes != undefined) {
                    this.store_size_bytes = data.store_size_bytes;
                }
                if ("last_write_time" in data && data.last_write_time != undefined) {
                    this.last_write_time = data.last_write_time;
                }
                if ("max_write_time_lag" in data && data.max_write_time_lag != undefined) {
                    this.max_write_time_lag = data.max_write_time_lag;
                }
                if ("bytes_written" in data && data.bytes_written != undefined) {
                    this.bytes_written = data.bytes_written;
                }
                if ("partition_node_id" in data && data.partition_node_id != undefined) {
                    this.partition_node_id = data.partition_node_id;
                }
            }
        }
        get partition_offsets() {
            return pb_1.Message.getWrapperField(this, OffsetsRange, 1) as OffsetsRange;
        }
        set partition_offsets(value: OffsetsRange) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_partition_offsets() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get store_size_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set store_size_bytes(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get last_write_time() {
            return pb_1.Message.getWrapperField(this, dependency_8.google.protobuf.Timestamp, 3) as dependency_8.google.protobuf.Timestamp;
        }
        set last_write_time(value: dependency_8.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_last_write_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get max_write_time_lag() {
            return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 4) as dependency_7.google.protobuf.Duration;
        }
        set max_write_time_lag(value: dependency_7.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_max_write_time_lag() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get bytes_written() {
            return pb_1.Message.getWrapperField(this, MultipleWindowsStat, 5) as MultipleWindowsStat;
        }
        set bytes_written(value: MultipleWindowsStat) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_bytes_written() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get partition_node_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set partition_node_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            partition_offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>;
            store_size_bytes?: number;
            last_write_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
            max_write_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
            bytes_written?: ReturnType<typeof MultipleWindowsStat.prototype.toObject>;
            partition_node_id?: number;
        }): PartitionStats {
            const message = new PartitionStats({});
            if (data.partition_offsets != null) {
                message.partition_offsets = OffsetsRange.fromObject(data.partition_offsets);
            }
            if (data.store_size_bytes != null) {
                message.store_size_bytes = data.store_size_bytes;
            }
            if (data.last_write_time != null) {
                message.last_write_time = dependency_8.google.protobuf.Timestamp.fromObject(data.last_write_time);
            }
            if (data.max_write_time_lag != null) {
                message.max_write_time_lag = dependency_7.google.protobuf.Duration.fromObject(data.max_write_time_lag);
            }
            if (data.bytes_written != null) {
                message.bytes_written = MultipleWindowsStat.fromObject(data.bytes_written);
            }
            if (data.partition_node_id != null) {
                message.partition_node_id = data.partition_node_id;
            }
            return message;
        }
        toObject() {
            const data: {
                partition_offsets?: ReturnType<typeof OffsetsRange.prototype.toObject>;
                store_size_bytes?: number;
                last_write_time?: ReturnType<typeof dependency_8.google.protobuf.Timestamp.prototype.toObject>;
                max_write_time_lag?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                bytes_written?: ReturnType<typeof MultipleWindowsStat.prototype.toObject>;
                partition_node_id?: number;
            } = {};
            if (this.partition_offsets != null) {
                data.partition_offsets = this.partition_offsets.toObject();
            }
            if (this.store_size_bytes != null) {
                data.store_size_bytes = this.store_size_bytes;
            }
            if (this.last_write_time != null) {
                data.last_write_time = this.last_write_time.toObject();
            }
            if (this.max_write_time_lag != null) {
                data.max_write_time_lag = this.max_write_time_lag.toObject();
            }
            if (this.bytes_written != null) {
                data.bytes_written = this.bytes_written.toObject();
            }
            if (this.partition_node_id != null) {
                data.partition_node_id = this.partition_node_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_partition_offsets)
                writer.writeMessage(1, this.partition_offsets, () => this.partition_offsets.serialize(writer));
            if (this.store_size_bytes != 0)
                writer.writeInt64(2, this.store_size_bytes);
            if (this.has_last_write_time)
                writer.writeMessage(3, this.last_write_time, () => this.last_write_time.serialize(writer));
            if (this.has_max_write_time_lag)
                writer.writeMessage(4, this.max_write_time_lag, () => this.max_write_time_lag.serialize(writer));
            if (this.has_bytes_written)
                writer.writeMessage(5, this.bytes_written, () => this.bytes_written.serialize(writer));
            if (this.partition_node_id != 0)
                writer.writeInt32(8, this.partition_node_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.partition_offsets, () => message.partition_offsets = OffsetsRange.deserialize(reader));
                        break;
                    case 2:
                        message.store_size_bytes = reader.readInt64();
                        break;
                    case 3:
                        reader.readMessage(message.last_write_time, () => message.last_write_time = dependency_8.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.max_write_time_lag, () => message.max_write_time_lag = dependency_7.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.bytes_written, () => message.bytes_written = MultipleWindowsStat.deserialize(reader));
                        break;
                    case 8:
                        message.partition_node_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PartitionStats {
            return PartitionStats.deserialize(bytes);
        }
    }
    export class AlterTopicRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[5], [8], [9]];
        constructor(data?: any[] | ({
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
            path?: string;
            alter_partitioning_settings?: AlterPartitioningSettings;
            set_retention_period?: dependency_7.google.protobuf.Duration;
            set_supported_codecs?: SupportedCodecs;
            alter_attributes?: Map<string, string>;
            add_consumers?: Consumer[];
            drop_consumers?: string[];
            alter_consumers?: AlterConsumer[];
            set_metering_mode?: MeteringMode;
        } & (({
            set_retention_storage_mb?: number;
        }) | ({
            set_partition_write_speed_bytes_per_second?: number;
        }) | ({
            set_partition_write_burst_bytes?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11, 12, 13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("alter_partitioning_settings" in data && data.alter_partitioning_settings != undefined) {
                    this.alter_partitioning_settings = data.alter_partitioning_settings;
                }
                if ("set_retention_period" in data && data.set_retention_period != undefined) {
                    this.set_retention_period = data.set_retention_period;
                }
                if ("set_retention_storage_mb" in data && data.set_retention_storage_mb != undefined) {
                    this.set_retention_storage_mb = data.set_retention_storage_mb;
                }
                if ("set_supported_codecs" in data && data.set_supported_codecs != undefined) {
                    this.set_supported_codecs = data.set_supported_codecs;
                }
                if ("set_partition_write_speed_bytes_per_second" in data && data.set_partition_write_speed_bytes_per_second != undefined) {
                    this.set_partition_write_speed_bytes_per_second = data.set_partition_write_speed_bytes_per_second;
                }
                if ("set_partition_write_burst_bytes" in data && data.set_partition_write_burst_bytes != undefined) {
                    this.set_partition_write_burst_bytes = data.set_partition_write_burst_bytes;
                }
                if ("alter_attributes" in data && data.alter_attributes != undefined) {
                    this.alter_attributes = data.alter_attributes;
                }
                if ("add_consumers" in data && data.add_consumers != undefined) {
                    this.add_consumers = data.add_consumers;
                }
                if ("drop_consumers" in data && data.drop_consumers != undefined) {
                    this.drop_consumers = data.drop_consumers;
                }
                if ("alter_consumers" in data && data.alter_consumers != undefined) {
                    this.alter_consumers = data.alter_consumers;
                }
                if ("set_metering_mode" in data && data.set_metering_mode != undefined) {
                    this.set_metering_mode = data.set_metering_mode;
                }
            }
            if (!this.alter_attributes)
                this.alter_attributes = new Map();
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get alter_partitioning_settings() {
            return pb_1.Message.getWrapperField(this, AlterPartitioningSettings, 3) as AlterPartitioningSettings;
        }
        set alter_partitioning_settings(value: AlterPartitioningSettings) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_alter_partitioning_settings() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get set_retention_period() {
            return pb_1.Message.getWrapperField(this, dependency_7.google.protobuf.Duration, 4) as dependency_7.google.protobuf.Duration;
        }
        set set_retention_period(value: dependency_7.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_set_retention_period() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get set_retention_storage_mb() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set set_retention_storage_mb(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_set_retention_storage_mb() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get set_supported_codecs() {
            return pb_1.Message.getWrapperField(this, SupportedCodecs, 7) as SupportedCodecs;
        }
        set set_supported_codecs(value: SupportedCodecs) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_set_supported_codecs() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get set_partition_write_speed_bytes_per_second() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set set_partition_write_speed_bytes_per_second(value: number) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[1], value);
        }
        get has_set_partition_write_speed_bytes_per_second() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get set_partition_write_burst_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set set_partition_write_burst_bytes(value: number) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[2], value);
        }
        get has_set_partition_write_burst_bytes() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get alter_attributes() {
            return pb_1.Message.getField(this, 10) as any as Map<string, string>;
        }
        set alter_attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        get add_consumers() {
            return pb_1.Message.getRepeatedWrapperField(this, Consumer, 11) as Consumer[];
        }
        set add_consumers(value: Consumer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get drop_consumers() {
            return pb_1.Message.getFieldWithDefault(this, 12, []) as string[];
        }
        set drop_consumers(value: string[]) {
            pb_1.Message.setField(this, 12, value);
        }
        get alter_consumers() {
            return pb_1.Message.getRepeatedWrapperField(this, AlterConsumer, 13) as AlterConsumer[];
        }
        set alter_consumers(value: AlterConsumer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get set_metering_mode() {
            return pb_1.Message.getFieldWithDefault(this, 14, MeteringMode.METERING_MODE_UNSPECIFIED) as MeteringMode;
        }
        set set_metering_mode(value: MeteringMode) {
            pb_1.Message.setField(this, 14, value);
        }
        get _set_retention_storage_mb() {
            const cases: {
                [index: number]: "none" | "set_retention_storage_mb";
            } = {
                0: "none",
                5: "set_retention_storage_mb"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _set_partition_write_speed_bytes_per_second() {
            const cases: {
                [index: number]: "none" | "set_partition_write_speed_bytes_per_second";
            } = {
                0: "none",
                8: "set_partition_write_speed_bytes_per_second"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _set_partition_write_burst_bytes() {
            const cases: {
                [index: number]: "none" | "set_partition_write_burst_bytes";
            } = {
                0: "none",
                9: "set_partition_write_burst_bytes"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            path?: string;
            alter_partitioning_settings?: ReturnType<typeof AlterPartitioningSettings.prototype.toObject>;
            set_retention_period?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
            set_retention_storage_mb?: number;
            set_supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
            set_partition_write_speed_bytes_per_second?: number;
            set_partition_write_burst_bytes?: number;
            alter_attributes?: {
                [key: string]: string;
            };
            add_consumers?: ReturnType<typeof Consumer.prototype.toObject>[];
            drop_consumers?: string[];
            alter_consumers?: ReturnType<typeof AlterConsumer.prototype.toObject>[];
            set_metering_mode?: MeteringMode;
        }): AlterTopicRequest {
            const message = new AlterTopicRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.alter_partitioning_settings != null) {
                message.alter_partitioning_settings = AlterPartitioningSettings.fromObject(data.alter_partitioning_settings);
            }
            if (data.set_retention_period != null) {
                message.set_retention_period = dependency_7.google.protobuf.Duration.fromObject(data.set_retention_period);
            }
            if (data.set_retention_storage_mb != null) {
                message.set_retention_storage_mb = data.set_retention_storage_mb;
            }
            if (data.set_supported_codecs != null) {
                message.set_supported_codecs = SupportedCodecs.fromObject(data.set_supported_codecs);
            }
            if (data.set_partition_write_speed_bytes_per_second != null) {
                message.set_partition_write_speed_bytes_per_second = data.set_partition_write_speed_bytes_per_second;
            }
            if (data.set_partition_write_burst_bytes != null) {
                message.set_partition_write_burst_bytes = data.set_partition_write_burst_bytes;
            }
            if (typeof data.alter_attributes == "object") {
                message.alter_attributes = new Map(Object.entries(data.alter_attributes));
            }
            if (data.add_consumers != null) {
                message.add_consumers = data.add_consumers.map(item => Consumer.fromObject(item));
            }
            if (data.drop_consumers != null) {
                message.drop_consumers = data.drop_consumers;
            }
            if (data.alter_consumers != null) {
                message.alter_consumers = data.alter_consumers.map(item => AlterConsumer.fromObject(item));
            }
            if (data.set_metering_mode != null) {
                message.set_metering_mode = data.set_metering_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
                path?: string;
                alter_partitioning_settings?: ReturnType<typeof AlterPartitioningSettings.prototype.toObject>;
                set_retention_period?: ReturnType<typeof dependency_7.google.protobuf.Duration.prototype.toObject>;
                set_retention_storage_mb?: number;
                set_supported_codecs?: ReturnType<typeof SupportedCodecs.prototype.toObject>;
                set_partition_write_speed_bytes_per_second?: number;
                set_partition_write_burst_bytes?: number;
                alter_attributes?: {
                    [key: string]: string;
                };
                add_consumers?: ReturnType<typeof Consumer.prototype.toObject>[];
                drop_consumers?: string[];
                alter_consumers?: ReturnType<typeof AlterConsumer.prototype.toObject>[];
                set_metering_mode?: MeteringMode;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.alter_partitioning_settings != null) {
                data.alter_partitioning_settings = this.alter_partitioning_settings.toObject();
            }
            if (this.set_retention_period != null) {
                data.set_retention_period = this.set_retention_period.toObject();
            }
            if (this.set_retention_storage_mb != null) {
                data.set_retention_storage_mb = this.set_retention_storage_mb;
            }
            if (this.set_supported_codecs != null) {
                data.set_supported_codecs = this.set_supported_codecs.toObject();
            }
            if (this.set_partition_write_speed_bytes_per_second != null) {
                data.set_partition_write_speed_bytes_per_second = this.set_partition_write_speed_bytes_per_second;
            }
            if (this.set_partition_write_burst_bytes != null) {
                data.set_partition_write_burst_bytes = this.set_partition_write_burst_bytes;
            }
            if (this.alter_attributes != null) {
                data.alter_attributes = (Object.fromEntries)(this.alter_attributes);
            }
            if (this.add_consumers != null) {
                data.add_consumers = this.add_consumers.map((item: Consumer) => item.toObject());
            }
            if (this.drop_consumers != null) {
                data.drop_consumers = this.drop_consumers;
            }
            if (this.alter_consumers != null) {
                data.alter_consumers = this.alter_consumers.map((item: AlterConsumer) => item.toObject());
            }
            if (this.set_metering_mode != null) {
                data.set_metering_mode = this.set_metering_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.has_alter_partitioning_settings)
                writer.writeMessage(3, this.alter_partitioning_settings, () => this.alter_partitioning_settings.serialize(writer));
            if (this.has_set_retention_period)
                writer.writeMessage(4, this.set_retention_period, () => this.set_retention_period.serialize(writer));
            if (this.has_set_retention_storage_mb)
                writer.writeInt64(5, this.set_retention_storage_mb);
            if (this.has_set_supported_codecs)
                writer.writeMessage(7, this.set_supported_codecs, () => this.set_supported_codecs.serialize(writer));
            if (this.has_set_partition_write_speed_bytes_per_second)
                writer.writeInt64(8, this.set_partition_write_speed_bytes_per_second);
            if (this.has_set_partition_write_burst_bytes)
                writer.writeInt64(9, this.set_partition_write_burst_bytes);
            for (const [key, value] of this.alter_attributes) {
                writer.writeMessage(10, this.alter_attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.add_consumers.length)
                writer.writeRepeatedMessage(11, this.add_consumers, (item: Consumer) => item.serialize(writer));
            if (this.drop_consumers.length)
                writer.writeRepeatedString(12, this.drop_consumers);
            if (this.alter_consumers.length)
                writer.writeRepeatedMessage(13, this.alter_consumers, (item: AlterConsumer) => item.serialize(writer));
            if (this.set_metering_mode != MeteringMode.METERING_MODE_UNSPECIFIED)
                writer.writeEnum(14, this.set_metering_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterTopicRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterTopicRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.alter_partitioning_settings, () => message.alter_partitioning_settings = AlterPartitioningSettings.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.set_retention_period, () => message.set_retention_period = dependency_7.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 5:
                        message.set_retention_storage_mb = reader.readInt64();
                        break;
                    case 7:
                        reader.readMessage(message.set_supported_codecs, () => message.set_supported_codecs = SupportedCodecs.deserialize(reader));
                        break;
                    case 8:
                        message.set_partition_write_speed_bytes_per_second = reader.readInt64();
                        break;
                    case 9:
                        message.set_partition_write_burst_bytes = reader.readInt64();
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.alter_attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 11:
                        reader.readMessage(message.add_consumers, () => pb_1.Message.addToRepeatedWrapperField(message, 11, Consumer.deserialize(reader), Consumer));
                        break;
                    case 12:
                        pb_1.Message.addToRepeatedField(message, 12, reader.readString());
                        break;
                    case 13:
                        reader.readMessage(message.alter_consumers, () => pb_1.Message.addToRepeatedWrapperField(message, 13, AlterConsumer.deserialize(reader), AlterConsumer));
                        break;
                    case 14:
                        message.set_metering_mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterTopicRequest {
            return AlterTopicRequest.deserialize(bytes);
        }
    }
    export class AlterTopicResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): AlterTopicResponse {
            const message = new AlterTopicResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterTopicResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterTopicResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterTopicResponse {
            return AlterTopicResponse.deserialize(bytes);
        }
    }
    export class AlterTopicResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): AlterTopicResult {
            const message = new AlterTopicResult({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterTopicResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterTopicResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterTopicResult {
            return AlterTopicResult.deserialize(bytes);
        }
    }
    export class DropTopicRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
            path?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 1) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            path?: string;
        }): DropTopicRequest {
            const message = new DropTopicRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.path != null) {
                message.path = data.path;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
                path?: string;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.path != null) {
                data.path = this.path;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.path.length)
                writer.writeString(2, this.path);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropTopicRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropTopicRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropTopicRequest {
            return DropTopicRequest.deserialize(bytes);
        }
    }
    export class DropTopicResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): DropTopicResponse {
            const message = new DropTopicResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropTopicResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropTopicResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropTopicResponse {
            return DropTopicResponse.deserialize(bytes);
        }
    }
    export class DropTopicResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DropTopicResult {
            const message = new DropTopicResult({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropTopicResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropTopicResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropTopicResult {
            return DropTopicResult.deserialize(bytes);
        }
    }
}
