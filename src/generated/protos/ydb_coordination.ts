/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_coordination.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ydb_operation";
import * as dependency_2 from "./ydb_status_codes";
import * as dependency_3 from "./ydb_issue_message";
import * as dependency_4 from "./ydb_scheme";
import * as pb_1 from "google-protobuf";
export namespace Ydb.Coordination {
    export enum ConsistencyMode {
        CONSISTENCY_MODE_UNSET = 0,
        CONSISTENCY_MODE_STRICT = 1,
        CONSISTENCY_MODE_RELAXED = 2
    }
    export enum RateLimiterCountersMode {
        RATE_LIMITER_COUNTERS_MODE_UNSET = 0,
        RATE_LIMITER_COUNTERS_MODE_AGGREGATED = 1,
        RATE_LIMITER_COUNTERS_MODE_DETAILED = 2
    }
    export class Unsupported extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Unsupported {
            const message = new Unsupported({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Unsupported {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Unsupported();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Unsupported {
            return Unsupported.deserialize(bytes);
        }
    }
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            self_check_period_millis?: number;
            session_grace_period_millis?: number;
            read_consistency_mode?: ConsistencyMode;
            attach_consistency_mode?: ConsistencyMode;
            rate_limiter_counters_mode?: RateLimiterCountersMode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("self_check_period_millis" in data && data.self_check_period_millis != undefined) {
                    this.self_check_period_millis = data.self_check_period_millis;
                }
                if ("session_grace_period_millis" in data && data.session_grace_period_millis != undefined) {
                    this.session_grace_period_millis = data.session_grace_period_millis;
                }
                if ("read_consistency_mode" in data && data.read_consistency_mode != undefined) {
                    this.read_consistency_mode = data.read_consistency_mode;
                }
                if ("attach_consistency_mode" in data && data.attach_consistency_mode != undefined) {
                    this.attach_consistency_mode = data.attach_consistency_mode;
                }
                if ("rate_limiter_counters_mode" in data && data.rate_limiter_counters_mode != undefined) {
                    this.rate_limiter_counters_mode = data.rate_limiter_counters_mode;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get self_check_period_millis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set self_check_period_millis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get session_grace_period_millis() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set session_grace_period_millis(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get read_consistency_mode() {
            return pb_1.Message.getFieldWithDefault(this, 4, ConsistencyMode.CONSISTENCY_MODE_UNSET) as ConsistencyMode;
        }
        set read_consistency_mode(value: ConsistencyMode) {
            pb_1.Message.setField(this, 4, value);
        }
        get attach_consistency_mode() {
            return pb_1.Message.getFieldWithDefault(this, 5, ConsistencyMode.CONSISTENCY_MODE_UNSET) as ConsistencyMode;
        }
        set attach_consistency_mode(value: ConsistencyMode) {
            pb_1.Message.setField(this, 5, value);
        }
        get rate_limiter_counters_mode() {
            return pb_1.Message.getFieldWithDefault(this, 6, RateLimiterCountersMode.RATE_LIMITER_COUNTERS_MODE_UNSET) as RateLimiterCountersMode;
        }
        set rate_limiter_counters_mode(value: RateLimiterCountersMode) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            path?: string;
            self_check_period_millis?: number;
            session_grace_period_millis?: number;
            read_consistency_mode?: ConsistencyMode;
            attach_consistency_mode?: ConsistencyMode;
            rate_limiter_counters_mode?: RateLimiterCountersMode;
        }): Config {
            const message = new Config({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.self_check_period_millis != null) {
                message.self_check_period_millis = data.self_check_period_millis;
            }
            if (data.session_grace_period_millis != null) {
                message.session_grace_period_millis = data.session_grace_period_millis;
            }
            if (data.read_consistency_mode != null) {
                message.read_consistency_mode = data.read_consistency_mode;
            }
            if (data.attach_consistency_mode != null) {
                message.attach_consistency_mode = data.attach_consistency_mode;
            }
            if (data.rate_limiter_counters_mode != null) {
                message.rate_limiter_counters_mode = data.rate_limiter_counters_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                self_check_period_millis?: number;
                session_grace_period_millis?: number;
                read_consistency_mode?: ConsistencyMode;
                attach_consistency_mode?: ConsistencyMode;
                rate_limiter_counters_mode?: RateLimiterCountersMode;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.self_check_period_millis != null) {
                data.self_check_period_millis = this.self_check_period_millis;
            }
            if (this.session_grace_period_millis != null) {
                data.session_grace_period_millis = this.session_grace_period_millis;
            }
            if (this.read_consistency_mode != null) {
                data.read_consistency_mode = this.read_consistency_mode;
            }
            if (this.attach_consistency_mode != null) {
                data.attach_consistency_mode = this.attach_consistency_mode;
            }
            if (this.rate_limiter_counters_mode != null) {
                data.rate_limiter_counters_mode = this.rate_limiter_counters_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.self_check_period_millis != 0)
                writer.writeUint32(2, this.self_check_period_millis);
            if (this.session_grace_period_millis != 0)
                writer.writeUint32(3, this.session_grace_period_millis);
            if (this.read_consistency_mode != ConsistencyMode.CONSISTENCY_MODE_UNSET)
                writer.writeEnum(4, this.read_consistency_mode);
            if (this.attach_consistency_mode != ConsistencyMode.CONSISTENCY_MODE_UNSET)
                writer.writeEnum(5, this.attach_consistency_mode);
            if (this.rate_limiter_counters_mode != RateLimiterCountersMode.RATE_LIMITER_COUNTERS_MODE_UNSET)
                writer.writeEnum(6, this.rate_limiter_counters_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        message.self_check_period_millis = reader.readUint32();
                        break;
                    case 3:
                        message.session_grace_period_millis = reader.readUint32();
                        break;
                    case 4:
                        message.read_consistency_mode = reader.readEnum();
                        break;
                    case 5:
                        message.attach_consistency_mode = reader.readEnum();
                        break;
                    case 6:
                        message.rate_limiter_counters_mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
    export class SessionDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: number;
            timeout_millis?: number;
            description?: string;
            attached?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("timeout_millis" in data && data.timeout_millis != undefined) {
                    this.timeout_millis = data.timeout_millis;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("attached" in data && data.attached != undefined) {
                    this.attached = data.attached;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set session_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get timeout_millis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timeout_millis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get attached() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set attached(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session_id?: number;
            timeout_millis?: number;
            description?: string;
            attached?: boolean;
        }): SessionDescription {
            const message = new SessionDescription({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.timeout_millis != null) {
                message.timeout_millis = data.timeout_millis;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.attached != null) {
                message.attached = data.attached;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: number;
                timeout_millis?: number;
                description?: string;
                attached?: boolean;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.timeout_millis != null) {
                data.timeout_millis = this.timeout_millis;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.attached != null) {
                data.attached = this.attached;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id != 0)
                writer.writeUint64(1, this.session_id);
            if (this.timeout_millis != 0)
                writer.writeUint64(2, this.timeout_millis);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.attached != false)
                writer.writeBool(4, this.attached);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readUint64();
                        break;
                    case 2:
                        message.timeout_millis = reader.readUint64();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.attached = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionDescription {
            return SessionDescription.deserialize(bytes);
        }
    }
    export class SemaphoreSession extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            order_id?: number;
            session_id?: number;
            timeout_millis?: number;
            count?: number;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("order_id" in data && data.order_id != undefined) {
                    this.order_id = data.order_id;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("timeout_millis" in data && data.timeout_millis != undefined) {
                    this.timeout_millis = data.timeout_millis;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get order_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set order_id(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set session_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get timeout_millis() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timeout_millis(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            order_id?: number;
            session_id?: number;
            timeout_millis?: number;
            count?: number;
            data?: Uint8Array;
        }): SemaphoreSession {
            const message = new SemaphoreSession({});
            if (data.order_id != null) {
                message.order_id = data.order_id;
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.timeout_millis != null) {
                message.timeout_millis = data.timeout_millis;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                order_id?: number;
                session_id?: number;
                timeout_millis?: number;
                count?: number;
                data?: Uint8Array;
            } = {};
            if (this.order_id != null) {
                data.order_id = this.order_id;
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.timeout_millis != null) {
                data.timeout_millis = this.timeout_millis;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.order_id != 0)
                writer.writeUint64(5, this.order_id);
            if (this.session_id != 0)
                writer.writeUint64(1, this.session_id);
            if (this.timeout_millis != 0)
                writer.writeUint64(2, this.timeout_millis);
            if (this.count != 0)
                writer.writeUint64(3, this.count);
            if (this.data.length)
                writer.writeBytes(4, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemaphoreSession {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemaphoreSession();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.order_id = reader.readUint64();
                        break;
                    case 1:
                        message.session_id = reader.readUint64();
                        break;
                    case 2:
                        message.timeout_millis = reader.readUint64();
                        break;
                    case 3:
                        message.count = reader.readUint64();
                        break;
                    case 4:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemaphoreSession {
            return SemaphoreSession.deserialize(bytes);
        }
    }
    export class SemaphoreDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            data?: Uint8Array;
            count?: number;
            limit?: number;
            ephemeral?: boolean;
            owners?: SemaphoreSession[];
            waiters?: SemaphoreSession[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("ephemeral" in data && data.ephemeral != undefined) {
                    this.ephemeral = data.ephemeral;
                }
                if ("owners" in data && data.owners != undefined) {
                    this.owners = data.owners;
                }
                if ("waiters" in data && data.waiters != undefined) {
                    this.waiters = data.waiters;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get ephemeral() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set ephemeral(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get owners() {
            return pb_1.Message.getRepeatedWrapperField(this, SemaphoreSession, 5) as SemaphoreSession[];
        }
        set owners(value: SemaphoreSession[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get waiters() {
            return pb_1.Message.getRepeatedWrapperField(this, SemaphoreSession, 6) as SemaphoreSession[];
        }
        set waiters(value: SemaphoreSession[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            name?: string;
            data?: Uint8Array;
            count?: number;
            limit?: number;
            ephemeral?: boolean;
            owners?: ReturnType<typeof SemaphoreSession.prototype.toObject>[];
            waiters?: ReturnType<typeof SemaphoreSession.prototype.toObject>[];
        }): SemaphoreDescription {
            const message = new SemaphoreDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.ephemeral != null) {
                message.ephemeral = data.ephemeral;
            }
            if (data.owners != null) {
                message.owners = data.owners.map(item => SemaphoreSession.fromObject(item));
            }
            if (data.waiters != null) {
                message.waiters = data.waiters.map(item => SemaphoreSession.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                data?: Uint8Array;
                count?: number;
                limit?: number;
                ephemeral?: boolean;
                owners?: ReturnType<typeof SemaphoreSession.prototype.toObject>[];
                waiters?: ReturnType<typeof SemaphoreSession.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.ephemeral != null) {
                data.ephemeral = this.ephemeral;
            }
            if (this.owners != null) {
                data.owners = this.owners.map((item: SemaphoreSession) => item.toObject());
            }
            if (this.waiters != null) {
                data.waiters = this.waiters.map((item: SemaphoreSession) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (this.count != 0)
                writer.writeUint64(7, this.count);
            if (this.limit != 0)
                writer.writeUint64(3, this.limit);
            if (this.ephemeral != false)
                writer.writeBool(4, this.ephemeral);
            if (this.owners.length)
                writer.writeRepeatedMessage(5, this.owners, (item: SemaphoreSession) => item.serialize(writer));
            if (this.waiters.length)
                writer.writeRepeatedMessage(6, this.waiters, (item: SemaphoreSession) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemaphoreDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemaphoreDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    case 7:
                        message.count = reader.readUint64();
                        break;
                    case 3:
                        message.limit = reader.readUint64();
                        break;
                    case 4:
                        message.ephemeral = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.owners, () => pb_1.Message.addToRepeatedWrapperField(message, 5, SemaphoreSession.deserialize(reader), SemaphoreSession));
                        break;
                    case 6:
                        reader.readMessage(message.waiters, () => pb_1.Message.addToRepeatedWrapperField(message, 6, SemaphoreSession.deserialize(reader), SemaphoreSession));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemaphoreDescription {
            return SemaphoreDescription.deserialize(bytes);
        }
    }
    export class SessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]];
        constructor(data?: any[] | ({} & (({
            ping?: SessionRequest.PingPong;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: SessionRequest.PingPong;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: SessionRequest.SessionStart;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: SessionRequest.SessionStop;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: Unsupported;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: Unsupported;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: SessionRequest.AcquireSemaphore;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: SessionRequest.ReleaseSemaphore;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: SessionRequest.DescribeSemaphore;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: SessionRequest.CreateSemaphore;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: SessionRequest.UpdateSemaphore;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: SessionRequest.DeleteSemaphore;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: Unsupported;
            unsupported_14?: never;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: Unsupported;
            unsupported_15?: never;
        } | {
            ping?: never;
            pong?: never;
            session_start?: never;
            session_stop?: never;
            unsupported_5?: never;
            unsupported_6?: never;
            acquire_semaphore?: never;
            release_semaphore?: never;
            describe_semaphore?: never;
            create_semaphore?: never;
            update_semaphore?: never;
            delete_semaphore?: never;
            unsupported_13?: never;
            unsupported_14?: never;
            unsupported_15?: Unsupported;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ping" in data && data.ping != undefined) {
                    this.ping = data.ping;
                }
                if ("pong" in data && data.pong != undefined) {
                    this.pong = data.pong;
                }
                if ("session_start" in data && data.session_start != undefined) {
                    this.session_start = data.session_start;
                }
                if ("session_stop" in data && data.session_stop != undefined) {
                    this.session_stop = data.session_stop;
                }
                if ("unsupported_5" in data && data.unsupported_5 != undefined) {
                    this.unsupported_5 = data.unsupported_5;
                }
                if ("unsupported_6" in data && data.unsupported_6 != undefined) {
                    this.unsupported_6 = data.unsupported_6;
                }
                if ("acquire_semaphore" in data && data.acquire_semaphore != undefined) {
                    this.acquire_semaphore = data.acquire_semaphore;
                }
                if ("release_semaphore" in data && data.release_semaphore != undefined) {
                    this.release_semaphore = data.release_semaphore;
                }
                if ("describe_semaphore" in data && data.describe_semaphore != undefined) {
                    this.describe_semaphore = data.describe_semaphore;
                }
                if ("create_semaphore" in data && data.create_semaphore != undefined) {
                    this.create_semaphore = data.create_semaphore;
                }
                if ("update_semaphore" in data && data.update_semaphore != undefined) {
                    this.update_semaphore = data.update_semaphore;
                }
                if ("delete_semaphore" in data && data.delete_semaphore != undefined) {
                    this.delete_semaphore = data.delete_semaphore;
                }
                if ("unsupported_13" in data && data.unsupported_13 != undefined) {
                    this.unsupported_13 = data.unsupported_13;
                }
                if ("unsupported_14" in data && data.unsupported_14 != undefined) {
                    this.unsupported_14 = data.unsupported_14;
                }
                if ("unsupported_15" in data && data.unsupported_15 != undefined) {
                    this.unsupported_15 = data.unsupported_15;
                }
            }
        }
        get ping() {
            return pb_1.Message.getWrapperField(this, SessionRequest.PingPong, 1) as SessionRequest.PingPong;
        }
        set ping(value: SessionRequest.PingPong) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ping() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pong() {
            return pb_1.Message.getWrapperField(this, SessionRequest.PingPong, 2) as SessionRequest.PingPong;
        }
        set pong(value: SessionRequest.PingPong) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pong() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get session_start() {
            return pb_1.Message.getWrapperField(this, SessionRequest.SessionStart, 3) as SessionRequest.SessionStart;
        }
        set session_start(value: SessionRequest.SessionStart) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_session_start() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get session_stop() {
            return pb_1.Message.getWrapperField(this, SessionRequest.SessionStop, 4) as SessionRequest.SessionStop;
        }
        set session_stop(value: SessionRequest.SessionStop) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_session_stop() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get unsupported_5() {
            return pb_1.Message.getWrapperField(this, Unsupported, 5) as Unsupported;
        }
        set unsupported_5(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_unsupported_5() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get unsupported_6() {
            return pb_1.Message.getWrapperField(this, Unsupported, 6) as Unsupported;
        }
        set unsupported_6(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_unsupported_6() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get acquire_semaphore() {
            return pb_1.Message.getWrapperField(this, SessionRequest.AcquireSemaphore, 7) as SessionRequest.AcquireSemaphore;
        }
        set acquire_semaphore(value: SessionRequest.AcquireSemaphore) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_acquire_semaphore() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get release_semaphore() {
            return pb_1.Message.getWrapperField(this, SessionRequest.ReleaseSemaphore, 8) as SessionRequest.ReleaseSemaphore;
        }
        set release_semaphore(value: SessionRequest.ReleaseSemaphore) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_release_semaphore() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get describe_semaphore() {
            return pb_1.Message.getWrapperField(this, SessionRequest.DescribeSemaphore, 9) as SessionRequest.DescribeSemaphore;
        }
        set describe_semaphore(value: SessionRequest.DescribeSemaphore) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_describe_semaphore() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get create_semaphore() {
            return pb_1.Message.getWrapperField(this, SessionRequest.CreateSemaphore, 10) as SessionRequest.CreateSemaphore;
        }
        set create_semaphore(value: SessionRequest.CreateSemaphore) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_create_semaphore() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get update_semaphore() {
            return pb_1.Message.getWrapperField(this, SessionRequest.UpdateSemaphore, 11) as SessionRequest.UpdateSemaphore;
        }
        set update_semaphore(value: SessionRequest.UpdateSemaphore) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_update_semaphore() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get delete_semaphore() {
            return pb_1.Message.getWrapperField(this, SessionRequest.DeleteSemaphore, 12) as SessionRequest.DeleteSemaphore;
        }
        set delete_semaphore(value: SessionRequest.DeleteSemaphore) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_delete_semaphore() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get unsupported_13() {
            return pb_1.Message.getWrapperField(this, Unsupported, 13) as Unsupported;
        }
        set unsupported_13(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_unsupported_13() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get unsupported_14() {
            return pb_1.Message.getWrapperField(this, Unsupported, 14) as Unsupported;
        }
        set unsupported_14(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_unsupported_14() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get unsupported_15() {
            return pb_1.Message.getWrapperField(this, Unsupported, 15) as Unsupported;
        }
        set unsupported_15(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_unsupported_15() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get request() {
            const cases: {
                [index: number]: "none" | "ping" | "pong" | "session_start" | "session_stop" | "unsupported_5" | "unsupported_6" | "acquire_semaphore" | "release_semaphore" | "describe_semaphore" | "create_semaphore" | "update_semaphore" | "delete_semaphore" | "unsupported_13" | "unsupported_14" | "unsupported_15";
            } = {
                0: "none",
                1: "ping",
                2: "pong",
                3: "session_start",
                4: "session_stop",
                5: "unsupported_5",
                6: "unsupported_6",
                7: "acquire_semaphore",
                8: "release_semaphore",
                9: "describe_semaphore",
                10: "create_semaphore",
                11: "update_semaphore",
                12: "delete_semaphore",
                13: "unsupported_13",
                14: "unsupported_14",
                15: "unsupported_15"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])];
        }
        static fromObject(data: {
            ping?: ReturnType<typeof SessionRequest.PingPong.prototype.toObject>;
            pong?: ReturnType<typeof SessionRequest.PingPong.prototype.toObject>;
            session_start?: ReturnType<typeof SessionRequest.SessionStart.prototype.toObject>;
            session_stop?: ReturnType<typeof SessionRequest.SessionStop.prototype.toObject>;
            unsupported_5?: ReturnType<typeof Unsupported.prototype.toObject>;
            unsupported_6?: ReturnType<typeof Unsupported.prototype.toObject>;
            acquire_semaphore?: ReturnType<typeof SessionRequest.AcquireSemaphore.prototype.toObject>;
            release_semaphore?: ReturnType<typeof SessionRequest.ReleaseSemaphore.prototype.toObject>;
            describe_semaphore?: ReturnType<typeof SessionRequest.DescribeSemaphore.prototype.toObject>;
            create_semaphore?: ReturnType<typeof SessionRequest.CreateSemaphore.prototype.toObject>;
            update_semaphore?: ReturnType<typeof SessionRequest.UpdateSemaphore.prototype.toObject>;
            delete_semaphore?: ReturnType<typeof SessionRequest.DeleteSemaphore.prototype.toObject>;
            unsupported_13?: ReturnType<typeof Unsupported.prototype.toObject>;
            unsupported_14?: ReturnType<typeof Unsupported.prototype.toObject>;
            unsupported_15?: ReturnType<typeof Unsupported.prototype.toObject>;
        }): SessionRequest {
            const message = new SessionRequest({});
            if (data.ping != null) {
                message.ping = SessionRequest.PingPong.fromObject(data.ping);
            }
            if (data.pong != null) {
                message.pong = SessionRequest.PingPong.fromObject(data.pong);
            }
            if (data.session_start != null) {
                message.session_start = SessionRequest.SessionStart.fromObject(data.session_start);
            }
            if (data.session_stop != null) {
                message.session_stop = SessionRequest.SessionStop.fromObject(data.session_stop);
            }
            if (data.unsupported_5 != null) {
                message.unsupported_5 = Unsupported.fromObject(data.unsupported_5);
            }
            if (data.unsupported_6 != null) {
                message.unsupported_6 = Unsupported.fromObject(data.unsupported_6);
            }
            if (data.acquire_semaphore != null) {
                message.acquire_semaphore = SessionRequest.AcquireSemaphore.fromObject(data.acquire_semaphore);
            }
            if (data.release_semaphore != null) {
                message.release_semaphore = SessionRequest.ReleaseSemaphore.fromObject(data.release_semaphore);
            }
            if (data.describe_semaphore != null) {
                message.describe_semaphore = SessionRequest.DescribeSemaphore.fromObject(data.describe_semaphore);
            }
            if (data.create_semaphore != null) {
                message.create_semaphore = SessionRequest.CreateSemaphore.fromObject(data.create_semaphore);
            }
            if (data.update_semaphore != null) {
                message.update_semaphore = SessionRequest.UpdateSemaphore.fromObject(data.update_semaphore);
            }
            if (data.delete_semaphore != null) {
                message.delete_semaphore = SessionRequest.DeleteSemaphore.fromObject(data.delete_semaphore);
            }
            if (data.unsupported_13 != null) {
                message.unsupported_13 = Unsupported.fromObject(data.unsupported_13);
            }
            if (data.unsupported_14 != null) {
                message.unsupported_14 = Unsupported.fromObject(data.unsupported_14);
            }
            if (data.unsupported_15 != null) {
                message.unsupported_15 = Unsupported.fromObject(data.unsupported_15);
            }
            return message;
        }
        toObject() {
            const data: {
                ping?: ReturnType<typeof SessionRequest.PingPong.prototype.toObject>;
                pong?: ReturnType<typeof SessionRequest.PingPong.prototype.toObject>;
                session_start?: ReturnType<typeof SessionRequest.SessionStart.prototype.toObject>;
                session_stop?: ReturnType<typeof SessionRequest.SessionStop.prototype.toObject>;
                unsupported_5?: ReturnType<typeof Unsupported.prototype.toObject>;
                unsupported_6?: ReturnType<typeof Unsupported.prototype.toObject>;
                acquire_semaphore?: ReturnType<typeof SessionRequest.AcquireSemaphore.prototype.toObject>;
                release_semaphore?: ReturnType<typeof SessionRequest.ReleaseSemaphore.prototype.toObject>;
                describe_semaphore?: ReturnType<typeof SessionRequest.DescribeSemaphore.prototype.toObject>;
                create_semaphore?: ReturnType<typeof SessionRequest.CreateSemaphore.prototype.toObject>;
                update_semaphore?: ReturnType<typeof SessionRequest.UpdateSemaphore.prototype.toObject>;
                delete_semaphore?: ReturnType<typeof SessionRequest.DeleteSemaphore.prototype.toObject>;
                unsupported_13?: ReturnType<typeof Unsupported.prototype.toObject>;
                unsupported_14?: ReturnType<typeof Unsupported.prototype.toObject>;
                unsupported_15?: ReturnType<typeof Unsupported.prototype.toObject>;
            } = {};
            if (this.ping != null) {
                data.ping = this.ping.toObject();
            }
            if (this.pong != null) {
                data.pong = this.pong.toObject();
            }
            if (this.session_start != null) {
                data.session_start = this.session_start.toObject();
            }
            if (this.session_stop != null) {
                data.session_stop = this.session_stop.toObject();
            }
            if (this.unsupported_5 != null) {
                data.unsupported_5 = this.unsupported_5.toObject();
            }
            if (this.unsupported_6 != null) {
                data.unsupported_6 = this.unsupported_6.toObject();
            }
            if (this.acquire_semaphore != null) {
                data.acquire_semaphore = this.acquire_semaphore.toObject();
            }
            if (this.release_semaphore != null) {
                data.release_semaphore = this.release_semaphore.toObject();
            }
            if (this.describe_semaphore != null) {
                data.describe_semaphore = this.describe_semaphore.toObject();
            }
            if (this.create_semaphore != null) {
                data.create_semaphore = this.create_semaphore.toObject();
            }
            if (this.update_semaphore != null) {
                data.update_semaphore = this.update_semaphore.toObject();
            }
            if (this.delete_semaphore != null) {
                data.delete_semaphore = this.delete_semaphore.toObject();
            }
            if (this.unsupported_13 != null) {
                data.unsupported_13 = this.unsupported_13.toObject();
            }
            if (this.unsupported_14 != null) {
                data.unsupported_14 = this.unsupported_14.toObject();
            }
            if (this.unsupported_15 != null) {
                data.unsupported_15 = this.unsupported_15.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ping)
                writer.writeMessage(1, this.ping, () => this.ping.serialize(writer));
            if (this.has_pong)
                writer.writeMessage(2, this.pong, () => this.pong.serialize(writer));
            if (this.has_session_start)
                writer.writeMessage(3, this.session_start, () => this.session_start.serialize(writer));
            if (this.has_session_stop)
                writer.writeMessage(4, this.session_stop, () => this.session_stop.serialize(writer));
            if (this.has_unsupported_5)
                writer.writeMessage(5, this.unsupported_5, () => this.unsupported_5.serialize(writer));
            if (this.has_unsupported_6)
                writer.writeMessage(6, this.unsupported_6, () => this.unsupported_6.serialize(writer));
            if (this.has_acquire_semaphore)
                writer.writeMessage(7, this.acquire_semaphore, () => this.acquire_semaphore.serialize(writer));
            if (this.has_release_semaphore)
                writer.writeMessage(8, this.release_semaphore, () => this.release_semaphore.serialize(writer));
            if (this.has_describe_semaphore)
                writer.writeMessage(9, this.describe_semaphore, () => this.describe_semaphore.serialize(writer));
            if (this.has_create_semaphore)
                writer.writeMessage(10, this.create_semaphore, () => this.create_semaphore.serialize(writer));
            if (this.has_update_semaphore)
                writer.writeMessage(11, this.update_semaphore, () => this.update_semaphore.serialize(writer));
            if (this.has_delete_semaphore)
                writer.writeMessage(12, this.delete_semaphore, () => this.delete_semaphore.serialize(writer));
            if (this.has_unsupported_13)
                writer.writeMessage(13, this.unsupported_13, () => this.unsupported_13.serialize(writer));
            if (this.has_unsupported_14)
                writer.writeMessage(14, this.unsupported_14, () => this.unsupported_14.serialize(writer));
            if (this.has_unsupported_15)
                writer.writeMessage(15, this.unsupported_15, () => this.unsupported_15.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ping, () => message.ping = SessionRequest.PingPong.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.pong, () => message.pong = SessionRequest.PingPong.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.session_start, () => message.session_start = SessionRequest.SessionStart.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.session_stop, () => message.session_stop = SessionRequest.SessionStop.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.unsupported_5, () => message.unsupported_5 = Unsupported.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.unsupported_6, () => message.unsupported_6 = Unsupported.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.acquire_semaphore, () => message.acquire_semaphore = SessionRequest.AcquireSemaphore.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.release_semaphore, () => message.release_semaphore = SessionRequest.ReleaseSemaphore.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.describe_semaphore, () => message.describe_semaphore = SessionRequest.DescribeSemaphore.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.create_semaphore, () => message.create_semaphore = SessionRequest.CreateSemaphore.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.update_semaphore, () => message.update_semaphore = SessionRequest.UpdateSemaphore.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.delete_semaphore, () => message.delete_semaphore = SessionRequest.DeleteSemaphore.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.unsupported_13, () => message.unsupported_13 = Unsupported.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.unsupported_14, () => message.unsupported_14 = Unsupported.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.unsupported_15, () => message.unsupported_15 = Unsupported.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionRequest {
            return SessionRequest.deserialize(bytes);
        }
    }
    export namespace SessionRequest {
        export class PingPong extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                opaque?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("opaque" in data && data.opaque != undefined) {
                        this.opaque = data.opaque;
                    }
                }
            }
            get opaque() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set opaque(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                opaque?: number;
            }): PingPong {
                const message = new PingPong({});
                if (data.opaque != null) {
                    message.opaque = data.opaque;
                }
                return message;
            }
            toObject() {
                const data: {
                    opaque?: number;
                } = {};
                if (this.opaque != null) {
                    data.opaque = this.opaque;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.opaque != 0)
                    writer.writeUint64(1, this.opaque);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingPong {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingPong();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.opaque = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PingPong {
                return PingPong.deserialize(bytes);
            }
        }
        export class SessionStart extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                path?: string;
                session_id?: number;
                timeout_millis?: number;
                description?: string;
                seq_no?: number;
                protection_key?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("path" in data && data.path != undefined) {
                        this.path = data.path;
                    }
                    if ("session_id" in data && data.session_id != undefined) {
                        this.session_id = data.session_id;
                    }
                    if ("timeout_millis" in data && data.timeout_millis != undefined) {
                        this.timeout_millis = data.timeout_millis;
                    }
                    if ("description" in data && data.description != undefined) {
                        this.description = data.description;
                    }
                    if ("seq_no" in data && data.seq_no != undefined) {
                        this.seq_no = data.seq_no;
                    }
                    if ("protection_key" in data && data.protection_key != undefined) {
                        this.protection_key = data.protection_key;
                    }
                }
            }
            get path() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set path(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get session_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set session_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get timeout_millis() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set timeout_millis(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get description() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set description(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get seq_no() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set seq_no(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get protection_key() {
                return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
            }
            set protection_key(value: Uint8Array) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                path?: string;
                session_id?: number;
                timeout_millis?: number;
                description?: string;
                seq_no?: number;
                protection_key?: Uint8Array;
            }): SessionStart {
                const message = new SessionStart({});
                if (data.path != null) {
                    message.path = data.path;
                }
                if (data.session_id != null) {
                    message.session_id = data.session_id;
                }
                if (data.timeout_millis != null) {
                    message.timeout_millis = data.timeout_millis;
                }
                if (data.description != null) {
                    message.description = data.description;
                }
                if (data.seq_no != null) {
                    message.seq_no = data.seq_no;
                }
                if (data.protection_key != null) {
                    message.protection_key = data.protection_key;
                }
                return message;
            }
            toObject() {
                const data: {
                    path?: string;
                    session_id?: number;
                    timeout_millis?: number;
                    description?: string;
                    seq_no?: number;
                    protection_key?: Uint8Array;
                } = {};
                if (this.path != null) {
                    data.path = this.path;
                }
                if (this.session_id != null) {
                    data.session_id = this.session_id;
                }
                if (this.timeout_millis != null) {
                    data.timeout_millis = this.timeout_millis;
                }
                if (this.description != null) {
                    data.description = this.description;
                }
                if (this.seq_no != null) {
                    data.seq_no = this.seq_no;
                }
                if (this.protection_key != null) {
                    data.protection_key = this.protection_key;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.path.length)
                    writer.writeString(1, this.path);
                if (this.session_id != 0)
                    writer.writeUint64(2, this.session_id);
                if (this.timeout_millis != 0)
                    writer.writeUint64(3, this.timeout_millis);
                if (this.description.length)
                    writer.writeString(4, this.description);
                if (this.seq_no != 0)
                    writer.writeUint64(5, this.seq_no);
                if (this.protection_key.length)
                    writer.writeBytes(6, this.protection_key);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStart {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStart();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.path = reader.readString();
                            break;
                        case 2:
                            message.session_id = reader.readUint64();
                            break;
                        case 3:
                            message.timeout_millis = reader.readUint64();
                            break;
                        case 4:
                            message.description = reader.readString();
                            break;
                        case 5:
                            message.seq_no = reader.readUint64();
                            break;
                        case 6:
                            message.protection_key = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SessionStart {
                return SessionStart.deserialize(bytes);
            }
        }
        export class SessionStop extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): SessionStop {
                const message = new SessionStop({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStop {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStop();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SessionStop {
                return SessionStop.deserialize(bytes);
            }
        }
        export class AcquireSemaphore extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                name?: string;
                timeout_millis?: number;
                count?: number;
                data?: Uint8Array;
                ephemeral?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("timeout_millis" in data && data.timeout_millis != undefined) {
                        this.timeout_millis = data.timeout_millis;
                    }
                    if ("count" in data && data.count != undefined) {
                        this.count = data.count;
                    }
                    if ("data" in data && data.data != undefined) {
                        this.data = data.data;
                    }
                    if ("ephemeral" in data && data.ephemeral != undefined) {
                        this.ephemeral = data.ephemeral;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get timeout_millis() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set timeout_millis(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get count() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set count(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get data() {
                return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
            }
            set data(value: Uint8Array) {
                pb_1.Message.setField(this, 5, value);
            }
            get ephemeral() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set ephemeral(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                req_id?: number;
                name?: string;
                timeout_millis?: number;
                count?: number;
                data?: Uint8Array;
                ephemeral?: boolean;
            }): AcquireSemaphore {
                const message = new AcquireSemaphore({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.timeout_millis != null) {
                    message.timeout_millis = data.timeout_millis;
                }
                if (data.count != null) {
                    message.count = data.count;
                }
                if (data.data != null) {
                    message.data = data.data;
                }
                if (data.ephemeral != null) {
                    message.ephemeral = data.ephemeral;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    name?: string;
                    timeout_millis?: number;
                    count?: number;
                    data?: Uint8Array;
                    ephemeral?: boolean;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.timeout_millis != null) {
                    data.timeout_millis = this.timeout_millis;
                }
                if (this.count != null) {
                    data.count = this.count;
                }
                if (this.data != null) {
                    data.data = this.data;
                }
                if (this.ephemeral != null) {
                    data.ephemeral = this.ephemeral;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.name.length)
                    writer.writeString(2, this.name);
                if (this.timeout_millis != 0)
                    writer.writeUint64(3, this.timeout_millis);
                if (this.count != 0)
                    writer.writeUint64(4, this.count);
                if (this.data.length)
                    writer.writeBytes(5, this.data);
                if (this.ephemeral != false)
                    writer.writeBool(6, this.ephemeral);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcquireSemaphore {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcquireSemaphore();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.timeout_millis = reader.readUint64();
                            break;
                        case 4:
                            message.count = reader.readUint64();
                            break;
                        case 5:
                            message.data = reader.readBytes();
                            break;
                        case 6:
                            message.ephemeral = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AcquireSemaphore {
                return AcquireSemaphore.deserialize(bytes);
            }
        }
        export class ReleaseSemaphore extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                req_id?: number;
                name?: string;
            }): ReleaseSemaphore {
                const message = new ReleaseSemaphore({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    name?: string;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.name.length)
                    writer.writeString(2, this.name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReleaseSemaphore {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReleaseSemaphore();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ReleaseSemaphore {
                return ReleaseSemaphore.deserialize(bytes);
            }
        }
        export class DescribeSemaphore extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                name?: string;
                include_owners?: boolean;
                include_waiters?: boolean;
                watch_data?: boolean;
                watch_owners?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("include_owners" in data && data.include_owners != undefined) {
                        this.include_owners = data.include_owners;
                    }
                    if ("include_waiters" in data && data.include_waiters != undefined) {
                        this.include_waiters = data.include_waiters;
                    }
                    if ("watch_data" in data && data.watch_data != undefined) {
                        this.watch_data = data.watch_data;
                    }
                    if ("watch_owners" in data && data.watch_owners != undefined) {
                        this.watch_owners = data.watch_owners;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get include_owners() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set include_owners(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            get include_waiters() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set include_waiters(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get watch_data() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set watch_data(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get watch_owners() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set watch_owners(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                req_id?: number;
                name?: string;
                include_owners?: boolean;
                include_waiters?: boolean;
                watch_data?: boolean;
                watch_owners?: boolean;
            }): DescribeSemaphore {
                const message = new DescribeSemaphore({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.include_owners != null) {
                    message.include_owners = data.include_owners;
                }
                if (data.include_waiters != null) {
                    message.include_waiters = data.include_waiters;
                }
                if (data.watch_data != null) {
                    message.watch_data = data.watch_data;
                }
                if (data.watch_owners != null) {
                    message.watch_owners = data.watch_owners;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    name?: string;
                    include_owners?: boolean;
                    include_waiters?: boolean;
                    watch_data?: boolean;
                    watch_owners?: boolean;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.include_owners != null) {
                    data.include_owners = this.include_owners;
                }
                if (this.include_waiters != null) {
                    data.include_waiters = this.include_waiters;
                }
                if (this.watch_data != null) {
                    data.watch_data = this.watch_data;
                }
                if (this.watch_owners != null) {
                    data.watch_owners = this.watch_owners;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.name.length)
                    writer.writeString(2, this.name);
                if (this.include_owners != false)
                    writer.writeBool(3, this.include_owners);
                if (this.include_waiters != false)
                    writer.writeBool(4, this.include_waiters);
                if (this.watch_data != false)
                    writer.writeBool(5, this.watch_data);
                if (this.watch_owners != false)
                    writer.writeBool(6, this.watch_owners);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeSemaphore {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeSemaphore();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.include_owners = reader.readBool();
                            break;
                        case 4:
                            message.include_waiters = reader.readBool();
                            break;
                        case 5:
                            message.watch_data = reader.readBool();
                            break;
                        case 6:
                            message.watch_owners = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DescribeSemaphore {
                return DescribeSemaphore.deserialize(bytes);
            }
        }
        export class CreateSemaphore extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                name?: string;
                limit?: number;
                data?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("limit" in data && data.limit != undefined) {
                        this.limit = data.limit;
                    }
                    if ("data" in data && data.data != undefined) {
                        this.data = data.data;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get limit() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set limit(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get data() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set data(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                req_id?: number;
                name?: string;
                limit?: number;
                data?: Uint8Array;
            }): CreateSemaphore {
                const message = new CreateSemaphore({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.limit != null) {
                    message.limit = data.limit;
                }
                if (data.data != null) {
                    message.data = data.data;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    name?: string;
                    limit?: number;
                    data?: Uint8Array;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.limit != null) {
                    data.limit = this.limit;
                }
                if (this.data != null) {
                    data.data = this.data;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.name.length)
                    writer.writeString(2, this.name);
                if (this.limit != 0)
                    writer.writeUint64(3, this.limit);
                if (this.data.length)
                    writer.writeBytes(4, this.data);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSemaphore {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSemaphore();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.limit = reader.readUint64();
                            break;
                        case 4:
                            message.data = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CreateSemaphore {
                return CreateSemaphore.deserialize(bytes);
            }
        }
        export class UpdateSemaphore extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                name?: string;
                data?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("data" in data && data.data != undefined) {
                        this.data = data.data;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get data() {
                return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
            }
            set data(value: Uint8Array) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                req_id?: number;
                name?: string;
                data?: Uint8Array;
            }): UpdateSemaphore {
                const message = new UpdateSemaphore({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.data != null) {
                    message.data = data.data;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    name?: string;
                    data?: Uint8Array;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.data != null) {
                    data.data = this.data;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.name.length)
                    writer.writeString(2, this.name);
                if (this.data.length)
                    writer.writeBytes(3, this.data);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateSemaphore {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateSemaphore();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.data = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UpdateSemaphore {
                return UpdateSemaphore.deserialize(bytes);
            }
        }
        export class DeleteSemaphore extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                name?: string;
                force?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("force" in data && data.force != undefined) {
                        this.force = data.force;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get force() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set force(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                req_id?: number;
                name?: string;
                force?: boolean;
            }): DeleteSemaphore {
                const message = new DeleteSemaphore({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.force != null) {
                    message.force = data.force;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    name?: string;
                    force?: boolean;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.force != null) {
                    data.force = this.force;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.name.length)
                    writer.writeString(2, this.name);
                if (this.force != false)
                    writer.writeBool(3, this.force);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSemaphore {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSemaphore();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        case 3:
                            message.force = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DeleteSemaphore {
                return DeleteSemaphore.deserialize(bytes);
            }
        }
    }
    export class SessionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]];
        constructor(data?: any[] | ({} & (({
            ping?: SessionResponse.PingPong;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: SessionResponse.PingPong;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: SessionResponse.Failure;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: SessionResponse.SessionStarted;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: SessionResponse.SessionStopped;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: Unsupported;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: Unsupported;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: SessionResponse.AcquireSemaphorePending;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: SessionResponse.AcquireSemaphoreResult;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: SessionResponse.ReleaseSemaphoreResult;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: SessionResponse.DescribeSemaphoreResult;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: SessionResponse.DescribeSemaphoreChanged;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: SessionResponse.CreateSemaphoreResult;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: SessionResponse.UpdateSemaphoreResult;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: SessionResponse.DeleteSemaphoreResult;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: Unsupported;
            unsupported_17?: never;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: Unsupported;
            unsupported_18?: never;
        } | {
            ping?: never;
            pong?: never;
            failure?: never;
            session_started?: never;
            session_stopped?: never;
            unsupported_6?: never;
            unsupported_7?: never;
            acquire_semaphore_pending?: never;
            acquire_semaphore_result?: never;
            release_semaphore_result?: never;
            describe_semaphore_result?: never;
            describe_semaphore_changed?: never;
            create_semaphore_result?: never;
            update_semaphore_result?: never;
            delete_semaphore_result?: never;
            unsupported_16?: never;
            unsupported_17?: never;
            unsupported_18?: Unsupported;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ping" in data && data.ping != undefined) {
                    this.ping = data.ping;
                }
                if ("pong" in data && data.pong != undefined) {
                    this.pong = data.pong;
                }
                if ("failure" in data && data.failure != undefined) {
                    this.failure = data.failure;
                }
                if ("session_started" in data && data.session_started != undefined) {
                    this.session_started = data.session_started;
                }
                if ("session_stopped" in data && data.session_stopped != undefined) {
                    this.session_stopped = data.session_stopped;
                }
                if ("unsupported_6" in data && data.unsupported_6 != undefined) {
                    this.unsupported_6 = data.unsupported_6;
                }
                if ("unsupported_7" in data && data.unsupported_7 != undefined) {
                    this.unsupported_7 = data.unsupported_7;
                }
                if ("acquire_semaphore_pending" in data && data.acquire_semaphore_pending != undefined) {
                    this.acquire_semaphore_pending = data.acquire_semaphore_pending;
                }
                if ("acquire_semaphore_result" in data && data.acquire_semaphore_result != undefined) {
                    this.acquire_semaphore_result = data.acquire_semaphore_result;
                }
                if ("release_semaphore_result" in data && data.release_semaphore_result != undefined) {
                    this.release_semaphore_result = data.release_semaphore_result;
                }
                if ("describe_semaphore_result" in data && data.describe_semaphore_result != undefined) {
                    this.describe_semaphore_result = data.describe_semaphore_result;
                }
                if ("describe_semaphore_changed" in data && data.describe_semaphore_changed != undefined) {
                    this.describe_semaphore_changed = data.describe_semaphore_changed;
                }
                if ("create_semaphore_result" in data && data.create_semaphore_result != undefined) {
                    this.create_semaphore_result = data.create_semaphore_result;
                }
                if ("update_semaphore_result" in data && data.update_semaphore_result != undefined) {
                    this.update_semaphore_result = data.update_semaphore_result;
                }
                if ("delete_semaphore_result" in data && data.delete_semaphore_result != undefined) {
                    this.delete_semaphore_result = data.delete_semaphore_result;
                }
                if ("unsupported_16" in data && data.unsupported_16 != undefined) {
                    this.unsupported_16 = data.unsupported_16;
                }
                if ("unsupported_17" in data && data.unsupported_17 != undefined) {
                    this.unsupported_17 = data.unsupported_17;
                }
                if ("unsupported_18" in data && data.unsupported_18 != undefined) {
                    this.unsupported_18 = data.unsupported_18;
                }
            }
        }
        get ping() {
            return pb_1.Message.getWrapperField(this, SessionResponse.PingPong, 1) as SessionResponse.PingPong;
        }
        set ping(value: SessionResponse.PingPong) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_ping() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pong() {
            return pb_1.Message.getWrapperField(this, SessionResponse.PingPong, 2) as SessionResponse.PingPong;
        }
        set pong(value: SessionResponse.PingPong) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pong() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get failure() {
            return pb_1.Message.getWrapperField(this, SessionResponse.Failure, 3) as SessionResponse.Failure;
        }
        set failure(value: SessionResponse.Failure) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_failure() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get session_started() {
            return pb_1.Message.getWrapperField(this, SessionResponse.SessionStarted, 4) as SessionResponse.SessionStarted;
        }
        set session_started(value: SessionResponse.SessionStarted) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_session_started() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get session_stopped() {
            return pb_1.Message.getWrapperField(this, SessionResponse.SessionStopped, 5) as SessionResponse.SessionStopped;
        }
        set session_stopped(value: SessionResponse.SessionStopped) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_session_stopped() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get unsupported_6() {
            return pb_1.Message.getWrapperField(this, Unsupported, 6) as Unsupported;
        }
        set unsupported_6(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_unsupported_6() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get unsupported_7() {
            return pb_1.Message.getWrapperField(this, Unsupported, 7) as Unsupported;
        }
        set unsupported_7(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_unsupported_7() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get acquire_semaphore_pending() {
            return pb_1.Message.getWrapperField(this, SessionResponse.AcquireSemaphorePending, 8) as SessionResponse.AcquireSemaphorePending;
        }
        set acquire_semaphore_pending(value: SessionResponse.AcquireSemaphorePending) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_acquire_semaphore_pending() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get acquire_semaphore_result() {
            return pb_1.Message.getWrapperField(this, SessionResponse.AcquireSemaphoreResult, 9) as SessionResponse.AcquireSemaphoreResult;
        }
        set acquire_semaphore_result(value: SessionResponse.AcquireSemaphoreResult) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_acquire_semaphore_result() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get release_semaphore_result() {
            return pb_1.Message.getWrapperField(this, SessionResponse.ReleaseSemaphoreResult, 10) as SessionResponse.ReleaseSemaphoreResult;
        }
        set release_semaphore_result(value: SessionResponse.ReleaseSemaphoreResult) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_release_semaphore_result() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get describe_semaphore_result() {
            return pb_1.Message.getWrapperField(this, SessionResponse.DescribeSemaphoreResult, 11) as SessionResponse.DescribeSemaphoreResult;
        }
        set describe_semaphore_result(value: SessionResponse.DescribeSemaphoreResult) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_describe_semaphore_result() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get describe_semaphore_changed() {
            return pb_1.Message.getWrapperField(this, SessionResponse.DescribeSemaphoreChanged, 12) as SessionResponse.DescribeSemaphoreChanged;
        }
        set describe_semaphore_changed(value: SessionResponse.DescribeSemaphoreChanged) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_describe_semaphore_changed() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get create_semaphore_result() {
            return pb_1.Message.getWrapperField(this, SessionResponse.CreateSemaphoreResult, 13) as SessionResponse.CreateSemaphoreResult;
        }
        set create_semaphore_result(value: SessionResponse.CreateSemaphoreResult) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_create_semaphore_result() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get update_semaphore_result() {
            return pb_1.Message.getWrapperField(this, SessionResponse.UpdateSemaphoreResult, 14) as SessionResponse.UpdateSemaphoreResult;
        }
        set update_semaphore_result(value: SessionResponse.UpdateSemaphoreResult) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_update_semaphore_result() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get delete_semaphore_result() {
            return pb_1.Message.getWrapperField(this, SessionResponse.DeleteSemaphoreResult, 15) as SessionResponse.DeleteSemaphoreResult;
        }
        set delete_semaphore_result(value: SessionResponse.DeleteSemaphoreResult) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_delete_semaphore_result() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get unsupported_16() {
            return pb_1.Message.getWrapperField(this, Unsupported, 16) as Unsupported;
        }
        set unsupported_16(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_unsupported_16() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get unsupported_17() {
            return pb_1.Message.getWrapperField(this, Unsupported, 17) as Unsupported;
        }
        set unsupported_17(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_unsupported_17() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get unsupported_18() {
            return pb_1.Message.getWrapperField(this, Unsupported, 18) as Unsupported;
        }
        set unsupported_18(value: Unsupported) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_unsupported_18() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get response() {
            const cases: {
                [index: number]: "none" | "ping" | "pong" | "failure" | "session_started" | "session_stopped" | "unsupported_6" | "unsupported_7" | "acquire_semaphore_pending" | "acquire_semaphore_result" | "release_semaphore_result" | "describe_semaphore_result" | "describe_semaphore_changed" | "create_semaphore_result" | "update_semaphore_result" | "delete_semaphore_result" | "unsupported_16" | "unsupported_17" | "unsupported_18";
            } = {
                0: "none",
                1: "ping",
                2: "pong",
                3: "failure",
                4: "session_started",
                5: "session_stopped",
                6: "unsupported_6",
                7: "unsupported_7",
                8: "acquire_semaphore_pending",
                9: "acquire_semaphore_result",
                10: "release_semaphore_result",
                11: "describe_semaphore_result",
                12: "describe_semaphore_changed",
                13: "create_semaphore_result",
                14: "update_semaphore_result",
                15: "delete_semaphore_result",
                16: "unsupported_16",
                17: "unsupported_17",
                18: "unsupported_18"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])];
        }
        static fromObject(data: {
            ping?: ReturnType<typeof SessionResponse.PingPong.prototype.toObject>;
            pong?: ReturnType<typeof SessionResponse.PingPong.prototype.toObject>;
            failure?: ReturnType<typeof SessionResponse.Failure.prototype.toObject>;
            session_started?: ReturnType<typeof SessionResponse.SessionStarted.prototype.toObject>;
            session_stopped?: ReturnType<typeof SessionResponse.SessionStopped.prototype.toObject>;
            unsupported_6?: ReturnType<typeof Unsupported.prototype.toObject>;
            unsupported_7?: ReturnType<typeof Unsupported.prototype.toObject>;
            acquire_semaphore_pending?: ReturnType<typeof SessionResponse.AcquireSemaphorePending.prototype.toObject>;
            acquire_semaphore_result?: ReturnType<typeof SessionResponse.AcquireSemaphoreResult.prototype.toObject>;
            release_semaphore_result?: ReturnType<typeof SessionResponse.ReleaseSemaphoreResult.prototype.toObject>;
            describe_semaphore_result?: ReturnType<typeof SessionResponse.DescribeSemaphoreResult.prototype.toObject>;
            describe_semaphore_changed?: ReturnType<typeof SessionResponse.DescribeSemaphoreChanged.prototype.toObject>;
            create_semaphore_result?: ReturnType<typeof SessionResponse.CreateSemaphoreResult.prototype.toObject>;
            update_semaphore_result?: ReturnType<typeof SessionResponse.UpdateSemaphoreResult.prototype.toObject>;
            delete_semaphore_result?: ReturnType<typeof SessionResponse.DeleteSemaphoreResult.prototype.toObject>;
            unsupported_16?: ReturnType<typeof Unsupported.prototype.toObject>;
            unsupported_17?: ReturnType<typeof Unsupported.prototype.toObject>;
            unsupported_18?: ReturnType<typeof Unsupported.prototype.toObject>;
        }): SessionResponse {
            const message = new SessionResponse({});
            if (data.ping != null) {
                message.ping = SessionResponse.PingPong.fromObject(data.ping);
            }
            if (data.pong != null) {
                message.pong = SessionResponse.PingPong.fromObject(data.pong);
            }
            if (data.failure != null) {
                message.failure = SessionResponse.Failure.fromObject(data.failure);
            }
            if (data.session_started != null) {
                message.session_started = SessionResponse.SessionStarted.fromObject(data.session_started);
            }
            if (data.session_stopped != null) {
                message.session_stopped = SessionResponse.SessionStopped.fromObject(data.session_stopped);
            }
            if (data.unsupported_6 != null) {
                message.unsupported_6 = Unsupported.fromObject(data.unsupported_6);
            }
            if (data.unsupported_7 != null) {
                message.unsupported_7 = Unsupported.fromObject(data.unsupported_7);
            }
            if (data.acquire_semaphore_pending != null) {
                message.acquire_semaphore_pending = SessionResponse.AcquireSemaphorePending.fromObject(data.acquire_semaphore_pending);
            }
            if (data.acquire_semaphore_result != null) {
                message.acquire_semaphore_result = SessionResponse.AcquireSemaphoreResult.fromObject(data.acquire_semaphore_result);
            }
            if (data.release_semaphore_result != null) {
                message.release_semaphore_result = SessionResponse.ReleaseSemaphoreResult.fromObject(data.release_semaphore_result);
            }
            if (data.describe_semaphore_result != null) {
                message.describe_semaphore_result = SessionResponse.DescribeSemaphoreResult.fromObject(data.describe_semaphore_result);
            }
            if (data.describe_semaphore_changed != null) {
                message.describe_semaphore_changed = SessionResponse.DescribeSemaphoreChanged.fromObject(data.describe_semaphore_changed);
            }
            if (data.create_semaphore_result != null) {
                message.create_semaphore_result = SessionResponse.CreateSemaphoreResult.fromObject(data.create_semaphore_result);
            }
            if (data.update_semaphore_result != null) {
                message.update_semaphore_result = SessionResponse.UpdateSemaphoreResult.fromObject(data.update_semaphore_result);
            }
            if (data.delete_semaphore_result != null) {
                message.delete_semaphore_result = SessionResponse.DeleteSemaphoreResult.fromObject(data.delete_semaphore_result);
            }
            if (data.unsupported_16 != null) {
                message.unsupported_16 = Unsupported.fromObject(data.unsupported_16);
            }
            if (data.unsupported_17 != null) {
                message.unsupported_17 = Unsupported.fromObject(data.unsupported_17);
            }
            if (data.unsupported_18 != null) {
                message.unsupported_18 = Unsupported.fromObject(data.unsupported_18);
            }
            return message;
        }
        toObject() {
            const data: {
                ping?: ReturnType<typeof SessionResponse.PingPong.prototype.toObject>;
                pong?: ReturnType<typeof SessionResponse.PingPong.prototype.toObject>;
                failure?: ReturnType<typeof SessionResponse.Failure.prototype.toObject>;
                session_started?: ReturnType<typeof SessionResponse.SessionStarted.prototype.toObject>;
                session_stopped?: ReturnType<typeof SessionResponse.SessionStopped.prototype.toObject>;
                unsupported_6?: ReturnType<typeof Unsupported.prototype.toObject>;
                unsupported_7?: ReturnType<typeof Unsupported.prototype.toObject>;
                acquire_semaphore_pending?: ReturnType<typeof SessionResponse.AcquireSemaphorePending.prototype.toObject>;
                acquire_semaphore_result?: ReturnType<typeof SessionResponse.AcquireSemaphoreResult.prototype.toObject>;
                release_semaphore_result?: ReturnType<typeof SessionResponse.ReleaseSemaphoreResult.prototype.toObject>;
                describe_semaphore_result?: ReturnType<typeof SessionResponse.DescribeSemaphoreResult.prototype.toObject>;
                describe_semaphore_changed?: ReturnType<typeof SessionResponse.DescribeSemaphoreChanged.prototype.toObject>;
                create_semaphore_result?: ReturnType<typeof SessionResponse.CreateSemaphoreResult.prototype.toObject>;
                update_semaphore_result?: ReturnType<typeof SessionResponse.UpdateSemaphoreResult.prototype.toObject>;
                delete_semaphore_result?: ReturnType<typeof SessionResponse.DeleteSemaphoreResult.prototype.toObject>;
                unsupported_16?: ReturnType<typeof Unsupported.prototype.toObject>;
                unsupported_17?: ReturnType<typeof Unsupported.prototype.toObject>;
                unsupported_18?: ReturnType<typeof Unsupported.prototype.toObject>;
            } = {};
            if (this.ping != null) {
                data.ping = this.ping.toObject();
            }
            if (this.pong != null) {
                data.pong = this.pong.toObject();
            }
            if (this.failure != null) {
                data.failure = this.failure.toObject();
            }
            if (this.session_started != null) {
                data.session_started = this.session_started.toObject();
            }
            if (this.session_stopped != null) {
                data.session_stopped = this.session_stopped.toObject();
            }
            if (this.unsupported_6 != null) {
                data.unsupported_6 = this.unsupported_6.toObject();
            }
            if (this.unsupported_7 != null) {
                data.unsupported_7 = this.unsupported_7.toObject();
            }
            if (this.acquire_semaphore_pending != null) {
                data.acquire_semaphore_pending = this.acquire_semaphore_pending.toObject();
            }
            if (this.acquire_semaphore_result != null) {
                data.acquire_semaphore_result = this.acquire_semaphore_result.toObject();
            }
            if (this.release_semaphore_result != null) {
                data.release_semaphore_result = this.release_semaphore_result.toObject();
            }
            if (this.describe_semaphore_result != null) {
                data.describe_semaphore_result = this.describe_semaphore_result.toObject();
            }
            if (this.describe_semaphore_changed != null) {
                data.describe_semaphore_changed = this.describe_semaphore_changed.toObject();
            }
            if (this.create_semaphore_result != null) {
                data.create_semaphore_result = this.create_semaphore_result.toObject();
            }
            if (this.update_semaphore_result != null) {
                data.update_semaphore_result = this.update_semaphore_result.toObject();
            }
            if (this.delete_semaphore_result != null) {
                data.delete_semaphore_result = this.delete_semaphore_result.toObject();
            }
            if (this.unsupported_16 != null) {
                data.unsupported_16 = this.unsupported_16.toObject();
            }
            if (this.unsupported_17 != null) {
                data.unsupported_17 = this.unsupported_17.toObject();
            }
            if (this.unsupported_18 != null) {
                data.unsupported_18 = this.unsupported_18.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ping)
                writer.writeMessage(1, this.ping, () => this.ping.serialize(writer));
            if (this.has_pong)
                writer.writeMessage(2, this.pong, () => this.pong.serialize(writer));
            if (this.has_failure)
                writer.writeMessage(3, this.failure, () => this.failure.serialize(writer));
            if (this.has_session_started)
                writer.writeMessage(4, this.session_started, () => this.session_started.serialize(writer));
            if (this.has_session_stopped)
                writer.writeMessage(5, this.session_stopped, () => this.session_stopped.serialize(writer));
            if (this.has_unsupported_6)
                writer.writeMessage(6, this.unsupported_6, () => this.unsupported_6.serialize(writer));
            if (this.has_unsupported_7)
                writer.writeMessage(7, this.unsupported_7, () => this.unsupported_7.serialize(writer));
            if (this.has_acquire_semaphore_pending)
                writer.writeMessage(8, this.acquire_semaphore_pending, () => this.acquire_semaphore_pending.serialize(writer));
            if (this.has_acquire_semaphore_result)
                writer.writeMessage(9, this.acquire_semaphore_result, () => this.acquire_semaphore_result.serialize(writer));
            if (this.has_release_semaphore_result)
                writer.writeMessage(10, this.release_semaphore_result, () => this.release_semaphore_result.serialize(writer));
            if (this.has_describe_semaphore_result)
                writer.writeMessage(11, this.describe_semaphore_result, () => this.describe_semaphore_result.serialize(writer));
            if (this.has_describe_semaphore_changed)
                writer.writeMessage(12, this.describe_semaphore_changed, () => this.describe_semaphore_changed.serialize(writer));
            if (this.has_create_semaphore_result)
                writer.writeMessage(13, this.create_semaphore_result, () => this.create_semaphore_result.serialize(writer));
            if (this.has_update_semaphore_result)
                writer.writeMessage(14, this.update_semaphore_result, () => this.update_semaphore_result.serialize(writer));
            if (this.has_delete_semaphore_result)
                writer.writeMessage(15, this.delete_semaphore_result, () => this.delete_semaphore_result.serialize(writer));
            if (this.has_unsupported_16)
                writer.writeMessage(16, this.unsupported_16, () => this.unsupported_16.serialize(writer));
            if (this.has_unsupported_17)
                writer.writeMessage(17, this.unsupported_17, () => this.unsupported_17.serialize(writer));
            if (this.has_unsupported_18)
                writer.writeMessage(18, this.unsupported_18, () => this.unsupported_18.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ping, () => message.ping = SessionResponse.PingPong.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.pong, () => message.pong = SessionResponse.PingPong.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.failure, () => message.failure = SessionResponse.Failure.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.session_started, () => message.session_started = SessionResponse.SessionStarted.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.session_stopped, () => message.session_stopped = SessionResponse.SessionStopped.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.unsupported_6, () => message.unsupported_6 = Unsupported.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.unsupported_7, () => message.unsupported_7 = Unsupported.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.acquire_semaphore_pending, () => message.acquire_semaphore_pending = SessionResponse.AcquireSemaphorePending.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.acquire_semaphore_result, () => message.acquire_semaphore_result = SessionResponse.AcquireSemaphoreResult.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.release_semaphore_result, () => message.release_semaphore_result = SessionResponse.ReleaseSemaphoreResult.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.describe_semaphore_result, () => message.describe_semaphore_result = SessionResponse.DescribeSemaphoreResult.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.describe_semaphore_changed, () => message.describe_semaphore_changed = SessionResponse.DescribeSemaphoreChanged.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.create_semaphore_result, () => message.create_semaphore_result = SessionResponse.CreateSemaphoreResult.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.update_semaphore_result, () => message.update_semaphore_result = SessionResponse.UpdateSemaphoreResult.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.delete_semaphore_result, () => message.delete_semaphore_result = SessionResponse.DeleteSemaphoreResult.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.unsupported_16, () => message.unsupported_16 = Unsupported.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.unsupported_17, () => message.unsupported_17 = Unsupported.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.unsupported_18, () => message.unsupported_18 = Unsupported.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionResponse {
            return SessionResponse.deserialize(bytes);
        }
    }
    export namespace SessionResponse {
        export class PingPong extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                opaque?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("opaque" in data && data.opaque != undefined) {
                        this.opaque = data.opaque;
                    }
                }
            }
            get opaque() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set opaque(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                opaque?: number;
            }): PingPong {
                const message = new PingPong({});
                if (data.opaque != null) {
                    message.opaque = data.opaque;
                }
                return message;
            }
            toObject() {
                const data: {
                    opaque?: number;
                } = {};
                if (this.opaque != null) {
                    data.opaque = this.opaque;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.opaque != 0)
                    writer.writeUint64(1, this.opaque);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingPong {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingPong();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.opaque = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PingPong {
                return PingPong.deserialize(bytes);
            }
        }
        export class Failure extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: dependency_3.Ydb.Issue.IssueMessage[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                }
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_2.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_2.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 1, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 2) as dependency_3.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
            }): Failure {
                const message = new Failure({});
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    status?: dependency_2.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                } = {};
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.status != dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(1, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(2, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Failure {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Failure();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.status = reader.readEnum();
                            break;
                        case 2:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Failure {
                return Failure.deserialize(bytes);
            }
        }
        export class SessionStarted extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                session_id?: number;
                timeout_millis?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("session_id" in data && data.session_id != undefined) {
                        this.session_id = data.session_id;
                    }
                    if ("timeout_millis" in data && data.timeout_millis != undefined) {
                        this.timeout_millis = data.timeout_millis;
                    }
                }
            }
            get session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get timeout_millis() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set timeout_millis(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                session_id?: number;
                timeout_millis?: number;
            }): SessionStarted {
                const message = new SessionStarted({});
                if (data.session_id != null) {
                    message.session_id = data.session_id;
                }
                if (data.timeout_millis != null) {
                    message.timeout_millis = data.timeout_millis;
                }
                return message;
            }
            toObject() {
                const data: {
                    session_id?: number;
                    timeout_millis?: number;
                } = {};
                if (this.session_id != null) {
                    data.session_id = this.session_id;
                }
                if (this.timeout_millis != null) {
                    data.timeout_millis = this.timeout_millis;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.session_id != 0)
                    writer.writeUint64(1, this.session_id);
                if (this.timeout_millis != 0)
                    writer.writeUint64(2, this.timeout_millis);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStarted {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStarted();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.session_id = reader.readUint64();
                            break;
                        case 2:
                            message.timeout_millis = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SessionStarted {
                return SessionStarted.deserialize(bytes);
            }
        }
        export class SessionStopped extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                session_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("session_id" in data && data.session_id != undefined) {
                        this.session_id = data.session_id;
                    }
                }
            }
            get session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                session_id?: number;
            }): SessionStopped {
                const message = new SessionStopped({});
                if (data.session_id != null) {
                    message.session_id = data.session_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    session_id?: number;
                } = {};
                if (this.session_id != null) {
                    data.session_id = this.session_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.session_id != 0)
                    writer.writeUint64(1, this.session_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionStopped {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionStopped();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.session_id = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SessionStopped {
                return SessionStopped.deserialize(bytes);
            }
        }
        export class AcquireSemaphorePending extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                req_id?: number;
            }): AcquireSemaphorePending {
                const message = new AcquireSemaphorePending({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcquireSemaphorePending {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcquireSemaphorePending();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AcquireSemaphorePending {
                return AcquireSemaphorePending.deserialize(bytes);
            }
        }
        export class AcquireSemaphoreResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: dependency_3.Ydb.Issue.IssueMessage[];
                acquired?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                    if ("acquired" in data && data.acquired != undefined) {
                        this.acquired = data.acquired;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_2.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_2.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 2, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 3) as dependency_3.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get acquired() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set acquired(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                acquired?: boolean;
            }): AcquireSemaphoreResult {
                const message = new AcquireSemaphoreResult({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
                }
                if (data.acquired != null) {
                    message.acquired = data.acquired;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    status?: dependency_2.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                    acquired?: boolean;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
                }
                if (this.acquired != null) {
                    data.acquired = this.acquired;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.status != dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(2, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(3, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (this.acquired != false)
                    writer.writeBool(4, this.acquired);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AcquireSemaphoreResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AcquireSemaphoreResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.status = reader.readEnum();
                            break;
                        case 3:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                            break;
                        case 4:
                            message.acquired = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AcquireSemaphoreResult {
                return AcquireSemaphoreResult.deserialize(bytes);
            }
        }
        export class ReleaseSemaphoreResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: dependency_3.Ydb.Issue.IssueMessage[];
                released?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                    if ("released" in data && data.released != undefined) {
                        this.released = data.released;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_2.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_2.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 2, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 3) as dependency_3.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get released() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set released(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                released?: boolean;
            }): ReleaseSemaphoreResult {
                const message = new ReleaseSemaphoreResult({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
                }
                if (data.released != null) {
                    message.released = data.released;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    status?: dependency_2.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                    released?: boolean;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
                }
                if (this.released != null) {
                    data.released = this.released;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.status != dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(2, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(3, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (this.released != false)
                    writer.writeBool(4, this.released);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReleaseSemaphoreResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReleaseSemaphoreResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.status = reader.readEnum();
                            break;
                        case 3:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                            break;
                        case 4:
                            message.released = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ReleaseSemaphoreResult {
                return ReleaseSemaphoreResult.deserialize(bytes);
            }
        }
        export class DescribeSemaphoreResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: dependency_3.Ydb.Issue.IssueMessage[];
                semaphore_description?: SemaphoreDescription;
                watch_added?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                    if ("semaphore_description" in data && data.semaphore_description != undefined) {
                        this.semaphore_description = data.semaphore_description;
                    }
                    if ("watch_added" in data && data.watch_added != undefined) {
                        this.watch_added = data.watch_added;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_2.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_2.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 2, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 3) as dependency_3.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get semaphore_description() {
                return pb_1.Message.getWrapperField(this, SemaphoreDescription, 4) as SemaphoreDescription;
            }
            set semaphore_description(value: SemaphoreDescription) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_semaphore_description() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get watch_added() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set watch_added(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                semaphore_description?: ReturnType<typeof SemaphoreDescription.prototype.toObject>;
                watch_added?: boolean;
            }): DescribeSemaphoreResult {
                const message = new DescribeSemaphoreResult({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
                }
                if (data.semaphore_description != null) {
                    message.semaphore_description = SemaphoreDescription.fromObject(data.semaphore_description);
                }
                if (data.watch_added != null) {
                    message.watch_added = data.watch_added;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    status?: dependency_2.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                    semaphore_description?: ReturnType<typeof SemaphoreDescription.prototype.toObject>;
                    watch_added?: boolean;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
                }
                if (this.semaphore_description != null) {
                    data.semaphore_description = this.semaphore_description.toObject();
                }
                if (this.watch_added != null) {
                    data.watch_added = this.watch_added;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.status != dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(2, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(3, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (this.has_semaphore_description)
                    writer.writeMessage(4, this.semaphore_description, () => this.semaphore_description.serialize(writer));
                if (this.watch_added != false)
                    writer.writeBool(5, this.watch_added);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeSemaphoreResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeSemaphoreResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.status = reader.readEnum();
                            break;
                        case 3:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                            break;
                        case 4:
                            reader.readMessage(message.semaphore_description, () => message.semaphore_description = SemaphoreDescription.deserialize(reader));
                            break;
                        case 5:
                            message.watch_added = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DescribeSemaphoreResult {
                return DescribeSemaphoreResult.deserialize(bytes);
            }
        }
        export class DescribeSemaphoreChanged extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                data_changed?: boolean;
                owners_changed?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("data_changed" in data && data.data_changed != undefined) {
                        this.data_changed = data.data_changed;
                    }
                    if ("owners_changed" in data && data.owners_changed != undefined) {
                        this.owners_changed = data.owners_changed;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get data_changed() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set data_changed(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get owners_changed() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set owners_changed(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                req_id?: number;
                data_changed?: boolean;
                owners_changed?: boolean;
            }): DescribeSemaphoreChanged {
                const message = new DescribeSemaphoreChanged({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.data_changed != null) {
                    message.data_changed = data.data_changed;
                }
                if (data.owners_changed != null) {
                    message.owners_changed = data.owners_changed;
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    data_changed?: boolean;
                    owners_changed?: boolean;
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.data_changed != null) {
                    data.data_changed = this.data_changed;
                }
                if (this.owners_changed != null) {
                    data.owners_changed = this.owners_changed;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.data_changed != false)
                    writer.writeBool(2, this.data_changed);
                if (this.owners_changed != false)
                    writer.writeBool(3, this.owners_changed);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeSemaphoreChanged {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeSemaphoreChanged();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.data_changed = reader.readBool();
                            break;
                        case 3:
                            message.owners_changed = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DescribeSemaphoreChanged {
                return DescribeSemaphoreChanged.deserialize(bytes);
            }
        }
        export class CreateSemaphoreResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: dependency_3.Ydb.Issue.IssueMessage[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_2.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_2.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 2, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 3) as dependency_3.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
            }): CreateSemaphoreResult {
                const message = new CreateSemaphoreResult({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    status?: dependency_2.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.status != dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(2, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(3, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSemaphoreResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSemaphoreResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.status = reader.readEnum();
                            break;
                        case 3:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CreateSemaphoreResult {
                return CreateSemaphoreResult.deserialize(bytes);
            }
        }
        export class UpdateSemaphoreResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: dependency_3.Ydb.Issue.IssueMessage[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_2.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_2.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 2, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 3) as dependency_3.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
            }): UpdateSemaphoreResult {
                const message = new UpdateSemaphoreResult({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    status?: dependency_2.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.status != dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(2, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(3, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateSemaphoreResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateSemaphoreResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.status = reader.readEnum();
                            break;
                        case 3:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UpdateSemaphoreResult {
                return UpdateSemaphoreResult.deserialize(bytes);
            }
        }
        export class DeleteSemaphoreResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: dependency_3.Ydb.Issue.IssueMessage[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("req_id" in data && data.req_id != undefined) {
                        this.req_id = data.req_id;
                    }
                    if ("status" in data && data.status != undefined) {
                        this.status = data.status;
                    }
                    if ("issues" in data && data.issues != undefined) {
                        this.issues = data.issues;
                    }
                }
            }
            get req_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set req_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get status() {
                return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_2.Ydb.StatusIds.StatusCode;
            }
            set status(value: dependency_2.Ydb.StatusIds.StatusCode) {
                pb_1.Message.setField(this, 2, value);
            }
            get issues() {
                return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 3) as dependency_3.Ydb.Issue.IssueMessage[];
            }
            set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                req_id?: number;
                status?: dependency_2.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
            }): DeleteSemaphoreResult {
                const message = new DeleteSemaphoreResult({});
                if (data.req_id != null) {
                    message.req_id = data.req_id;
                }
                if (data.status != null) {
                    message.status = data.status;
                }
                if (data.issues != null) {
                    message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    req_id?: number;
                    status?: dependency_2.Ydb.StatusIds.StatusCode;
                    issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                } = {};
                if (this.req_id != null) {
                    data.req_id = this.req_id;
                }
                if (this.status != null) {
                    data.status = this.status;
                }
                if (this.issues != null) {
                    data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.req_id != 0)
                    writer.writeUint64(1, this.req_id);
                if (this.status != dependency_2.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                    writer.writeEnum(2, this.status);
                if (this.issues.length)
                    writer.writeRepeatedMessage(3, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSemaphoreResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSemaphoreResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.req_id = reader.readUint64();
                            break;
                        case 2:
                            message.status = reader.readEnum();
                            break;
                        case 3:
                            reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DeleteSemaphoreResult {
                return DeleteSemaphoreResult.deserialize(bytes);
            }
        }
    }
    export class CreateNodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            config?: Config;
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config() {
            return pb_1.Message.getWrapperField(this, Config, 2) as Config;
        }
        set config(value: Config) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 3) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            path?: string;
            config?: ReturnType<typeof Config.prototype.toObject>;
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
        }): CreateNodeRequest {
            const message = new CreateNodeRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.config != null) {
                message.config = Config.fromObject(data.config);
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                config?: ReturnType<typeof Config.prototype.toObject>;
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.has_config)
                writer.writeMessage(2, this.config, () => this.config.serialize(writer));
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.config, () => message.config = Config.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNodeRequest {
            return CreateNodeRequest.deserialize(bytes);
        }
    }
    export class CreateNodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): CreateNodeResponse {
            const message = new CreateNodeResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNodeResponse {
            return CreateNodeResponse.deserialize(bytes);
        }
    }
    export class AlterNodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            config?: Config;
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get config() {
            return pb_1.Message.getWrapperField(this, Config, 2) as Config;
        }
        set config(value: Config) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 3) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            path?: string;
            config?: ReturnType<typeof Config.prototype.toObject>;
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
        }): AlterNodeRequest {
            const message = new AlterNodeRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.config != null) {
                message.config = Config.fromObject(data.config);
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                config?: ReturnType<typeof Config.prototype.toObject>;
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.has_config)
                writer.writeMessage(2, this.config, () => this.config.serialize(writer));
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterNodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterNodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.config, () => message.config = Config.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterNodeRequest {
            return AlterNodeRequest.deserialize(bytes);
        }
    }
    export class AlterNodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): AlterNodeResponse {
            const message = new AlterNodeResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterNodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterNodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterNodeResponse {
            return AlterNodeResponse.deserialize(bytes);
        }
    }
    export class DropNodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 2) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            path?: string;
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
        }): DropNodeRequest {
            const message = new DropNodeRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.has_operation_params)
                writer.writeMessage(2, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropNodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropNodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropNodeRequest {
            return DropNodeRequest.deserialize(bytes);
        }
    }
    export class DropNodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): DropNodeResponse {
            const message = new DropNodeResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropNodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropNodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropNodeResponse {
            return DropNodeResponse.deserialize(bytes);
        }
    }
    export class DescribeNodeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            operation_params?: dependency_1.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.OperationParams, 2) as dependency_1.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_1.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            path?: string;
            operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
        }): DescribeNodeRequest {
            const message = new DescribeNodeRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_1.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                operation_params?: ReturnType<typeof dependency_1.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.has_operation_params)
                writer.writeMessage(2, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeNodeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeNodeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_1.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeNodeRequest {
            return DescribeNodeRequest.deserialize(bytes);
        }
    }
    export class DescribeNodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): DescribeNodeResponse {
            const message = new DescribeNodeResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeNodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeNodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeNodeResponse {
            return DescribeNodeResponse.deserialize(bytes);
        }
    }
    export class DescribeNodeResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            self?: dependency_4.Ydb.Scheme.Entry;
            config?: Config;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("self" in data && data.self != undefined) {
                    this.self = data.self;
                }
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
            }
        }
        get self() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Scheme.Entry, 1) as dependency_4.Ydb.Scheme.Entry;
        }
        set self(value: dependency_4.Ydb.Scheme.Entry) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_self() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get config() {
            return pb_1.Message.getWrapperField(this, Config, 2) as Config;
        }
        set config(value: Config) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            self?: ReturnType<typeof dependency_4.Ydb.Scheme.Entry.prototype.toObject>;
            config?: ReturnType<typeof Config.prototype.toObject>;
        }): DescribeNodeResult {
            const message = new DescribeNodeResult({});
            if (data.self != null) {
                message.self = dependency_4.Ydb.Scheme.Entry.fromObject(data.self);
            }
            if (data.config != null) {
                message.config = Config.fromObject(data.config);
            }
            return message;
        }
        toObject() {
            const data: {
                self?: ReturnType<typeof dependency_4.Ydb.Scheme.Entry.prototype.toObject>;
                config?: ReturnType<typeof Config.prototype.toObject>;
            } = {};
            if (this.self != null) {
                data.self = this.self.toObject();
            }
            if (this.config != null) {
                data.config = this.config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_self)
                writer.writeMessage(1, this.self, () => this.self.serialize(writer));
            if (this.has_config)
                writer.writeMessage(2, this.config, () => this.config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeNodeResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeNodeResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.self, () => message.self = dependency_4.Ydb.Scheme.Entry.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.config, () => message.config = Config.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeNodeResult {
            return DescribeNodeResult.deserialize(bytes);
        }
    }
}
