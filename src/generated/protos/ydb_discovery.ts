/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_discovery.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ydb_operation";
import * as pb_1 from "google-protobuf";
export namespace Ydb.Discovery {
    export class ListEndpointsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            database?: string;
            service?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("database" in data && data.database != undefined) {
                    this.database = data.database;
                }
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
            }
        }
        get database() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set database(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get service() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set service(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            database?: string;
            service?: string[];
        }): ListEndpointsRequest {
            const message = new ListEndpointsRequest({});
            if (data.database != null) {
                message.database = data.database;
            }
            if (data.service != null) {
                message.service = data.service;
            }
            return message;
        }
        toObject() {
            const data: {
                database?: string;
                service?: string[];
            } = {};
            if (this.database != null) {
                data.database = this.database;
            }
            if (this.service != null) {
                data.service = this.service;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.database.length)
                writer.writeString(1, this.database);
            if (this.service.length)
                writer.writeRepeatedString(2, this.service);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEndpointsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEndpointsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.database = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEndpointsRequest {
            return ListEndpointsRequest.deserialize(bytes);
        }
    }
    export class EndpointInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            port?: number;
            load_factor?: number;
            ssl?: boolean;
            service?: string[];
            location?: string;
            node_id?: number;
            ip_v4?: string[];
            ip_v6?: string[];
            ssl_target_name_override?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 8, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("port" in data && data.port != undefined) {
                    this.port = data.port;
                }
                if ("load_factor" in data && data.load_factor != undefined) {
                    this.load_factor = data.load_factor;
                }
                if ("ssl" in data && data.ssl != undefined) {
                    this.ssl = data.ssl;
                }
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("node_id" in data && data.node_id != undefined) {
                    this.node_id = data.node_id;
                }
                if ("ip_v4" in data && data.ip_v4 != undefined) {
                    this.ip_v4 = data.ip_v4;
                }
                if ("ip_v6" in data && data.ip_v6 != undefined) {
                    this.ip_v6 = data.ip_v6;
                }
                if ("ssl_target_name_override" in data && data.ssl_target_name_override != undefined) {
                    this.ssl_target_name_override = data.ssl_target_name_override;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get port() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set port(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get load_factor() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set load_factor(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get ssl() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set ssl(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get service() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set service(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get node_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set node_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get ip_v4() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set ip_v4(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get ip_v6() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set ip_v6(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get ssl_target_name_override() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set ssl_target_name_override(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            address?: string;
            port?: number;
            load_factor?: number;
            ssl?: boolean;
            service?: string[];
            location?: string;
            node_id?: number;
            ip_v4?: string[];
            ip_v6?: string[];
            ssl_target_name_override?: string;
        }): EndpointInfo {
            const message = new EndpointInfo({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.port != null) {
                message.port = data.port;
            }
            if (data.load_factor != null) {
                message.load_factor = data.load_factor;
            }
            if (data.ssl != null) {
                message.ssl = data.ssl;
            }
            if (data.service != null) {
                message.service = data.service;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.node_id != null) {
                message.node_id = data.node_id;
            }
            if (data.ip_v4 != null) {
                message.ip_v4 = data.ip_v4;
            }
            if (data.ip_v6 != null) {
                message.ip_v6 = data.ip_v6;
            }
            if (data.ssl_target_name_override != null) {
                message.ssl_target_name_override = data.ssl_target_name_override;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                port?: number;
                load_factor?: number;
                ssl?: boolean;
                service?: string[];
                location?: string;
                node_id?: number;
                ip_v4?: string[];
                ip_v6?: string[];
                ssl_target_name_override?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.port != null) {
                data.port = this.port;
            }
            if (this.load_factor != null) {
                data.load_factor = this.load_factor;
            }
            if (this.ssl != null) {
                data.ssl = this.ssl;
            }
            if (this.service != null) {
                data.service = this.service;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.node_id != null) {
                data.node_id = this.node_id;
            }
            if (this.ip_v4 != null) {
                data.ip_v4 = this.ip_v4;
            }
            if (this.ip_v6 != null) {
                data.ip_v6 = this.ip_v6;
            }
            if (this.ssl_target_name_override != null) {
                data.ssl_target_name_override = this.ssl_target_name_override;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.port != 0)
                writer.writeUint32(2, this.port);
            if (this.load_factor != 0)
                writer.writeFloat(3, this.load_factor);
            if (this.ssl != false)
                writer.writeBool(4, this.ssl);
            if (this.service.length)
                writer.writeRepeatedString(5, this.service);
            if (this.location.length)
                writer.writeString(6, this.location);
            if (this.node_id != 0)
                writer.writeUint32(7, this.node_id);
            if (this.ip_v4.length)
                writer.writeRepeatedString(8, this.ip_v4);
            if (this.ip_v6.length)
                writer.writeRepeatedString(9, this.ip_v6);
            if (this.ssl_target_name_override.length)
                writer.writeString(10, this.ssl_target_name_override);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.port = reader.readUint32();
                        break;
                    case 3:
                        message.load_factor = reader.readFloat();
                        break;
                    case 4:
                        message.ssl = reader.readBool();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.location = reader.readString();
                        break;
                    case 7:
                        message.node_id = reader.readUint32();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        message.ssl_target_name_override = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointInfo {
            return EndpointInfo.deserialize(bytes);
        }
    }
    export class ListEndpointsResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpoints?: EndpointInfo[];
            self_location?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpoints" in data && data.endpoints != undefined) {
                    this.endpoints = data.endpoints;
                }
                if ("self_location" in data && data.self_location != undefined) {
                    this.self_location = data.self_location;
                }
            }
        }
        get endpoints() {
            return pb_1.Message.getRepeatedWrapperField(this, EndpointInfo, 1) as EndpointInfo[];
        }
        set endpoints(value: EndpointInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get self_location() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set self_location(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            endpoints?: ReturnType<typeof EndpointInfo.prototype.toObject>[];
            self_location?: string;
        }): ListEndpointsResult {
            const message = new ListEndpointsResult({});
            if (data.endpoints != null) {
                message.endpoints = data.endpoints.map(item => EndpointInfo.fromObject(item));
            }
            if (data.self_location != null) {
                message.self_location = data.self_location;
            }
            return message;
        }
        toObject() {
            const data: {
                endpoints?: ReturnType<typeof EndpointInfo.prototype.toObject>[];
                self_location?: string;
            } = {};
            if (this.endpoints != null) {
                data.endpoints = this.endpoints.map((item: EndpointInfo) => item.toObject());
            }
            if (this.self_location != null) {
                data.self_location = this.self_location;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpoints.length)
                writer.writeRepeatedMessage(1, this.endpoints, (item: EndpointInfo) => item.serialize(writer));
            if (this.self_location.length)
                writer.writeString(2, this.self_location);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEndpointsResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEndpointsResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.endpoints, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EndpointInfo.deserialize(reader), EndpointInfo));
                        break;
                    case 2:
                        message.self_location = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEndpointsResult {
            return ListEndpointsResult.deserialize(bytes);
        }
    }
    export class ListEndpointsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): ListEndpointsResponse {
            const message = new ListEndpointsResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEndpointsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEndpointsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListEndpointsResponse {
            return ListEndpointsResponse.deserialize(bytes);
        }
    }
    export class WhoAmIRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            include_groups?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("include_groups" in data && data.include_groups != undefined) {
                    this.include_groups = data.include_groups;
                }
            }
        }
        get include_groups() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set include_groups(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            include_groups?: boolean;
        }): WhoAmIRequest {
            const message = new WhoAmIRequest({});
            if (data.include_groups != null) {
                message.include_groups = data.include_groups;
            }
            return message;
        }
        toObject() {
            const data: {
                include_groups?: boolean;
            } = {};
            if (this.include_groups != null) {
                data.include_groups = this.include_groups;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.include_groups != false)
                writer.writeBool(1, this.include_groups);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhoAmIRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhoAmIRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.include_groups = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhoAmIRequest {
            return WhoAmIRequest.deserialize(bytes);
        }
    }
    export class WhoAmIResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: string;
            groups?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("groups" in data && data.groups != undefined) {
                    this.groups = data.groups;
                }
            }
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get groups() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set groups(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user?: string;
            groups?: string[];
        }): WhoAmIResult {
            const message = new WhoAmIResult({});
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.groups != null) {
                message.groups = data.groups;
            }
            return message;
        }
        toObject() {
            const data: {
                user?: string;
                groups?: string[];
            } = {};
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.groups != null) {
                data.groups = this.groups;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user.length)
                writer.writeString(1, this.user);
            if (this.groups.length)
                writer.writeRepeatedString(2, this.groups);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhoAmIResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhoAmIResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhoAmIResult {
            return WhoAmIResult.deserialize(bytes);
        }
    }
    export class WhoAmIResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_1.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_1.Ydb.Operations.Operation, 1) as dependency_1.Ydb.Operations.Operation;
        }
        set operation(value: dependency_1.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
        }): WhoAmIResponse {
            const message = new WhoAmIResponse({});
            if (data.operation != null) {
                message.operation = dependency_1.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_1.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WhoAmIResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WhoAmIResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_1.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WhoAmIResponse {
            return WhoAmIResponse.deserialize(bytes);
        }
    }
}
