/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_formats.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace Ydb.Formats {
    export class ArrowBatchSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schema?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schema" in data && data.schema != undefined) {
                    this.schema = data.schema;
                }
            }
        }
        get schema() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set schema(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            schema?: Uint8Array;
        }): ArrowBatchSettings {
            const message = new ArrowBatchSettings({});
            if (data.schema != null) {
                message.schema = data.schema;
            }
            return message;
        }
        toObject() {
            const data: {
                schema?: Uint8Array;
            } = {};
            if (this.schema != null) {
                data.schema = this.schema;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schema.length)
                writer.writeBytes(1, this.schema);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArrowBatchSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArrowBatchSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schema = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArrowBatchSettings {
            return ArrowBatchSettings.deserialize(bytes);
        }
    }
    export class CsvSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            skip_rows?: number;
            delimiter?: Uint8Array;
            null_value?: Uint8Array;
            header?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("skip_rows" in data && data.skip_rows != undefined) {
                    this.skip_rows = data.skip_rows;
                }
                if ("delimiter" in data && data.delimiter != undefined) {
                    this.delimiter = data.delimiter;
                }
                if ("null_value" in data && data.null_value != undefined) {
                    this.null_value = data.null_value;
                }
                if ("header" in data && data.header != undefined) {
                    this.header = data.header;
                }
            }
        }
        get skip_rows() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set skip_rows(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get delimiter() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set delimiter(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get null_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set null_value(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get header() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set header(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            skip_rows?: number;
            delimiter?: Uint8Array;
            null_value?: Uint8Array;
            header?: boolean;
        }): CsvSettings {
            const message = new CsvSettings({});
            if (data.skip_rows != null) {
                message.skip_rows = data.skip_rows;
            }
            if (data.delimiter != null) {
                message.delimiter = data.delimiter;
            }
            if (data.null_value != null) {
                message.null_value = data.null_value;
            }
            if (data.header != null) {
                message.header = data.header;
            }
            return message;
        }
        toObject() {
            const data: {
                skip_rows?: number;
                delimiter?: Uint8Array;
                null_value?: Uint8Array;
                header?: boolean;
            } = {};
            if (this.skip_rows != null) {
                data.skip_rows = this.skip_rows;
            }
            if (this.delimiter != null) {
                data.delimiter = this.delimiter;
            }
            if (this.null_value != null) {
                data.null_value = this.null_value;
            }
            if (this.header != null) {
                data.header = this.header;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.skip_rows != 0)
                writer.writeUint32(1, this.skip_rows);
            if (this.delimiter.length)
                writer.writeBytes(2, this.delimiter);
            if (this.null_value.length)
                writer.writeBytes(3, this.null_value);
            if (this.header != false)
                writer.writeBool(4, this.header);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CsvSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CsvSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.skip_rows = reader.readUint32();
                        break;
                    case 2:
                        message.delimiter = reader.readBytes();
                        break;
                    case 3:
                        message.null_value = reader.readBytes();
                        break;
                    case 4:
                        message.header = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CsvSettings {
            return CsvSettings.deserialize(bytes);
        }
    }
}
