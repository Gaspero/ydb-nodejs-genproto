/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_operation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as dependency_2 from "./../google/protobuf/duration";
import * as dependency_3 from "./annotations/validation";
import * as dependency_4 from "./ydb_common";
import * as dependency_5 from "./ydb_issue_message";
import * as dependency_6 from "./ydb_status_codes";
import * as pb_1 from "google-protobuf";
export namespace Ydb.Operations {
    export class OperationParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_mode?: OperationParams.OperationMode;
            operation_timeout?: dependency_2.google.protobuf.Duration;
            cancel_after?: dependency_2.google.protobuf.Duration;
            labels?: Map<string, string>;
            report_cost_info?: dependency_4.Ydb.FeatureFlag.Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_mode" in data && data.operation_mode != undefined) {
                    this.operation_mode = data.operation_mode;
                }
                if ("operation_timeout" in data && data.operation_timeout != undefined) {
                    this.operation_timeout = data.operation_timeout;
                }
                if ("cancel_after" in data && data.cancel_after != undefined) {
                    this.cancel_after = data.cancel_after;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
                if ("report_cost_info" in data && data.report_cost_info != undefined) {
                    this.report_cost_info = data.report_cost_info;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get operation_mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, OperationParams.OperationMode.OPERATION_MODE_UNSPECIFIED) as OperationParams.OperationMode;
        }
        set operation_mode(value: OperationParams.OperationMode) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation_timeout() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Duration, 2) as dependency_2.google.protobuf.Duration;
        }
        set operation_timeout(value: dependency_2.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation_timeout() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get cancel_after() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Duration, 3) as dependency_2.google.protobuf.Duration;
        }
        set cancel_after(value: dependency_2.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_cancel_after() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get labels() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get report_cost_info() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_4.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_4.Ydb.FeatureFlag.Status;
        }
        set report_cost_info(value: dependency_4.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            operation_mode?: OperationParams.OperationMode;
            operation_timeout?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
            cancel_after?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
            labels?: {
                [key: string]: string;
            };
            report_cost_info?: dependency_4.Ydb.FeatureFlag.Status;
        }): OperationParams {
            const message = new OperationParams({});
            if (data.operation_mode != null) {
                message.operation_mode = data.operation_mode;
            }
            if (data.operation_timeout != null) {
                message.operation_timeout = dependency_2.google.protobuf.Duration.fromObject(data.operation_timeout);
            }
            if (data.cancel_after != null) {
                message.cancel_after = dependency_2.google.protobuf.Duration.fromObject(data.cancel_after);
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            if (data.report_cost_info != null) {
                message.report_cost_info = data.report_cost_info;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_mode?: OperationParams.OperationMode;
                operation_timeout?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
                cancel_after?: ReturnType<typeof dependency_2.google.protobuf.Duration.prototype.toObject>;
                labels?: {
                    [key: string]: string;
                };
                report_cost_info?: dependency_4.Ydb.FeatureFlag.Status;
            } = {};
            if (this.operation_mode != null) {
                data.operation_mode = this.operation_mode;
            }
            if (this.operation_timeout != null) {
                data.operation_timeout = this.operation_timeout.toObject();
            }
            if (this.cancel_after != null) {
                data.cancel_after = this.cancel_after.toObject();
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            if (this.report_cost_info != null) {
                data.report_cost_info = this.report_cost_info;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation_mode != OperationParams.OperationMode.OPERATION_MODE_UNSPECIFIED)
                writer.writeEnum(1, this.operation_mode);
            if (this.has_operation_timeout)
                writer.writeMessage(2, this.operation_timeout, () => this.operation_timeout.serialize(writer));
            if (this.has_cancel_after)
                writer.writeMessage(3, this.cancel_after, () => this.cancel_after.serialize(writer));
            for (const [key, value] of this.labels) {
                writer.writeMessage(4, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.report_cost_info != dependency_4.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(5, this.report_cost_info);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperationParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperationParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation_mode = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.operation_timeout, () => message.operation_timeout = dependency_2.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.cancel_after, () => message.cancel_after = dependency_2.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    case 5:
                        message.report_cost_info = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperationParams {
            return OperationParams.deserialize(bytes);
        }
    }
    export namespace OperationParams {
        export enum OperationMode {
            OPERATION_MODE_UNSPECIFIED = 0,
            SYNC = 1,
            ASYNC = 2
        }
    }
    export class GetOperationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): GetOperationRequest {
            const message = new GetOperationRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOperationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOperationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetOperationRequest {
            return GetOperationRequest.deserialize(bytes);
        }
    }
    export class GetOperationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, Operation, 1) as Operation;
        }
        set operation(value: Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof Operation.prototype.toObject>;
        }): GetOperationResponse {
            const message = new GetOperationResponse({});
            if (data.operation != null) {
                message.operation = Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOperationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOperationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetOperationResponse {
            return GetOperationResponse.deserialize(bytes);
        }
    }
    export class CancelOperationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): CancelOperationRequest {
            const message = new CancelOperationRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOperationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOperationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelOperationRequest {
            return CancelOperationRequest.deserialize(bytes);
        }
    }
    export class CancelOperationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_6.Ydb.StatusIds.StatusCode;
            issues?: dependency_5.Ydb.Issue.IssueMessage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_6.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_6.Ydb.StatusIds.StatusCode;
        }
        set status(value: dependency_6.Ydb.StatusIds.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.Ydb.Issue.IssueMessage, 2) as dependency_5.Ydb.Issue.IssueMessage[];
        }
        set issues(value: dependency_5.Ydb.Issue.IssueMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_6.Ydb.StatusIds.StatusCode;
            issues?: ReturnType<typeof dependency_5.Ydb.Issue.IssueMessage.prototype.toObject>[];
        }): CancelOperationResponse {
            const message = new CancelOperationResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_5.Ydb.Issue.IssueMessage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_6.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_5.Ydb.Issue.IssueMessage.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_5.Ydb.Issue.IssueMessage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_6.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.issues.length)
                writer.writeRepeatedMessage(2, this.issues, (item: dependency_5.Ydb.Issue.IssueMessage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOperationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOperationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.Ydb.Issue.IssueMessage.deserialize(reader), dependency_5.Ydb.Issue.IssueMessage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CancelOperationResponse {
            return CancelOperationResponse.deserialize(bytes);
        }
    }
    export class ForgetOperationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): ForgetOperationRequest {
            const message = new ForgetOperationRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForgetOperationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForgetOperationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForgetOperationRequest {
            return ForgetOperationRequest.deserialize(bytes);
        }
    }
    export class ForgetOperationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_6.Ydb.StatusIds.StatusCode;
            issues?: dependency_5.Ydb.Issue.IssueMessage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_6.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_6.Ydb.StatusIds.StatusCode;
        }
        set status(value: dependency_6.Ydb.StatusIds.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.Ydb.Issue.IssueMessage, 2) as dependency_5.Ydb.Issue.IssueMessage[];
        }
        set issues(value: dependency_5.Ydb.Issue.IssueMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_6.Ydb.StatusIds.StatusCode;
            issues?: ReturnType<typeof dependency_5.Ydb.Issue.IssueMessage.prototype.toObject>[];
        }): ForgetOperationResponse {
            const message = new ForgetOperationResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_5.Ydb.Issue.IssueMessage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_6.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_5.Ydb.Issue.IssueMessage.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_5.Ydb.Issue.IssueMessage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_6.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.issues.length)
                writer.writeRepeatedMessage(2, this.issues, (item: dependency_5.Ydb.Issue.IssueMessage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForgetOperationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForgetOperationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.Ydb.Issue.IssueMessage.deserialize(reader), dependency_5.Ydb.Issue.IssueMessage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForgetOperationResponse {
            return ForgetOperationResponse.deserialize(bytes);
        }
    }
    export class ListOperationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            kind?: string;
            page_size?: number;
            page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("page_token" in data && data.page_token != undefined) {
                    this.page_token = data.page_token;
                }
            }
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set kind(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get page_token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set page_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            kind?: string;
            page_size?: number;
            page_token?: string;
        }): ListOperationsRequest {
            const message = new ListOperationsRequest({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.page_token != null) {
                message.page_token = data.page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: string;
                page_size?: number;
                page_token?: string;
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.page_token != null) {
                data.page_token = this.page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind.length)
                writer.writeString(1, this.kind);
            if (this.page_size != 0)
                writer.writeUint64(2, this.page_size);
            if (this.page_token.length)
                writer.writeString(3, this.page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOperationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOperationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readString();
                        break;
                    case 2:
                        message.page_size = reader.readUint64();
                        break;
                    case 3:
                        message.page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListOperationsRequest {
            return ListOperationsRequest.deserialize(bytes);
        }
    }
    export class ListOperationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_6.Ydb.StatusIds.StatusCode;
            issues?: dependency_5.Ydb.Issue.IssueMessage[];
            operations?: Operation[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
                if ("operations" in data && data.operations != undefined) {
                    this.operations = data.operations;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_6.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_6.Ydb.StatusIds.StatusCode;
        }
        set status(value: dependency_6.Ydb.StatusIds.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.Ydb.Issue.IssueMessage, 2) as dependency_5.Ydb.Issue.IssueMessage[];
        }
        set issues(value: dependency_5.Ydb.Issue.IssueMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get operations() {
            return pb_1.Message.getRepeatedWrapperField(this, Operation, 3) as Operation[];
        }
        set operations(value: Operation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            status?: dependency_6.Ydb.StatusIds.StatusCode;
            issues?: ReturnType<typeof dependency_5.Ydb.Issue.IssueMessage.prototype.toObject>[];
            operations?: ReturnType<typeof Operation.prototype.toObject>[];
            next_page_token?: string;
        }): ListOperationsResponse {
            const message = new ListOperationsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_5.Ydb.Issue.IssueMessage.fromObject(item));
            }
            if (data.operations != null) {
                message.operations = data.operations.map(item => Operation.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_6.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_5.Ydb.Issue.IssueMessage.prototype.toObject>[];
                operations?: ReturnType<typeof Operation.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_5.Ydb.Issue.IssueMessage) => item.toObject());
            }
            if (this.operations != null) {
                data.operations = this.operations.map((item: Operation) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_6.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.issues.length)
                writer.writeRepeatedMessage(2, this.issues, (item: dependency_5.Ydb.Issue.IssueMessage) => item.serialize(writer));
            if (this.operations.length)
                writer.writeRepeatedMessage(3, this.operations, (item: Operation) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(4, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListOperationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListOperationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.Ydb.Issue.IssueMessage.deserialize(reader), dependency_5.Ydb.Issue.IssueMessage));
                        break;
                    case 3:
                        reader.readMessage(message.operations, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Operation.deserialize(reader), Operation));
                        break;
                    case 4:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListOperationsResponse {
            return ListOperationsResponse.deserialize(bytes);
        }
    }
    export class Operation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            ready?: boolean;
            status?: dependency_6.Ydb.StatusIds.StatusCode;
            issues?: dependency_5.Ydb.Issue.IssueMessage[];
            result?: dependency_1.google.protobuf.Any;
            metadata?: dependency_1.google.protobuf.Any;
            cost_info?: dependency_4.Ydb.CostInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("ready" in data && data.ready != undefined) {
                    this.ready = data.ready;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("cost_info" in data && data.cost_info != undefined) {
                    this.cost_info = data.cost_info;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ready() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set ready(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_6.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_6.Ydb.StatusIds.StatusCode;
        }
        set status(value: dependency_6.Ydb.StatusIds.StatusCode) {
            pb_1.Message.setField(this, 3, value);
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.Ydb.Issue.IssueMessage, 4) as dependency_5.Ydb.Issue.IssueMessage[];
        }
        set issues(value: dependency_5.Ydb.Issue.IssueMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 5) as dependency_1.google.protobuf.Any;
        }
        set result(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 6) as dependency_1.google.protobuf.Any;
        }
        set metadata(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get cost_info() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.CostInfo, 7) as dependency_4.Ydb.CostInfo;
        }
        set cost_info(value: dependency_4.Ydb.CostInfo) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_cost_info() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            id?: string;
            ready?: boolean;
            status?: dependency_6.Ydb.StatusIds.StatusCode;
            issues?: ReturnType<typeof dependency_5.Ydb.Issue.IssueMessage.prototype.toObject>[];
            result?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            metadata?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            cost_info?: ReturnType<typeof dependency_4.Ydb.CostInfo.prototype.toObject>;
        }): Operation {
            const message = new Operation({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.ready != null) {
                message.ready = data.ready;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_5.Ydb.Issue.IssueMessage.fromObject(item));
            }
            if (data.result != null) {
                message.result = dependency_1.google.protobuf.Any.fromObject(data.result);
            }
            if (data.metadata != null) {
                message.metadata = dependency_1.google.protobuf.Any.fromObject(data.metadata);
            }
            if (data.cost_info != null) {
                message.cost_info = dependency_4.Ydb.CostInfo.fromObject(data.cost_info);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                ready?: boolean;
                status?: dependency_6.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_5.Ydb.Issue.IssueMessage.prototype.toObject>[];
                result?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                metadata?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                cost_info?: ReturnType<typeof dependency_4.Ydb.CostInfo.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.ready != null) {
                data.ready = this.ready;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_5.Ydb.Issue.IssueMessage) => item.toObject());
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.cost_info != null) {
                data.cost_info = this.cost_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.ready != false)
                writer.writeBool(2, this.ready);
            if (this.status != dependency_6.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                writer.writeEnum(3, this.status);
            if (this.issues.length)
                writer.writeRepeatedMessage(4, this.issues, (item: dependency_5.Ydb.Issue.IssueMessage) => item.serialize(writer));
            if (this.has_result)
                writer.writeMessage(5, this.result, () => this.result.serialize(writer));
            if (this.has_metadata)
                writer.writeMessage(6, this.metadata, () => this.metadata.serialize(writer));
            if (this.has_cost_info)
                writer.writeMessage(7, this.cost_info, () => this.cost_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Operation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Operation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.ready = reader.readBool();
                        break;
                    case 3:
                        message.status = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_5.Ydb.Issue.IssueMessage.deserialize(reader), dependency_5.Ydb.Issue.IssueMessage));
                        break;
                    case 5:
                        reader.readMessage(message.result, () => message.result = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.cost_info, () => message.cost_info = dependency_4.Ydb.CostInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Operation {
            return Operation.deserialize(bytes);
        }
    }
}
