/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace Ydb {
    export class FeatureFlag extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): FeatureFlag {
            const message = new FeatureFlag({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeatureFlag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeatureFlag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FeatureFlag {
            return FeatureFlag.deserialize(bytes);
        }
    }
    export namespace FeatureFlag {
        export enum Status {
            STATUS_UNSPECIFIED = 0,
            ENABLED = 1,
            DISABLED = 2
        }
    }
    export class CostInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consumed_units?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consumed_units" in data && data.consumed_units != undefined) {
                    this.consumed_units = data.consumed_units;
                }
            }
        }
        get consumed_units() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consumed_units(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            consumed_units?: number;
        }): CostInfo {
            const message = new CostInfo({});
            if (data.consumed_units != null) {
                message.consumed_units = data.consumed_units;
            }
            return message;
        }
        toObject() {
            const data: {
                consumed_units?: number;
            } = {};
            if (this.consumed_units != null) {
                data.consumed_units = this.consumed_units;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consumed_units != 0)
                writer.writeDouble(1, this.consumed_units);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CostInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CostInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consumed_units = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CostInfo {
            return CostInfo.deserialize(bytes);
        }
    }
    export class QuotaExceeded extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            disk?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("disk" in data && data.disk != undefined) {
                    this.disk = data.disk;
                }
            }
        }
        get disk() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set disk(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            disk?: boolean;
        }): QuotaExceeded {
            const message = new QuotaExceeded({});
            if (data.disk != null) {
                message.disk = data.disk;
            }
            return message;
        }
        toObject() {
            const data: {
                disk?: boolean;
            } = {};
            if (this.disk != null) {
                data.disk = this.disk;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.disk != false)
                writer.writeBool(1, this.disk);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuotaExceeded {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuotaExceeded();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.disk = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuotaExceeded {
            return QuotaExceeded.deserialize(bytes);
        }
    }
    export class VirtualTimestamp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            plan_step?: number;
            tx_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("plan_step" in data && data.plan_step != undefined) {
                    this.plan_step = data.plan_step;
                }
                if ("tx_id" in data && data.tx_id != undefined) {
                    this.tx_id = data.tx_id;
                }
            }
        }
        get plan_step() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set plan_step(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tx_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            plan_step?: number;
            tx_id?: number;
        }): VirtualTimestamp {
            const message = new VirtualTimestamp({});
            if (data.plan_step != null) {
                message.plan_step = data.plan_step;
            }
            if (data.tx_id != null) {
                message.tx_id = data.tx_id;
            }
            return message;
        }
        toObject() {
            const data: {
                plan_step?: number;
                tx_id?: number;
            } = {};
            if (this.plan_step != null) {
                data.plan_step = this.plan_step;
            }
            if (this.tx_id != null) {
                data.tx_id = this.tx_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.plan_step != 0)
                writer.writeUint64(1, this.plan_step);
            if (this.tx_id != 0)
                writer.writeUint64(2, this.tx_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VirtualTimestamp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VirtualTimestamp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.plan_step = reader.readUint64();
                        break;
                    case 2:
                        message.tx_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VirtualTimestamp {
            return VirtualTimestamp.deserialize(bytes);
        }
    }
}
