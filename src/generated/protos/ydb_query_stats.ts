/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_query_stats.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace Ydb.TableStats {
    export class OperationStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rows?: number;
            bytes?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rows" in data && data.rows != undefined) {
                    this.rows = data.rows;
                }
                if ("bytes" in data && data.bytes != undefined) {
                    this.bytes = data.bytes;
                }
            }
        }
        get rows() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set rows(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bytes() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set bytes(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            rows?: number;
            bytes?: number;
        }): OperationStats {
            const message = new OperationStats({});
            if (data.rows != null) {
                message.rows = data.rows;
            }
            if (data.bytes != null) {
                message.bytes = data.bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                rows?: number;
                bytes?: number;
            } = {};
            if (this.rows != null) {
                data.rows = this.rows;
            }
            if (this.bytes != null) {
                data.bytes = this.bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rows != 0)
                writer.writeUint64(1, this.rows);
            if (this.bytes != 0)
                writer.writeUint64(2, this.bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperationStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperationStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rows = reader.readUint64();
                        break;
                    case 2:
                        message.bytes = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperationStats {
            return OperationStats.deserialize(bytes);
        }
    }
    export class TableAccessStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            reads?: OperationStats;
            updates?: OperationStats;
            deletes?: OperationStats;
            partitions_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("reads" in data && data.reads != undefined) {
                    this.reads = data.reads;
                }
                if ("updates" in data && data.updates != undefined) {
                    this.updates = data.updates;
                }
                if ("deletes" in data && data.deletes != undefined) {
                    this.deletes = data.deletes;
                }
                if ("partitions_count" in data && data.partitions_count != undefined) {
                    this.partitions_count = data.partitions_count;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get reads() {
            return pb_1.Message.getWrapperField(this, OperationStats, 3) as OperationStats;
        }
        set reads(value: OperationStats) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_reads() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get updates() {
            return pb_1.Message.getWrapperField(this, OperationStats, 4) as OperationStats;
        }
        set updates(value: OperationStats) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_updates() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get deletes() {
            return pb_1.Message.getWrapperField(this, OperationStats, 5) as OperationStats;
        }
        set deletes(value: OperationStats) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_deletes() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get partitions_count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set partitions_count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            name?: string;
            reads?: ReturnType<typeof OperationStats.prototype.toObject>;
            updates?: ReturnType<typeof OperationStats.prototype.toObject>;
            deletes?: ReturnType<typeof OperationStats.prototype.toObject>;
            partitions_count?: number;
        }): TableAccessStats {
            const message = new TableAccessStats({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.reads != null) {
                message.reads = OperationStats.fromObject(data.reads);
            }
            if (data.updates != null) {
                message.updates = OperationStats.fromObject(data.updates);
            }
            if (data.deletes != null) {
                message.deletes = OperationStats.fromObject(data.deletes);
            }
            if (data.partitions_count != null) {
                message.partitions_count = data.partitions_count;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                reads?: ReturnType<typeof OperationStats.prototype.toObject>;
                updates?: ReturnType<typeof OperationStats.prototype.toObject>;
                deletes?: ReturnType<typeof OperationStats.prototype.toObject>;
                partitions_count?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.reads != null) {
                data.reads = this.reads.toObject();
            }
            if (this.updates != null) {
                data.updates = this.updates.toObject();
            }
            if (this.deletes != null) {
                data.deletes = this.deletes.toObject();
            }
            if (this.partitions_count != null) {
                data.partitions_count = this.partitions_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_reads)
                writer.writeMessage(3, this.reads, () => this.reads.serialize(writer));
            if (this.has_updates)
                writer.writeMessage(4, this.updates, () => this.updates.serialize(writer));
            if (this.has_deletes)
                writer.writeMessage(5, this.deletes, () => this.deletes.serialize(writer));
            if (this.partitions_count != 0)
                writer.writeUint64(6, this.partitions_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableAccessStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableAccessStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.reads, () => message.reads = OperationStats.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.updates, () => message.updates = OperationStats.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.deletes, () => message.deletes = OperationStats.deserialize(reader));
                        break;
                    case 6:
                        message.partitions_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableAccessStats {
            return TableAccessStats.deserialize(bytes);
        }
    }
    export class QueryPhaseStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            duration_us?: number;
            table_access?: TableAccessStats[];
            cpu_time_us?: number;
            affected_shards?: number;
            literal_phase?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("duration_us" in data && data.duration_us != undefined) {
                    this.duration_us = data.duration_us;
                }
                if ("table_access" in data && data.table_access != undefined) {
                    this.table_access = data.table_access;
                }
                if ("cpu_time_us" in data && data.cpu_time_us != undefined) {
                    this.cpu_time_us = data.cpu_time_us;
                }
                if ("affected_shards" in data && data.affected_shards != undefined) {
                    this.affected_shards = data.affected_shards;
                }
                if ("literal_phase" in data && data.literal_phase != undefined) {
                    this.literal_phase = data.literal_phase;
                }
            }
        }
        get duration_us() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set duration_us(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get table_access() {
            return pb_1.Message.getRepeatedWrapperField(this, TableAccessStats, 2) as TableAccessStats[];
        }
        set table_access(value: TableAccessStats[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get cpu_time_us() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set cpu_time_us(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get affected_shards() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set affected_shards(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get literal_phase() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set literal_phase(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            duration_us?: number;
            table_access?: ReturnType<typeof TableAccessStats.prototype.toObject>[];
            cpu_time_us?: number;
            affected_shards?: number;
            literal_phase?: boolean;
        }): QueryPhaseStats {
            const message = new QueryPhaseStats({});
            if (data.duration_us != null) {
                message.duration_us = data.duration_us;
            }
            if (data.table_access != null) {
                message.table_access = data.table_access.map(item => TableAccessStats.fromObject(item));
            }
            if (data.cpu_time_us != null) {
                message.cpu_time_us = data.cpu_time_us;
            }
            if (data.affected_shards != null) {
                message.affected_shards = data.affected_shards;
            }
            if (data.literal_phase != null) {
                message.literal_phase = data.literal_phase;
            }
            return message;
        }
        toObject() {
            const data: {
                duration_us?: number;
                table_access?: ReturnType<typeof TableAccessStats.prototype.toObject>[];
                cpu_time_us?: number;
                affected_shards?: number;
                literal_phase?: boolean;
            } = {};
            if (this.duration_us != null) {
                data.duration_us = this.duration_us;
            }
            if (this.table_access != null) {
                data.table_access = this.table_access.map((item: TableAccessStats) => item.toObject());
            }
            if (this.cpu_time_us != null) {
                data.cpu_time_us = this.cpu_time_us;
            }
            if (this.affected_shards != null) {
                data.affected_shards = this.affected_shards;
            }
            if (this.literal_phase != null) {
                data.literal_phase = this.literal_phase;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.duration_us != 0)
                writer.writeUint64(1, this.duration_us);
            if (this.table_access.length)
                writer.writeRepeatedMessage(2, this.table_access, (item: TableAccessStats) => item.serialize(writer));
            if (this.cpu_time_us != 0)
                writer.writeUint64(3, this.cpu_time_us);
            if (this.affected_shards != 0)
                writer.writeUint64(4, this.affected_shards);
            if (this.literal_phase != false)
                writer.writeBool(5, this.literal_phase);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPhaseStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPhaseStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.duration_us = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.table_access, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TableAccessStats.deserialize(reader), TableAccessStats));
                        break;
                    case 3:
                        message.cpu_time_us = reader.readUint64();
                        break;
                    case 4:
                        message.affected_shards = reader.readUint64();
                        break;
                    case 5:
                        message.literal_phase = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPhaseStats {
            return QueryPhaseStats.deserialize(bytes);
        }
    }
    export class CompilationStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from_cache?: boolean;
            duration_us?: number;
            cpu_time_us?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from_cache" in data && data.from_cache != undefined) {
                    this.from_cache = data.from_cache;
                }
                if ("duration_us" in data && data.duration_us != undefined) {
                    this.duration_us = data.duration_us;
                }
                if ("cpu_time_us" in data && data.cpu_time_us != undefined) {
                    this.cpu_time_us = data.cpu_time_us;
                }
            }
        }
        get from_cache() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set from_cache(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get duration_us() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set duration_us(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get cpu_time_us() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set cpu_time_us(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            from_cache?: boolean;
            duration_us?: number;
            cpu_time_us?: number;
        }): CompilationStats {
            const message = new CompilationStats({});
            if (data.from_cache != null) {
                message.from_cache = data.from_cache;
            }
            if (data.duration_us != null) {
                message.duration_us = data.duration_us;
            }
            if (data.cpu_time_us != null) {
                message.cpu_time_us = data.cpu_time_us;
            }
            return message;
        }
        toObject() {
            const data: {
                from_cache?: boolean;
                duration_us?: number;
                cpu_time_us?: number;
            } = {};
            if (this.from_cache != null) {
                data.from_cache = this.from_cache;
            }
            if (this.duration_us != null) {
                data.duration_us = this.duration_us;
            }
            if (this.cpu_time_us != null) {
                data.cpu_time_us = this.cpu_time_us;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from_cache != false)
                writer.writeBool(1, this.from_cache);
            if (this.duration_us != 0)
                writer.writeUint64(2, this.duration_us);
            if (this.cpu_time_us != 0)
                writer.writeUint64(3, this.cpu_time_us);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompilationStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompilationStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from_cache = reader.readBool();
                        break;
                    case 2:
                        message.duration_us = reader.readUint64();
                        break;
                    case 3:
                        message.cpu_time_us = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompilationStats {
            return CompilationStats.deserialize(bytes);
        }
    }
    export class QueryStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query_phases?: QueryPhaseStats[];
            compilation?: CompilationStats;
            process_cpu_time_us?: number;
            query_plan?: string;
            query_ast?: string;
            total_duration_us?: number;
            total_cpu_time_us?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query_phases" in data && data.query_phases != undefined) {
                    this.query_phases = data.query_phases;
                }
                if ("compilation" in data && data.compilation != undefined) {
                    this.compilation = data.compilation;
                }
                if ("process_cpu_time_us" in data && data.process_cpu_time_us != undefined) {
                    this.process_cpu_time_us = data.process_cpu_time_us;
                }
                if ("query_plan" in data && data.query_plan != undefined) {
                    this.query_plan = data.query_plan;
                }
                if ("query_ast" in data && data.query_ast != undefined) {
                    this.query_ast = data.query_ast;
                }
                if ("total_duration_us" in data && data.total_duration_us != undefined) {
                    this.total_duration_us = data.total_duration_us;
                }
                if ("total_cpu_time_us" in data && data.total_cpu_time_us != undefined) {
                    this.total_cpu_time_us = data.total_cpu_time_us;
                }
            }
        }
        get query_phases() {
            return pb_1.Message.getRepeatedWrapperField(this, QueryPhaseStats, 1) as QueryPhaseStats[];
        }
        set query_phases(value: QueryPhaseStats[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get compilation() {
            return pb_1.Message.getWrapperField(this, CompilationStats, 2) as CompilationStats;
        }
        set compilation(value: CompilationStats) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_compilation() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get process_cpu_time_us() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set process_cpu_time_us(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get query_plan() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set query_plan(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get query_ast() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set query_ast(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get total_duration_us() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set total_duration_us(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get total_cpu_time_us() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set total_cpu_time_us(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            query_phases?: ReturnType<typeof QueryPhaseStats.prototype.toObject>[];
            compilation?: ReturnType<typeof CompilationStats.prototype.toObject>;
            process_cpu_time_us?: number;
            query_plan?: string;
            query_ast?: string;
            total_duration_us?: number;
            total_cpu_time_us?: number;
        }): QueryStats {
            const message = new QueryStats({});
            if (data.query_phases != null) {
                message.query_phases = data.query_phases.map(item => QueryPhaseStats.fromObject(item));
            }
            if (data.compilation != null) {
                message.compilation = CompilationStats.fromObject(data.compilation);
            }
            if (data.process_cpu_time_us != null) {
                message.process_cpu_time_us = data.process_cpu_time_us;
            }
            if (data.query_plan != null) {
                message.query_plan = data.query_plan;
            }
            if (data.query_ast != null) {
                message.query_ast = data.query_ast;
            }
            if (data.total_duration_us != null) {
                message.total_duration_us = data.total_duration_us;
            }
            if (data.total_cpu_time_us != null) {
                message.total_cpu_time_us = data.total_cpu_time_us;
            }
            return message;
        }
        toObject() {
            const data: {
                query_phases?: ReturnType<typeof QueryPhaseStats.prototype.toObject>[];
                compilation?: ReturnType<typeof CompilationStats.prototype.toObject>;
                process_cpu_time_us?: number;
                query_plan?: string;
                query_ast?: string;
                total_duration_us?: number;
                total_cpu_time_us?: number;
            } = {};
            if (this.query_phases != null) {
                data.query_phases = this.query_phases.map((item: QueryPhaseStats) => item.toObject());
            }
            if (this.compilation != null) {
                data.compilation = this.compilation.toObject();
            }
            if (this.process_cpu_time_us != null) {
                data.process_cpu_time_us = this.process_cpu_time_us;
            }
            if (this.query_plan != null) {
                data.query_plan = this.query_plan;
            }
            if (this.query_ast != null) {
                data.query_ast = this.query_ast;
            }
            if (this.total_duration_us != null) {
                data.total_duration_us = this.total_duration_us;
            }
            if (this.total_cpu_time_us != null) {
                data.total_cpu_time_us = this.total_cpu_time_us;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query_phases.length)
                writer.writeRepeatedMessage(1, this.query_phases, (item: QueryPhaseStats) => item.serialize(writer));
            if (this.has_compilation)
                writer.writeMessage(2, this.compilation, () => this.compilation.serialize(writer));
            if (this.process_cpu_time_us != 0)
                writer.writeUint64(3, this.process_cpu_time_us);
            if (this.query_plan.length)
                writer.writeString(4, this.query_plan);
            if (this.query_ast.length)
                writer.writeString(5, this.query_ast);
            if (this.total_duration_us != 0)
                writer.writeUint64(6, this.total_duration_us);
            if (this.total_cpu_time_us != 0)
                writer.writeUint64(7, this.total_cpu_time_us);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.query_phases, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QueryPhaseStats.deserialize(reader), QueryPhaseStats));
                        break;
                    case 2:
                        reader.readMessage(message.compilation, () => message.compilation = CompilationStats.deserialize(reader));
                        break;
                    case 3:
                        message.process_cpu_time_us = reader.readUint64();
                        break;
                    case 4:
                        message.query_plan = reader.readString();
                        break;
                    case 5:
                        message.query_ast = reader.readString();
                        break;
                    case 6:
                        message.total_duration_us = reader.readUint64();
                        break;
                    case 7:
                        message.total_cpu_time_us = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStats {
            return QueryStats.deserialize(bytes);
        }
    }
}
