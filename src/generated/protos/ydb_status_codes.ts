/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_status_codes.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace Ydb {
    export class StatusIds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StatusIds {
            const message = new StatusIds({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusIds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusIds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusIds {
            return StatusIds.deserialize(bytes);
        }
    }
    export namespace StatusIds {
        export enum StatusCode {
            STATUS_CODE_UNSPECIFIED = 0,
            SUCCESS = 400000,
            BAD_REQUEST = 400010,
            UNAUTHORIZED = 400020,
            INTERNAL_ERROR = 400030,
            ABORTED = 400040,
            UNAVAILABLE = 400050,
            OVERLOADED = 400060,
            SCHEME_ERROR = 400070,
            GENERIC_ERROR = 400080,
            TIMEOUT = 400090,
            BAD_SESSION = 400100,
            PRECONDITION_FAILED = 400120,
            ALREADY_EXISTS = 400130,
            NOT_FOUND = 400140,
            SESSION_EXPIRED = 400150,
            CANCELLED = 400160,
            UNDETERMINED = 400170,
            UNSUPPORTED = 400180,
            SESSION_BUSY = 400190
        }
    }
}
