/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_value.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
export namespace Ydb {
    export class DecimalType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            precision?: number;
            scale?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("precision" in data && data.precision != undefined) {
                    this.precision = data.precision;
                }
                if ("scale" in data && data.scale != undefined) {
                    this.scale = data.scale;
                }
            }
        }
        get precision() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set precision(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scale() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set scale(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            precision?: number;
            scale?: number;
        }): DecimalType {
            const message = new DecimalType({});
            if (data.precision != null) {
                message.precision = data.precision;
            }
            if (data.scale != null) {
                message.scale = data.scale;
            }
            return message;
        }
        toObject() {
            const data: {
                precision?: number;
                scale?: number;
            } = {};
            if (this.precision != null) {
                data.precision = this.precision;
            }
            if (this.scale != null) {
                data.scale = this.scale;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.precision != 0)
                writer.writeUint32(1, this.precision);
            if (this.scale != 0)
                writer.writeUint32(2, this.scale);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DecimalType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DecimalType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.precision = reader.readUint32();
                        break;
                    case 2:
                        message.scale = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DecimalType {
            return DecimalType.deserialize(bytes);
        }
    }
    export class OptionalType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: Type;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getWrapperField(this, Type, 1) as Type;
        }
        set item(value: Type) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_item() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            item?: ReturnType<typeof Type.prototype.toObject>;
        }): OptionalType {
            const message = new OptionalType({});
            if (data.item != null) {
                message.item = Type.fromObject(data.item);
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof Type.prototype.toObject>;
            } = {};
            if (this.item != null) {
                data.item = this.item.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_item)
                writer.writeMessage(1, this.item, () => this.item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionalType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionalType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => message.item = Type.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OptionalType {
            return OptionalType.deserialize(bytes);
        }
    }
    export class ListType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: Type;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getWrapperField(this, Type, 1) as Type;
        }
        set item(value: Type) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_item() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            item?: ReturnType<typeof Type.prototype.toObject>;
        }): ListType {
            const message = new ListType({});
            if (data.item != null) {
                message.item = Type.fromObject(data.item);
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof Type.prototype.toObject>;
            } = {};
            if (this.item != null) {
                data.item = this.item.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_item)
                writer.writeMessage(1, this.item, () => this.item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => message.item = Type.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListType {
            return ListType.deserialize(bytes);
        }
    }
    export class VariantType extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            tuple_items?: TupleType;
            struct_items?: never;
        } | {
            tuple_items?: never;
            struct_items?: StructType;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tuple_items" in data && data.tuple_items != undefined) {
                    this.tuple_items = data.tuple_items;
                }
                if ("struct_items" in data && data.struct_items != undefined) {
                    this.struct_items = data.struct_items;
                }
            }
        }
        get tuple_items() {
            return pb_1.Message.getWrapperField(this, TupleType, 1) as TupleType;
        }
        set tuple_items(value: TupleType) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_tuple_items() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get struct_items() {
            return pb_1.Message.getWrapperField(this, StructType, 2) as StructType;
        }
        set struct_items(value: StructType) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_struct_items() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "tuple_items" | "struct_items";
            } = {
                0: "none",
                1: "tuple_items",
                2: "struct_items"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            tuple_items?: ReturnType<typeof TupleType.prototype.toObject>;
            struct_items?: ReturnType<typeof StructType.prototype.toObject>;
        }): VariantType {
            const message = new VariantType({});
            if (data.tuple_items != null) {
                message.tuple_items = TupleType.fromObject(data.tuple_items);
            }
            if (data.struct_items != null) {
                message.struct_items = StructType.fromObject(data.struct_items);
            }
            return message;
        }
        toObject() {
            const data: {
                tuple_items?: ReturnType<typeof TupleType.prototype.toObject>;
                struct_items?: ReturnType<typeof StructType.prototype.toObject>;
            } = {};
            if (this.tuple_items != null) {
                data.tuple_items = this.tuple_items.toObject();
            }
            if (this.struct_items != null) {
                data.struct_items = this.struct_items.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tuple_items)
                writer.writeMessage(1, this.tuple_items, () => this.tuple_items.serialize(writer));
            if (this.has_struct_items)
                writer.writeMessage(2, this.struct_items, () => this.struct_items.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VariantType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VariantType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tuple_items, () => message.tuple_items = TupleType.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.struct_items, () => message.struct_items = StructType.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VariantType {
            return VariantType.deserialize(bytes);
        }
    }
    export class TupleType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            elements?: Type[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("elements" in data && data.elements != undefined) {
                    this.elements = data.elements;
                }
            }
        }
        get elements() {
            return pb_1.Message.getRepeatedWrapperField(this, Type, 1) as Type[];
        }
        set elements(value: Type[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            elements?: ReturnType<typeof Type.prototype.toObject>[];
        }): TupleType {
            const message = new TupleType({});
            if (data.elements != null) {
                message.elements = data.elements.map(item => Type.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                elements?: ReturnType<typeof Type.prototype.toObject>[];
            } = {};
            if (this.elements != null) {
                data.elements = this.elements.map((item: Type) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.elements.length)
                writer.writeRepeatedMessage(1, this.elements, (item: Type) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TupleType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TupleType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.elements, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Type.deserialize(reader), Type));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TupleType {
            return TupleType.deserialize(bytes);
        }
    }
    export class StructMember extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            type?: Type;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getWrapperField(this, Type, 2) as Type;
        }
        set type(value: Type) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            type?: ReturnType<typeof Type.prototype.toObject>;
        }): StructMember {
            const message = new StructMember({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = Type.fromObject(data.type);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                type?: ReturnType<typeof Type.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_type)
                writer.writeMessage(2, this.type, () => this.type.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StructMember {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StructMember();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.type, () => message.type = Type.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StructMember {
            return StructMember.deserialize(bytes);
        }
    }
    export class StructType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            members?: StructMember[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("members" in data && data.members != undefined) {
                    this.members = data.members;
                }
            }
        }
        get members() {
            return pb_1.Message.getRepeatedWrapperField(this, StructMember, 1) as StructMember[];
        }
        set members(value: StructMember[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            members?: ReturnType<typeof StructMember.prototype.toObject>[];
        }): StructType {
            const message = new StructType({});
            if (data.members != null) {
                message.members = data.members.map(item => StructMember.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                members?: ReturnType<typeof StructMember.prototype.toObject>[];
            } = {};
            if (this.members != null) {
                data.members = this.members.map((item: StructMember) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.members.length)
                writer.writeRepeatedMessage(1, this.members, (item: StructMember) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StructType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StructType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StructMember.deserialize(reader), StructMember));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StructType {
            return StructType.deserialize(bytes);
        }
    }
    export class DictType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: Type;
            payload?: Type;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
        }
        get key() {
            return pb_1.Message.getWrapperField(this, Type, 1) as Type;
        }
        set key(value: Type) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, Type, 2) as Type;
        }
        set payload(value: Type) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            key?: ReturnType<typeof Type.prototype.toObject>;
            payload?: ReturnType<typeof Type.prototype.toObject>;
        }): DictType {
            const message = new DictType({});
            if (data.key != null) {
                message.key = Type.fromObject(data.key);
            }
            if (data.payload != null) {
                message.payload = Type.fromObject(data.payload);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: ReturnType<typeof Type.prototype.toObject>;
                payload?: ReturnType<typeof Type.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
            if (this.has_payload)
                writer.writeMessage(2, this.payload, () => this.payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DictType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DictType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key, () => message.key = Type.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.payload, () => message.payload = Type.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DictType {
            return DictType.deserialize(bytes);
        }
    }
    export class TaggedType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tag?: string;
            type?: Type;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tag" in data && data.tag != undefined) {
                    this.tag = data.tag;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getWrapperField(this, Type, 2) as Type;
        }
        set type(value: Type) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tag?: string;
            type?: ReturnType<typeof Type.prototype.toObject>;
        }): TaggedType {
            const message = new TaggedType({});
            if (data.tag != null) {
                message.tag = data.tag;
            }
            if (data.type != null) {
                message.type = Type.fromObject(data.type);
            }
            return message;
        }
        toObject() {
            const data: {
                tag?: string;
                type?: ReturnType<typeof Type.prototype.toObject>;
            } = {};
            if (this.tag != null) {
                data.tag = this.tag;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tag.length)
                writer.writeString(1, this.tag);
            if (this.has_type)
                writer.writeMessage(2, this.type, () => this.type.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaggedType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TaggedType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tag = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.type, () => message.type = Type.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TaggedType {
            return TaggedType.deserialize(bytes);
        }
    }
    export class PgType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            oid?: number;
            typlen?: number;
            typmod?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("oid" in data && data.oid != undefined) {
                    this.oid = data.oid;
                }
                if ("typlen" in data && data.typlen != undefined) {
                    this.typlen = data.typlen;
                }
                if ("typmod" in data && data.typmod != undefined) {
                    this.typmod = data.typmod;
                }
            }
        }
        get oid() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set oid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get typlen() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set typlen(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get typmod() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set typmod(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            oid?: number;
            typlen?: number;
            typmod?: number;
        }): PgType {
            const message = new PgType({});
            if (data.oid != null) {
                message.oid = data.oid;
            }
            if (data.typlen != null) {
                message.typlen = data.typlen;
            }
            if (data.typmod != null) {
                message.typmod = data.typmod;
            }
            return message;
        }
        toObject() {
            const data: {
                oid?: number;
                typlen?: number;
                typmod?: number;
            } = {};
            if (this.oid != null) {
                data.oid = this.oid;
            }
            if (this.typlen != null) {
                data.typlen = this.typlen;
            }
            if (this.typmod != null) {
                data.typmod = this.typmod;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oid != 0)
                writer.writeUint32(1, this.oid);
            if (this.typlen != 0)
                writer.writeInt32(2, this.typlen);
            if (this.typmod != 0)
                writer.writeInt32(3, this.typmod);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PgType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PgType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.oid = reader.readUint32();
                        break;
                    case 2:
                        message.typlen = reader.readInt32();
                        break;
                    case 3:
                        message.typmod = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PgType {
            return PgType.deserialize(bytes);
        }
    }
    export class Type extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 101, 102, 103, 104, 105, 106, 107, 201, 202, 203, 204, 205]];
        constructor(data?: any[] | ({} & (({
            type_id?: Type.PrimitiveTypeId;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: DecimalType;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: OptionalType;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: ListType;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: TupleType;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: StructType;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: DictType;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: VariantType;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: TaggedType;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: dependency_1.google.protobuf.NullValue;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: dependency_1.google.protobuf.NullValue;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: dependency_1.google.protobuf.NullValue;
            empty_dict_type?: never;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: dependency_1.google.protobuf.NullValue;
            pg_type?: never;
        } | {
            type_id?: never;
            decimal_type?: never;
            optional_type?: never;
            list_type?: never;
            tuple_type?: never;
            struct_type?: never;
            dict_type?: never;
            variant_type?: never;
            tagged_type?: never;
            void_type?: never;
            null_type?: never;
            empty_list_type?: never;
            empty_dict_type?: never;
            pg_type?: PgType;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type_id" in data && data.type_id != undefined) {
                    this.type_id = data.type_id;
                }
                if ("decimal_type" in data && data.decimal_type != undefined) {
                    this.decimal_type = data.decimal_type;
                }
                if ("optional_type" in data && data.optional_type != undefined) {
                    this.optional_type = data.optional_type;
                }
                if ("list_type" in data && data.list_type != undefined) {
                    this.list_type = data.list_type;
                }
                if ("tuple_type" in data && data.tuple_type != undefined) {
                    this.tuple_type = data.tuple_type;
                }
                if ("struct_type" in data && data.struct_type != undefined) {
                    this.struct_type = data.struct_type;
                }
                if ("dict_type" in data && data.dict_type != undefined) {
                    this.dict_type = data.dict_type;
                }
                if ("variant_type" in data && data.variant_type != undefined) {
                    this.variant_type = data.variant_type;
                }
                if ("tagged_type" in data && data.tagged_type != undefined) {
                    this.tagged_type = data.tagged_type;
                }
                if ("void_type" in data && data.void_type != undefined) {
                    this.void_type = data.void_type;
                }
                if ("null_type" in data && data.null_type != undefined) {
                    this.null_type = data.null_type;
                }
                if ("empty_list_type" in data && data.empty_list_type != undefined) {
                    this.empty_list_type = data.empty_list_type;
                }
                if ("empty_dict_type" in data && data.empty_dict_type != undefined) {
                    this.empty_dict_type = data.empty_dict_type;
                }
                if ("pg_type" in data && data.pg_type != undefined) {
                    this.pg_type = data.pg_type;
                }
            }
        }
        get type_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, Type.PrimitiveTypeId.PRIMITIVE_TYPE_ID_UNSPECIFIED) as Type.PrimitiveTypeId;
        }
        set type_id(value: Type.PrimitiveTypeId) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_type_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get decimal_type() {
            return pb_1.Message.getWrapperField(this, DecimalType, 2) as DecimalType;
        }
        set decimal_type(value: DecimalType) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_decimal_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get optional_type() {
            return pb_1.Message.getWrapperField(this, OptionalType, 101) as OptionalType;
        }
        set optional_type(value: OptionalType) {
            pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
        }
        get has_optional_type() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get list_type() {
            return pb_1.Message.getWrapperField(this, ListType, 102) as ListType;
        }
        set list_type(value: ListType) {
            pb_1.Message.setOneofWrapperField(this, 102, this.#one_of_decls[0], value);
        }
        get has_list_type() {
            return pb_1.Message.getField(this, 102) != null;
        }
        get tuple_type() {
            return pb_1.Message.getWrapperField(this, TupleType, 103) as TupleType;
        }
        set tuple_type(value: TupleType) {
            pb_1.Message.setOneofWrapperField(this, 103, this.#one_of_decls[0], value);
        }
        get has_tuple_type() {
            return pb_1.Message.getField(this, 103) != null;
        }
        get struct_type() {
            return pb_1.Message.getWrapperField(this, StructType, 104) as StructType;
        }
        set struct_type(value: StructType) {
            pb_1.Message.setOneofWrapperField(this, 104, this.#one_of_decls[0], value);
        }
        get has_struct_type() {
            return pb_1.Message.getField(this, 104) != null;
        }
        get dict_type() {
            return pb_1.Message.getWrapperField(this, DictType, 105) as DictType;
        }
        set dict_type(value: DictType) {
            pb_1.Message.setOneofWrapperField(this, 105, this.#one_of_decls[0], value);
        }
        get has_dict_type() {
            return pb_1.Message.getField(this, 105) != null;
        }
        get variant_type() {
            return pb_1.Message.getWrapperField(this, VariantType, 106) as VariantType;
        }
        set variant_type(value: VariantType) {
            pb_1.Message.setOneofWrapperField(this, 106, this.#one_of_decls[0], value);
        }
        get has_variant_type() {
            return pb_1.Message.getField(this, 106) != null;
        }
        get tagged_type() {
            return pb_1.Message.getWrapperField(this, TaggedType, 107) as TaggedType;
        }
        set tagged_type(value: TaggedType) {
            pb_1.Message.setOneofWrapperField(this, 107, this.#one_of_decls[0], value);
        }
        get has_tagged_type() {
            return pb_1.Message.getField(this, 107) != null;
        }
        get void_type() {
            return pb_1.Message.getFieldWithDefault(this, 201, dependency_1.google.protobuf.NullValue.NULL_VALUE) as dependency_1.google.protobuf.NullValue;
        }
        set void_type(value: dependency_1.google.protobuf.NullValue) {
            pb_1.Message.setOneofField(this, 201, this.#one_of_decls[0], value);
        }
        get has_void_type() {
            return pb_1.Message.getField(this, 201) != null;
        }
        get null_type() {
            return pb_1.Message.getFieldWithDefault(this, 202, dependency_1.google.protobuf.NullValue.NULL_VALUE) as dependency_1.google.protobuf.NullValue;
        }
        set null_type(value: dependency_1.google.protobuf.NullValue) {
            pb_1.Message.setOneofField(this, 202, this.#one_of_decls[0], value);
        }
        get has_null_type() {
            return pb_1.Message.getField(this, 202) != null;
        }
        get empty_list_type() {
            return pb_1.Message.getFieldWithDefault(this, 203, dependency_1.google.protobuf.NullValue.NULL_VALUE) as dependency_1.google.protobuf.NullValue;
        }
        set empty_list_type(value: dependency_1.google.protobuf.NullValue) {
            pb_1.Message.setOneofField(this, 203, this.#one_of_decls[0], value);
        }
        get has_empty_list_type() {
            return pb_1.Message.getField(this, 203) != null;
        }
        get empty_dict_type() {
            return pb_1.Message.getFieldWithDefault(this, 204, dependency_1.google.protobuf.NullValue.NULL_VALUE) as dependency_1.google.protobuf.NullValue;
        }
        set empty_dict_type(value: dependency_1.google.protobuf.NullValue) {
            pb_1.Message.setOneofField(this, 204, this.#one_of_decls[0], value);
        }
        get has_empty_dict_type() {
            return pb_1.Message.getField(this, 204) != null;
        }
        get pg_type() {
            return pb_1.Message.getWrapperField(this, PgType, 205) as PgType;
        }
        set pg_type(value: PgType) {
            pb_1.Message.setOneofWrapperField(this, 205, this.#one_of_decls[0], value);
        }
        get has_pg_type() {
            return pb_1.Message.getField(this, 205) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "type_id" | "decimal_type" | "optional_type" | "list_type" | "tuple_type" | "struct_type" | "dict_type" | "variant_type" | "tagged_type" | "void_type" | "null_type" | "empty_list_type" | "empty_dict_type" | "pg_type";
            } = {
                0: "none",
                1: "type_id",
                2: "decimal_type",
                101: "optional_type",
                102: "list_type",
                103: "tuple_type",
                104: "struct_type",
                105: "dict_type",
                106: "variant_type",
                107: "tagged_type",
                201: "void_type",
                202: "null_type",
                203: "empty_list_type",
                204: "empty_dict_type",
                205: "pg_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 101, 102, 103, 104, 105, 106, 107, 201, 202, 203, 204, 205])];
        }
        static fromObject(data: {
            type_id?: Type.PrimitiveTypeId;
            decimal_type?: ReturnType<typeof DecimalType.prototype.toObject>;
            optional_type?: ReturnType<typeof OptionalType.prototype.toObject>;
            list_type?: ReturnType<typeof ListType.prototype.toObject>;
            tuple_type?: ReturnType<typeof TupleType.prototype.toObject>;
            struct_type?: ReturnType<typeof StructType.prototype.toObject>;
            dict_type?: ReturnType<typeof DictType.prototype.toObject>;
            variant_type?: ReturnType<typeof VariantType.prototype.toObject>;
            tagged_type?: ReturnType<typeof TaggedType.prototype.toObject>;
            void_type?: dependency_1.google.protobuf.NullValue;
            null_type?: dependency_1.google.protobuf.NullValue;
            empty_list_type?: dependency_1.google.protobuf.NullValue;
            empty_dict_type?: dependency_1.google.protobuf.NullValue;
            pg_type?: ReturnType<typeof PgType.prototype.toObject>;
        }): Type {
            const message = new Type({});
            if (data.type_id != null) {
                message.type_id = data.type_id;
            }
            if (data.decimal_type != null) {
                message.decimal_type = DecimalType.fromObject(data.decimal_type);
            }
            if (data.optional_type != null) {
                message.optional_type = OptionalType.fromObject(data.optional_type);
            }
            if (data.list_type != null) {
                message.list_type = ListType.fromObject(data.list_type);
            }
            if (data.tuple_type != null) {
                message.tuple_type = TupleType.fromObject(data.tuple_type);
            }
            if (data.struct_type != null) {
                message.struct_type = StructType.fromObject(data.struct_type);
            }
            if (data.dict_type != null) {
                message.dict_type = DictType.fromObject(data.dict_type);
            }
            if (data.variant_type != null) {
                message.variant_type = VariantType.fromObject(data.variant_type);
            }
            if (data.tagged_type != null) {
                message.tagged_type = TaggedType.fromObject(data.tagged_type);
            }
            if (data.void_type != null) {
                message.void_type = data.void_type;
            }
            if (data.null_type != null) {
                message.null_type = data.null_type;
            }
            if (data.empty_list_type != null) {
                message.empty_list_type = data.empty_list_type;
            }
            if (data.empty_dict_type != null) {
                message.empty_dict_type = data.empty_dict_type;
            }
            if (data.pg_type != null) {
                message.pg_type = PgType.fromObject(data.pg_type);
            }
            return message;
        }
        toObject() {
            const data: {
                type_id?: Type.PrimitiveTypeId;
                decimal_type?: ReturnType<typeof DecimalType.prototype.toObject>;
                optional_type?: ReturnType<typeof OptionalType.prototype.toObject>;
                list_type?: ReturnType<typeof ListType.prototype.toObject>;
                tuple_type?: ReturnType<typeof TupleType.prototype.toObject>;
                struct_type?: ReturnType<typeof StructType.prototype.toObject>;
                dict_type?: ReturnType<typeof DictType.prototype.toObject>;
                variant_type?: ReturnType<typeof VariantType.prototype.toObject>;
                tagged_type?: ReturnType<typeof TaggedType.prototype.toObject>;
                void_type?: dependency_1.google.protobuf.NullValue;
                null_type?: dependency_1.google.protobuf.NullValue;
                empty_list_type?: dependency_1.google.protobuf.NullValue;
                empty_dict_type?: dependency_1.google.protobuf.NullValue;
                pg_type?: ReturnType<typeof PgType.prototype.toObject>;
            } = {};
            if (this.type_id != null) {
                data.type_id = this.type_id;
            }
            if (this.decimal_type != null) {
                data.decimal_type = this.decimal_type.toObject();
            }
            if (this.optional_type != null) {
                data.optional_type = this.optional_type.toObject();
            }
            if (this.list_type != null) {
                data.list_type = this.list_type.toObject();
            }
            if (this.tuple_type != null) {
                data.tuple_type = this.tuple_type.toObject();
            }
            if (this.struct_type != null) {
                data.struct_type = this.struct_type.toObject();
            }
            if (this.dict_type != null) {
                data.dict_type = this.dict_type.toObject();
            }
            if (this.variant_type != null) {
                data.variant_type = this.variant_type.toObject();
            }
            if (this.tagged_type != null) {
                data.tagged_type = this.tagged_type.toObject();
            }
            if (this.void_type != null) {
                data.void_type = this.void_type;
            }
            if (this.null_type != null) {
                data.null_type = this.null_type;
            }
            if (this.empty_list_type != null) {
                data.empty_list_type = this.empty_list_type;
            }
            if (this.empty_dict_type != null) {
                data.empty_dict_type = this.empty_dict_type;
            }
            if (this.pg_type != null) {
                data.pg_type = this.pg_type.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_type_id)
                writer.writeEnum(1, this.type_id);
            if (this.has_decimal_type)
                writer.writeMessage(2, this.decimal_type, () => this.decimal_type.serialize(writer));
            if (this.has_optional_type)
                writer.writeMessage(101, this.optional_type, () => this.optional_type.serialize(writer));
            if (this.has_list_type)
                writer.writeMessage(102, this.list_type, () => this.list_type.serialize(writer));
            if (this.has_tuple_type)
                writer.writeMessage(103, this.tuple_type, () => this.tuple_type.serialize(writer));
            if (this.has_struct_type)
                writer.writeMessage(104, this.struct_type, () => this.struct_type.serialize(writer));
            if (this.has_dict_type)
                writer.writeMessage(105, this.dict_type, () => this.dict_type.serialize(writer));
            if (this.has_variant_type)
                writer.writeMessage(106, this.variant_type, () => this.variant_type.serialize(writer));
            if (this.has_tagged_type)
                writer.writeMessage(107, this.tagged_type, () => this.tagged_type.serialize(writer));
            if (this.has_void_type)
                writer.writeEnum(201, this.void_type);
            if (this.has_null_type)
                writer.writeEnum(202, this.null_type);
            if (this.has_empty_list_type)
                writer.writeEnum(203, this.empty_list_type);
            if (this.has_empty_dict_type)
                writer.writeEnum(204, this.empty_dict_type);
            if (this.has_pg_type)
                writer.writeMessage(205, this.pg_type, () => this.pg_type.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Type {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Type();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type_id = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.decimal_type, () => message.decimal_type = DecimalType.deserialize(reader));
                        break;
                    case 101:
                        reader.readMessage(message.optional_type, () => message.optional_type = OptionalType.deserialize(reader));
                        break;
                    case 102:
                        reader.readMessage(message.list_type, () => message.list_type = ListType.deserialize(reader));
                        break;
                    case 103:
                        reader.readMessage(message.tuple_type, () => message.tuple_type = TupleType.deserialize(reader));
                        break;
                    case 104:
                        reader.readMessage(message.struct_type, () => message.struct_type = StructType.deserialize(reader));
                        break;
                    case 105:
                        reader.readMessage(message.dict_type, () => message.dict_type = DictType.deserialize(reader));
                        break;
                    case 106:
                        reader.readMessage(message.variant_type, () => message.variant_type = VariantType.deserialize(reader));
                        break;
                    case 107:
                        reader.readMessage(message.tagged_type, () => message.tagged_type = TaggedType.deserialize(reader));
                        break;
                    case 201:
                        message.void_type = reader.readEnum();
                        break;
                    case 202:
                        message.null_type = reader.readEnum();
                        break;
                    case 203:
                        message.empty_list_type = reader.readEnum();
                        break;
                    case 204:
                        message.empty_dict_type = reader.readEnum();
                        break;
                    case 205:
                        reader.readMessage(message.pg_type, () => message.pg_type = PgType.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Type {
            return Type.deserialize(bytes);
        }
    }
    export namespace Type {
        export enum PrimitiveTypeId {
            PRIMITIVE_TYPE_ID_UNSPECIFIED = 0,
            BOOL = 6,
            INT8 = 7,
            UINT8 = 5,
            INT16 = 8,
            UINT16 = 9,
            INT32 = 1,
            UINT32 = 2,
            INT64 = 3,
            UINT64 = 4,
            FLOAT = 33,
            DOUBLE = 32,
            DATE = 48,
            DATETIME = 49,
            TIMESTAMP = 50,
            INTERVAL = 51,
            TZ_DATE = 52,
            TZ_DATETIME = 53,
            TZ_TIMESTAMP = 54,
            STRING = 4097,
            UTF8 = 4608,
            YSON = 4609,
            JSON = 4610,
            UUID = 4611,
            JSON_DOCUMENT = 4612,
            DYNUMBER = 4866
        }
    }
    export class ValuePair extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: Value;
            payload?: Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
        }
        get key() {
            return pb_1.Message.getWrapperField(this, Value, 1) as Value;
        }
        set key(value: Value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, Value, 2) as Value;
        }
        set payload(value: Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            key?: ReturnType<typeof Value.prototype.toObject>;
            payload?: ReturnType<typeof Value.prototype.toObject>;
        }): ValuePair {
            const message = new ValuePair({});
            if (data.key != null) {
                message.key = Value.fromObject(data.key);
            }
            if (data.payload != null) {
                message.payload = Value.fromObject(data.payload);
            }
            return message;
        }
        toObject() {
            const data: {
                key?: ReturnType<typeof Value.prototype.toObject>;
                payload?: ReturnType<typeof Value.prototype.toObject>;
            } = {};
            if (this.key != null) {
                data.key = this.key.toObject();
            }
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key)
                writer.writeMessage(1, this.key, () => this.key.serialize(writer));
            if (this.has_payload)
                writer.writeMessage(2, this.payload, () => this.payload.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValuePair {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValuePair();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.key, () => message.key = Value.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.payload, () => message.payload = Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValuePair {
            return ValuePair.deserialize(bytes);
        }
    }
    export class Value extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15]];
        constructor(data?: any[] | ({
            items?: Value[];
            pairs?: ValuePair[];
            variant_index?: number;
            high_128?: number;
        } & (({
            bool_value?: boolean;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: number;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: number;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: number;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: number;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: number;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: number;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: Uint8Array;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: string;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: dependency_1.google.protobuf.NullValue;
            nested_value?: never;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: Value;
            low_128?: never;
        } | {
            bool_value?: never;
            int32_value?: never;
            uint32_value?: never;
            int64_value?: never;
            uint64_value?: never;
            float_value?: never;
            double_value?: never;
            bytes_value?: never;
            text_value?: never;
            null_flag_value?: never;
            nested_value?: never;
            low_128?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12, 13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
                if ("int32_value" in data && data.int32_value != undefined) {
                    this.int32_value = data.int32_value;
                }
                if ("uint32_value" in data && data.uint32_value != undefined) {
                    this.uint32_value = data.uint32_value;
                }
                if ("int64_value" in data && data.int64_value != undefined) {
                    this.int64_value = data.int64_value;
                }
                if ("uint64_value" in data && data.uint64_value != undefined) {
                    this.uint64_value = data.uint64_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
                if ("double_value" in data && data.double_value != undefined) {
                    this.double_value = data.double_value;
                }
                if ("bytes_value" in data && data.bytes_value != undefined) {
                    this.bytes_value = data.bytes_value;
                }
                if ("text_value" in data && data.text_value != undefined) {
                    this.text_value = data.text_value;
                }
                if ("null_flag_value" in data && data.null_flag_value != undefined) {
                    this.null_flag_value = data.null_flag_value;
                }
                if ("nested_value" in data && data.nested_value != undefined) {
                    this.nested_value = data.nested_value;
                }
                if ("low_128" in data && data.low_128 != undefined) {
                    this.low_128 = data.low_128;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("pairs" in data && data.pairs != undefined) {
                    this.pairs = data.pairs;
                }
                if ("variant_index" in data && data.variant_index != undefined) {
                    this.variant_index = data.variant_index;
                }
                if ("high_128" in data && data.high_128 != undefined) {
                    this.high_128 = data.high_128;
                }
            }
        }
        get bool_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set bool_value(value: boolean) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_bool_value() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get int32_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set int32_value(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_int32_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get uint32_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uint32_value(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_uint32_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get int64_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set int64_value(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_int64_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get uint64_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set uint64_value(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_uint64_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set float_value(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get double_value() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set double_value(value: number) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
        }
        get has_double_value() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get bytes_value() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set bytes_value(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[0], value);
        }
        get has_bytes_value() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get text_value() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set text_value(value: string) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[0], value);
        }
        get has_text_value() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get null_flag_value() {
            return pb_1.Message.getFieldWithDefault(this, 10, dependency_1.google.protobuf.NullValue.NULL_VALUE) as dependency_1.google.protobuf.NullValue;
        }
        set null_flag_value(value: dependency_1.google.protobuf.NullValue) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[0], value);
        }
        get has_null_flag_value() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get nested_value() {
            return pb_1.Message.getWrapperField(this, Value, 11) as Value;
        }
        set nested_value(value: Value) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_nested_value() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get low_128() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set low_128(value: number) {
            pb_1.Message.setOneofField(this, 15, this.#one_of_decls[0], value);
        }
        get has_low_128() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, Value, 12) as Value[];
        }
        set items(value: Value[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get pairs() {
            return pb_1.Message.getRepeatedWrapperField(this, ValuePair, 13) as ValuePair[];
        }
        set pairs(value: ValuePair[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get variant_index() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set variant_index(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get high_128() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set high_128(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get value() {
            const cases: {
                [index: number]: "none" | "bool_value" | "int32_value" | "uint32_value" | "int64_value" | "uint64_value" | "float_value" | "double_value" | "bytes_value" | "text_value" | "null_flag_value" | "nested_value" | "low_128";
            } = {
                0: "none",
                1: "bool_value",
                2: "int32_value",
                3: "uint32_value",
                4: "int64_value",
                5: "uint64_value",
                6: "float_value",
                7: "double_value",
                8: "bytes_value",
                9: "text_value",
                10: "null_flag_value",
                11: "nested_value",
                15: "low_128"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15])];
        }
        static fromObject(data: {
            bool_value?: boolean;
            int32_value?: number;
            uint32_value?: number;
            int64_value?: number;
            uint64_value?: number;
            float_value?: number;
            double_value?: number;
            bytes_value?: Uint8Array;
            text_value?: string;
            null_flag_value?: dependency_1.google.protobuf.NullValue;
            nested_value?: ReturnType<typeof Value.prototype.toObject>;
            low_128?: number;
            items?: ReturnType<typeof Value.prototype.toObject>[];
            pairs?: ReturnType<typeof ValuePair.prototype.toObject>[];
            variant_index?: number;
            high_128?: number;
        }): Value {
            const message = new Value({});
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            if (data.int32_value != null) {
                message.int32_value = data.int32_value;
            }
            if (data.uint32_value != null) {
                message.uint32_value = data.uint32_value;
            }
            if (data.int64_value != null) {
                message.int64_value = data.int64_value;
            }
            if (data.uint64_value != null) {
                message.uint64_value = data.uint64_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            if (data.double_value != null) {
                message.double_value = data.double_value;
            }
            if (data.bytes_value != null) {
                message.bytes_value = data.bytes_value;
            }
            if (data.text_value != null) {
                message.text_value = data.text_value;
            }
            if (data.null_flag_value != null) {
                message.null_flag_value = data.null_flag_value;
            }
            if (data.nested_value != null) {
                message.nested_value = Value.fromObject(data.nested_value);
            }
            if (data.low_128 != null) {
                message.low_128 = data.low_128;
            }
            if (data.items != null) {
                message.items = data.items.map(item => Value.fromObject(item));
            }
            if (data.pairs != null) {
                message.pairs = data.pairs.map(item => ValuePair.fromObject(item));
            }
            if (data.variant_index != null) {
                message.variant_index = data.variant_index;
            }
            if (data.high_128 != null) {
                message.high_128 = data.high_128;
            }
            return message;
        }
        toObject() {
            const data: {
                bool_value?: boolean;
                int32_value?: number;
                uint32_value?: number;
                int64_value?: number;
                uint64_value?: number;
                float_value?: number;
                double_value?: number;
                bytes_value?: Uint8Array;
                text_value?: string;
                null_flag_value?: dependency_1.google.protobuf.NullValue;
                nested_value?: ReturnType<typeof Value.prototype.toObject>;
                low_128?: number;
                items?: ReturnType<typeof Value.prototype.toObject>[];
                pairs?: ReturnType<typeof ValuePair.prototype.toObject>[];
                variant_index?: number;
                high_128?: number;
            } = {};
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            if (this.int32_value != null) {
                data.int32_value = this.int32_value;
            }
            if (this.uint32_value != null) {
                data.uint32_value = this.uint32_value;
            }
            if (this.int64_value != null) {
                data.int64_value = this.int64_value;
            }
            if (this.uint64_value != null) {
                data.uint64_value = this.uint64_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            if (this.double_value != null) {
                data.double_value = this.double_value;
            }
            if (this.bytes_value != null) {
                data.bytes_value = this.bytes_value;
            }
            if (this.text_value != null) {
                data.text_value = this.text_value;
            }
            if (this.null_flag_value != null) {
                data.null_flag_value = this.null_flag_value;
            }
            if (this.nested_value != null) {
                data.nested_value = this.nested_value.toObject();
            }
            if (this.low_128 != null) {
                data.low_128 = this.low_128;
            }
            if (this.items != null) {
                data.items = this.items.map((item: Value) => item.toObject());
            }
            if (this.pairs != null) {
                data.pairs = this.pairs.map((item: ValuePair) => item.toObject());
            }
            if (this.variant_index != null) {
                data.variant_index = this.variant_index;
            }
            if (this.high_128 != null) {
                data.high_128 = this.high_128;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_bool_value)
                writer.writeBool(1, this.bool_value);
            if (this.has_int32_value)
                writer.writeSfixed32(2, this.int32_value);
            if (this.has_uint32_value)
                writer.writeFixed32(3, this.uint32_value);
            if (this.has_int64_value)
                writer.writeSfixed64(4, this.int64_value);
            if (this.has_uint64_value)
                writer.writeFixed64(5, this.uint64_value);
            if (this.has_float_value)
                writer.writeFloat(6, this.float_value);
            if (this.has_double_value)
                writer.writeDouble(7, this.double_value);
            if (this.has_bytes_value)
                writer.writeBytes(8, this.bytes_value);
            if (this.has_text_value)
                writer.writeString(9, this.text_value);
            if (this.has_null_flag_value)
                writer.writeEnum(10, this.null_flag_value);
            if (this.has_nested_value)
                writer.writeMessage(11, this.nested_value, () => this.nested_value.serialize(writer));
            if (this.has_low_128)
                writer.writeFixed64(15, this.low_128);
            if (this.items.length)
                writer.writeRepeatedMessage(12, this.items, (item: Value) => item.serialize(writer));
            if (this.pairs.length)
                writer.writeRepeatedMessage(13, this.pairs, (item: ValuePair) => item.serialize(writer));
            if (this.variant_index != 0)
                writer.writeUint32(14, this.variant_index);
            if (this.high_128 != 0)
                writer.writeFixed64(16, this.high_128);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Value {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Value();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bool_value = reader.readBool();
                        break;
                    case 2:
                        message.int32_value = reader.readSfixed32();
                        break;
                    case 3:
                        message.uint32_value = reader.readFixed32();
                        break;
                    case 4:
                        message.int64_value = reader.readSfixed64();
                        break;
                    case 5:
                        message.uint64_value = reader.readFixed64();
                        break;
                    case 6:
                        message.float_value = reader.readFloat();
                        break;
                    case 7:
                        message.double_value = reader.readDouble();
                        break;
                    case 8:
                        message.bytes_value = reader.readBytes();
                        break;
                    case 9:
                        message.text_value = reader.readString();
                        break;
                    case 10:
                        message.null_flag_value = reader.readEnum();
                        break;
                    case 11:
                        reader.readMessage(message.nested_value, () => message.nested_value = Value.deserialize(reader));
                        break;
                    case 15:
                        message.low_128 = reader.readFixed64();
                        break;
                    case 12:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 12, Value.deserialize(reader), Value));
                        break;
                    case 13:
                        reader.readMessage(message.pairs, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ValuePair.deserialize(reader), ValuePair));
                        break;
                    case 14:
                        message.variant_index = reader.readUint32();
                        break;
                    case 16:
                        message.high_128 = reader.readFixed64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Value {
            return Value.deserialize(bytes);
        }
    }
    export class TypedValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: Type;
            value?: Value;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get type() {
            return pb_1.Message.getWrapperField(this, Type, 1) as Type;
        }
        set type(value: Type) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value() {
            return pb_1.Message.getWrapperField(this, Value, 2) as Value;
        }
        set value(value: Value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            type?: ReturnType<typeof Type.prototype.toObject>;
            value?: ReturnType<typeof Value.prototype.toObject>;
        }): TypedValue {
            const message = new TypedValue({});
            if (data.type != null) {
                message.type = Type.fromObject(data.type);
            }
            if (data.value != null) {
                message.value = Value.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                type?: ReturnType<typeof Type.prototype.toObject>;
                value?: ReturnType<typeof Value.prototype.toObject>;
            } = {};
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_type)
                writer.writeMessage(1, this.type, () => this.type.serialize(writer));
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TypedValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TypedValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.type, () => message.type = Type.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = Value.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TypedValue {
            return TypedValue.deserialize(bytes);
        }
    }
    export class Column extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            type?: Type;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getWrapperField(this, Type, 2) as Type;
        }
        set type(value: Type) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            type?: ReturnType<typeof Type.prototype.toObject>;
        }): Column {
            const message = new Column({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = Type.fromObject(data.type);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                type?: ReturnType<typeof Type.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_type)
                writer.writeMessage(2, this.type, () => this.type.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Column {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Column();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.type, () => message.type = Type.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Column {
            return Column.deserialize(bytes);
        }
    }
    export class ResultSet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            columns?: Column[];
            rows?: Value[];
            truncated?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("columns" in data && data.columns != undefined) {
                    this.columns = data.columns;
                }
                if ("rows" in data && data.rows != undefined) {
                    this.rows = data.rows;
                }
                if ("truncated" in data && data.truncated != undefined) {
                    this.truncated = data.truncated;
                }
            }
        }
        get columns() {
            return pb_1.Message.getRepeatedWrapperField(this, Column, 1) as Column[];
        }
        set columns(value: Column[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get rows() {
            return pb_1.Message.getRepeatedWrapperField(this, Value, 2) as Value[];
        }
        set rows(value: Value[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get truncated() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set truncated(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            columns?: ReturnType<typeof Column.prototype.toObject>[];
            rows?: ReturnType<typeof Value.prototype.toObject>[];
            truncated?: boolean;
        }): ResultSet {
            const message = new ResultSet({});
            if (data.columns != null) {
                message.columns = data.columns.map(item => Column.fromObject(item));
            }
            if (data.rows != null) {
                message.rows = data.rows.map(item => Value.fromObject(item));
            }
            if (data.truncated != null) {
                message.truncated = data.truncated;
            }
            return message;
        }
        toObject() {
            const data: {
                columns?: ReturnType<typeof Column.prototype.toObject>[];
                rows?: ReturnType<typeof Value.prototype.toObject>[];
                truncated?: boolean;
            } = {};
            if (this.columns != null) {
                data.columns = this.columns.map((item: Column) => item.toObject());
            }
            if (this.rows != null) {
                data.rows = this.rows.map((item: Value) => item.toObject());
            }
            if (this.truncated != null) {
                data.truncated = this.truncated;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.columns.length)
                writer.writeRepeatedMessage(1, this.columns, (item: Column) => item.serialize(writer));
            if (this.rows.length)
                writer.writeRepeatedMessage(2, this.rows, (item: Value) => item.serialize(writer));
            if (this.truncated != false)
                writer.writeBool(3, this.truncated);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResultSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResultSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.columns, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Column.deserialize(reader), Column));
                        break;
                    case 2:
                        reader.readMessage(message.rows, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Value.deserialize(reader), Value));
                        break;
                    case 3:
                        message.truncated = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResultSet {
            return ResultSet.deserialize(bytes);
        }
    }
}
