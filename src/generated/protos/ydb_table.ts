/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: protos/ydb_table.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./annotations/validation";
import * as dependency_2 from "./ydb_common";
import * as dependency_3 from "./ydb_issue_message";
import * as dependency_4 from "./ydb_operation";
import * as dependency_5 from "./ydb_query_stats";
import * as dependency_6 from "./ydb_value";
import * as dependency_7 from "./ydb_scheme";
import * as dependency_8 from "./ydb_status_codes";
import * as dependency_9 from "./ydb_formats";
import * as dependency_10 from "./../google/protobuf/empty";
import * as dependency_11 from "./../google/protobuf/duration";
import * as dependency_12 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace Ydb.Table {
    export class CreateSessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 1) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): CreateSessionRequest {
            const message = new CreateSessionRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSessionRequest {
            return CreateSessionRequest.deserialize(bytes);
        }
    }
    export class CreateSessionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): CreateSessionResponse {
            const message = new CreateSessionResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSessionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSessionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSessionResponse {
            return CreateSessionResponse.deserialize(bytes);
        }
    }
    export class CreateSessionResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session_id?: string;
        }): CreateSessionResult {
            const message = new CreateSessionResult({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSessionResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSessionResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSessionResult {
            return CreateSessionResult.deserialize(bytes);
        }
    }
    export class DeleteSessionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 2) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            session_id?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): DeleteSessionRequest {
            const message = new DeleteSessionRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.has_operation_params)
                writer.writeMessage(2, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSessionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSessionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSessionRequest {
            return DeleteSessionRequest.deserialize(bytes);
        }
    }
    export class DeleteSessionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): DeleteSessionResponse {
            const message = new DeleteSessionResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSessionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSessionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSessionResponse {
            return DeleteSessionResponse.deserialize(bytes);
        }
    }
    export class GlobalIndex extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GlobalIndex {
            const message = new GlobalIndex({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GlobalIndex {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GlobalIndex();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GlobalIndex {
            return GlobalIndex.deserialize(bytes);
        }
    }
    export class GlobalAsyncIndex extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GlobalAsyncIndex {
            const message = new GlobalAsyncIndex({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GlobalAsyncIndex {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GlobalAsyncIndex();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GlobalAsyncIndex {
            return GlobalAsyncIndex.deserialize(bytes);
        }
    }
    export class TableIndex extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            name?: string;
            index_columns?: string[];
            data_columns?: string[];
        } & (({
            global_index?: GlobalIndex;
            global_async_index?: never;
        } | {
            global_index?: never;
            global_async_index?: GlobalAsyncIndex;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("index_columns" in data && data.index_columns != undefined) {
                    this.index_columns = data.index_columns;
                }
                if ("global_index" in data && data.global_index != undefined) {
                    this.global_index = data.global_index;
                }
                if ("global_async_index" in data && data.global_async_index != undefined) {
                    this.global_async_index = data.global_async_index;
                }
                if ("data_columns" in data && data.data_columns != undefined) {
                    this.data_columns = data.data_columns;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get index_columns() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set index_columns(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get global_index() {
            return pb_1.Message.getWrapperField(this, GlobalIndex, 3) as GlobalIndex;
        }
        set global_index(value: GlobalIndex) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_global_index() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get global_async_index() {
            return pb_1.Message.getWrapperField(this, GlobalAsyncIndex, 4) as GlobalAsyncIndex;
        }
        set global_async_index(value: GlobalAsyncIndex) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_global_async_index() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get data_columns() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set data_columns(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get type() {
            const cases: {
                [index: number]: "none" | "global_index" | "global_async_index";
            } = {
                0: "none",
                3: "global_index",
                4: "global_async_index"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            name?: string;
            index_columns?: string[];
            global_index?: ReturnType<typeof GlobalIndex.prototype.toObject>;
            global_async_index?: ReturnType<typeof GlobalAsyncIndex.prototype.toObject>;
            data_columns?: string[];
        }): TableIndex {
            const message = new TableIndex({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.index_columns != null) {
                message.index_columns = data.index_columns;
            }
            if (data.global_index != null) {
                message.global_index = GlobalIndex.fromObject(data.global_index);
            }
            if (data.global_async_index != null) {
                message.global_async_index = GlobalAsyncIndex.fromObject(data.global_async_index);
            }
            if (data.data_columns != null) {
                message.data_columns = data.data_columns;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                index_columns?: string[];
                global_index?: ReturnType<typeof GlobalIndex.prototype.toObject>;
                global_async_index?: ReturnType<typeof GlobalAsyncIndex.prototype.toObject>;
                data_columns?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.index_columns != null) {
                data.index_columns = this.index_columns;
            }
            if (this.global_index != null) {
                data.global_index = this.global_index.toObject();
            }
            if (this.global_async_index != null) {
                data.global_async_index = this.global_async_index.toObject();
            }
            if (this.data_columns != null) {
                data.data_columns = this.data_columns;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.index_columns.length)
                writer.writeRepeatedString(2, this.index_columns);
            if (this.has_global_index)
                writer.writeMessage(3, this.global_index, () => this.global_index.serialize(writer));
            if (this.has_global_async_index)
                writer.writeMessage(4, this.global_async_index, () => this.global_async_index.serialize(writer));
            if (this.data_columns.length)
                writer.writeRepeatedString(5, this.data_columns);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableIndex {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableIndex();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.global_index, () => message.global_index = GlobalIndex.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.global_async_index, () => message.global_async_index = GlobalAsyncIndex.deserialize(reader));
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableIndex {
            return TableIndex.deserialize(bytes);
        }
    }
    export class TableIndexDescription extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 5]];
        constructor(data?: any[] | ({
            name?: string;
            index_columns?: string[];
            status?: TableIndexDescription.Status;
            data_columns?: string[];
            size_bytes?: number;
        } & (({
            global_index?: GlobalIndex;
            global_async_index?: never;
        } | {
            global_index?: never;
            global_async_index?: GlobalAsyncIndex;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("index_columns" in data && data.index_columns != undefined) {
                    this.index_columns = data.index_columns;
                }
                if ("global_index" in data && data.global_index != undefined) {
                    this.global_index = data.global_index;
                }
                if ("global_async_index" in data && data.global_async_index != undefined) {
                    this.global_async_index = data.global_async_index;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("data_columns" in data && data.data_columns != undefined) {
                    this.data_columns = data.data_columns;
                }
                if ("size_bytes" in data && data.size_bytes != undefined) {
                    this.size_bytes = data.size_bytes;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get index_columns() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set index_columns(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get global_index() {
            return pb_1.Message.getWrapperField(this, GlobalIndex, 3) as GlobalIndex;
        }
        set global_index(value: GlobalIndex) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_global_index() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get global_async_index() {
            return pb_1.Message.getWrapperField(this, GlobalAsyncIndex, 5) as GlobalAsyncIndex;
        }
        set global_async_index(value: GlobalAsyncIndex) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_global_async_index() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, TableIndexDescription.Status.STATUS_UNSPECIFIED) as TableIndexDescription.Status;
        }
        set status(value: TableIndexDescription.Status) {
            pb_1.Message.setField(this, 4, value);
        }
        get data_columns() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set data_columns(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get size_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set size_bytes(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get type() {
            const cases: {
                [index: number]: "none" | "global_index" | "global_async_index";
            } = {
                0: "none",
                3: "global_index",
                5: "global_async_index"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 5])];
        }
        static fromObject(data: {
            name?: string;
            index_columns?: string[];
            global_index?: ReturnType<typeof GlobalIndex.prototype.toObject>;
            global_async_index?: ReturnType<typeof GlobalAsyncIndex.prototype.toObject>;
            status?: TableIndexDescription.Status;
            data_columns?: string[];
            size_bytes?: number;
        }): TableIndexDescription {
            const message = new TableIndexDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.index_columns != null) {
                message.index_columns = data.index_columns;
            }
            if (data.global_index != null) {
                message.global_index = GlobalIndex.fromObject(data.global_index);
            }
            if (data.global_async_index != null) {
                message.global_async_index = GlobalAsyncIndex.fromObject(data.global_async_index);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.data_columns != null) {
                message.data_columns = data.data_columns;
            }
            if (data.size_bytes != null) {
                message.size_bytes = data.size_bytes;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                index_columns?: string[];
                global_index?: ReturnType<typeof GlobalIndex.prototype.toObject>;
                global_async_index?: ReturnType<typeof GlobalAsyncIndex.prototype.toObject>;
                status?: TableIndexDescription.Status;
                data_columns?: string[];
                size_bytes?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.index_columns != null) {
                data.index_columns = this.index_columns;
            }
            if (this.global_index != null) {
                data.global_index = this.global_index.toObject();
            }
            if (this.global_async_index != null) {
                data.global_async_index = this.global_async_index.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.data_columns != null) {
                data.data_columns = this.data_columns;
            }
            if (this.size_bytes != null) {
                data.size_bytes = this.size_bytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.index_columns.length)
                writer.writeRepeatedString(2, this.index_columns);
            if (this.has_global_index)
                writer.writeMessage(3, this.global_index, () => this.global_index.serialize(writer));
            if (this.has_global_async_index)
                writer.writeMessage(5, this.global_async_index, () => this.global_async_index.serialize(writer));
            if (this.status != TableIndexDescription.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(4, this.status);
            if (this.data_columns.length)
                writer.writeRepeatedString(6, this.data_columns);
            if (this.size_bytes != 0)
                writer.writeUint64(7, this.size_bytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableIndexDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableIndexDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.global_index, () => message.global_index = GlobalIndex.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.global_async_index, () => message.global_async_index = GlobalAsyncIndex.deserialize(reader));
                        break;
                    case 4:
                        message.status = reader.readEnum();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.size_bytes = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableIndexDescription {
            return TableIndexDescription.deserialize(bytes);
        }
    }
    export namespace TableIndexDescription {
        export enum Status {
            STATUS_UNSPECIFIED = 0,
            STATUS_READY = 1,
            STATUS_BUILDING = 2
        }
    }
    export class IndexBuildState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): IndexBuildState {
            const message = new IndexBuildState({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexBuildState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexBuildState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexBuildState {
            return IndexBuildState.deserialize(bytes);
        }
    }
    export namespace IndexBuildState {
        export enum State {
            STATE_UNSPECIFIED = 0,
            STATE_PREPARING = 1,
            STATE_TRANSFERING_DATA = 2,
            STATE_APPLYING = 3,
            STATE_DONE = 4,
            STATE_CANCELLATION = 5,
            STATE_CANCELLED = 6,
            STATE_REJECTION = 7,
            STATE_REJECTED = 8
        }
    }
    export class IndexBuildDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            index?: TableIndex;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getWrapperField(this, TableIndex, 2) as TableIndex;
        }
        set index(value: TableIndex) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_index() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            path?: string;
            index?: ReturnType<typeof TableIndex.prototype.toObject>;
        }): IndexBuildDescription {
            const message = new IndexBuildDescription({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.index != null) {
                message.index = TableIndex.fromObject(data.index);
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                index?: ReturnType<typeof TableIndex.prototype.toObject>;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.index != null) {
                data.index = this.index.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.has_index)
                writer.writeMessage(2, this.index, () => this.index.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexBuildDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexBuildDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.index, () => message.index = TableIndex.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexBuildDescription {
            return IndexBuildDescription.deserialize(bytes);
        }
    }
    export class IndexBuildMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: IndexBuildDescription;
            state?: IndexBuildState.State;
            progress?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("progress" in data && data.progress != undefined) {
                    this.progress = data.progress;
                }
            }
        }
        get description() {
            return pb_1.Message.getWrapperField(this, IndexBuildDescription, 1) as IndexBuildDescription;
        }
        set description(value: IndexBuildDescription) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, IndexBuildState.State.STATE_UNSPECIFIED) as IndexBuildState.State;
        }
        set state(value: IndexBuildState.State) {
            pb_1.Message.setField(this, 2, value);
        }
        get progress() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set progress(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            description?: ReturnType<typeof IndexBuildDescription.prototype.toObject>;
            state?: IndexBuildState.State;
            progress?: number;
        }): IndexBuildMetadata {
            const message = new IndexBuildMetadata({});
            if (data.description != null) {
                message.description = IndexBuildDescription.fromObject(data.description);
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.progress != null) {
                message.progress = data.progress;
            }
            return message;
        }
        toObject() {
            const data: {
                description?: ReturnType<typeof IndexBuildDescription.prototype.toObject>;
                state?: IndexBuildState.State;
                progress?: number;
            } = {};
            if (this.description != null) {
                data.description = this.description.toObject();
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.progress != null) {
                data.progress = this.progress;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_description)
                writer.writeMessage(1, this.description, () => this.description.serialize(writer));
            if (this.state != IndexBuildState.State.STATE_UNSPECIFIED)
                writer.writeEnum(2, this.state);
            if (this.progress != 0)
                writer.writeFloat(3, this.progress);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexBuildMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexBuildMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.description, () => message.description = IndexBuildDescription.deserialize(reader));
                        break;
                    case 2:
                        message.state = reader.readEnum();
                        break;
                    case 3:
                        message.progress = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexBuildMetadata {
            return IndexBuildMetadata.deserialize(bytes);
        }
    }
    export class ChangefeedMode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ChangefeedMode {
            const message = new ChangefeedMode({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangefeedMode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangefeedMode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangefeedMode {
            return ChangefeedMode.deserialize(bytes);
        }
    }
    export namespace ChangefeedMode {
        export enum Mode {
            MODE_UNSPECIFIED = 0,
            MODE_KEYS_ONLY = 1,
            MODE_UPDATES = 2,
            MODE_NEW_IMAGE = 3,
            MODE_OLD_IMAGE = 4,
            MODE_NEW_AND_OLD_IMAGES = 5
        }
    }
    export class ChangefeedFormat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ChangefeedFormat {
            const message = new ChangefeedFormat({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangefeedFormat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangefeedFormat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangefeedFormat {
            return ChangefeedFormat.deserialize(bytes);
        }
    }
    export namespace ChangefeedFormat {
        export enum Format {
            FORMAT_UNSPECIFIED = 0,
            FORMAT_JSON = 1
        }
    }
    export class Changefeed extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            mode?: ChangefeedMode.Mode;
            format?: ChangefeedFormat.Format;
            retention_period?: dependency_11.google.protobuf.Duration;
            virtual_timestamps?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("retention_period" in data && data.retention_period != undefined) {
                    this.retention_period = data.retention_period;
                }
                if ("virtual_timestamps" in data && data.virtual_timestamps != undefined) {
                    this.virtual_timestamps = data.virtual_timestamps;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 2, ChangefeedMode.Mode.MODE_UNSPECIFIED) as ChangefeedMode.Mode;
        }
        set mode(value: ChangefeedMode.Mode) {
            pb_1.Message.setField(this, 2, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 3, ChangefeedFormat.Format.FORMAT_UNSPECIFIED) as ChangefeedFormat.Format;
        }
        set format(value: ChangefeedFormat.Format) {
            pb_1.Message.setField(this, 3, value);
        }
        get retention_period() {
            return pb_1.Message.getWrapperField(this, dependency_11.google.protobuf.Duration, 4) as dependency_11.google.protobuf.Duration;
        }
        set retention_period(value: dependency_11.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_retention_period() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get virtual_timestamps() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set virtual_timestamps(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            mode?: ChangefeedMode.Mode;
            format?: ChangefeedFormat.Format;
            retention_period?: ReturnType<typeof dependency_11.google.protobuf.Duration.prototype.toObject>;
            virtual_timestamps?: boolean;
        }): Changefeed {
            const message = new Changefeed({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.retention_period != null) {
                message.retention_period = dependency_11.google.protobuf.Duration.fromObject(data.retention_period);
            }
            if (data.virtual_timestamps != null) {
                message.virtual_timestamps = data.virtual_timestamps;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                mode?: ChangefeedMode.Mode;
                format?: ChangefeedFormat.Format;
                retention_period?: ReturnType<typeof dependency_11.google.protobuf.Duration.prototype.toObject>;
                virtual_timestamps?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.retention_period != null) {
                data.retention_period = this.retention_period.toObject();
            }
            if (this.virtual_timestamps != null) {
                data.virtual_timestamps = this.virtual_timestamps;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.mode != ChangefeedMode.Mode.MODE_UNSPECIFIED)
                writer.writeEnum(2, this.mode);
            if (this.format != ChangefeedFormat.Format.FORMAT_UNSPECIFIED)
                writer.writeEnum(3, this.format);
            if (this.has_retention_period)
                writer.writeMessage(4, this.retention_period, () => this.retention_period.serialize(writer));
            if (this.virtual_timestamps != false)
                writer.writeBool(5, this.virtual_timestamps);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Changefeed {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Changefeed();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.mode = reader.readEnum();
                        break;
                    case 3:
                        message.format = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.retention_period, () => message.retention_period = dependency_11.google.protobuf.Duration.deserialize(reader));
                        break;
                    case 5:
                        message.virtual_timestamps = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Changefeed {
            return Changefeed.deserialize(bytes);
        }
    }
    export class ChangefeedDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            mode?: ChangefeedMode.Mode;
            format?: ChangefeedFormat.Format;
            state?: ChangefeedDescription.State;
            virtual_timestamps?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("virtual_timestamps" in data && data.virtual_timestamps != undefined) {
                    this.virtual_timestamps = data.virtual_timestamps;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 2, ChangefeedMode.Mode.MODE_UNSPECIFIED) as ChangefeedMode.Mode;
        }
        set mode(value: ChangefeedMode.Mode) {
            pb_1.Message.setField(this, 2, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 3, ChangefeedFormat.Format.FORMAT_UNSPECIFIED) as ChangefeedFormat.Format;
        }
        set format(value: ChangefeedFormat.Format) {
            pb_1.Message.setField(this, 3, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 4, ChangefeedDescription.State.STATE_UNSPECIFIED) as ChangefeedDescription.State;
        }
        set state(value: ChangefeedDescription.State) {
            pb_1.Message.setField(this, 4, value);
        }
        get virtual_timestamps() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set virtual_timestamps(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            mode?: ChangefeedMode.Mode;
            format?: ChangefeedFormat.Format;
            state?: ChangefeedDescription.State;
            virtual_timestamps?: boolean;
        }): ChangefeedDescription {
            const message = new ChangefeedDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.virtual_timestamps != null) {
                message.virtual_timestamps = data.virtual_timestamps;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                mode?: ChangefeedMode.Mode;
                format?: ChangefeedFormat.Format;
                state?: ChangefeedDescription.State;
                virtual_timestamps?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.virtual_timestamps != null) {
                data.virtual_timestamps = this.virtual_timestamps;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.mode != ChangefeedMode.Mode.MODE_UNSPECIFIED)
                writer.writeEnum(2, this.mode);
            if (this.format != ChangefeedFormat.Format.FORMAT_UNSPECIFIED)
                writer.writeEnum(3, this.format);
            if (this.state != ChangefeedDescription.State.STATE_UNSPECIFIED)
                writer.writeEnum(4, this.state);
            if (this.virtual_timestamps != false)
                writer.writeBool(5, this.virtual_timestamps);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangefeedDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangefeedDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.mode = reader.readEnum();
                        break;
                    case 3:
                        message.format = reader.readEnum();
                        break;
                    case 4:
                        message.state = reader.readEnum();
                        break;
                    case 5:
                        message.virtual_timestamps = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangefeedDescription {
            return ChangefeedDescription.deserialize(bytes);
        }
    }
    export namespace ChangefeedDescription {
        export enum State {
            STATE_UNSPECIFIED = 0,
            STATE_ENABLED = 1,
            STATE_DISABLED = 2
        }
    }
    export class StoragePool extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            media?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("media" in data && data.media != undefined) {
                    this.media = data.media;
                }
            }
        }
        get media() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set media(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            media?: string;
        }): StoragePool {
            const message = new StoragePool({});
            if (data.media != null) {
                message.media = data.media;
            }
            return message;
        }
        toObject() {
            const data: {
                media?: string;
            } = {};
            if (this.media != null) {
                data.media = this.media;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.media.length)
                writer.writeString(1, this.media);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoragePool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoragePool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.media = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoragePool {
            return StoragePool.deserialize(bytes);
        }
    }
    export class StoragePolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preset_name?: string;
            syslog?: StoragePool;
            log?: StoragePool;
            data?: StoragePool;
            external?: StoragePool;
            keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
            column_families?: ColumnFamilyPolicy[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preset_name" in data && data.preset_name != undefined) {
                    this.preset_name = data.preset_name;
                }
                if ("syslog" in data && data.syslog != undefined) {
                    this.syslog = data.syslog;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("external" in data && data.external != undefined) {
                    this.external = data.external;
                }
                if ("keep_in_memory" in data && data.keep_in_memory != undefined) {
                    this.keep_in_memory = data.keep_in_memory;
                }
                if ("column_families" in data && data.column_families != undefined) {
                    this.column_families = data.column_families;
                }
            }
        }
        get preset_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set preset_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get syslog() {
            return pb_1.Message.getWrapperField(this, StoragePool, 2) as StoragePool;
        }
        set syslog(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_syslog() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get log() {
            return pb_1.Message.getWrapperField(this, StoragePool, 3) as StoragePool;
        }
        set log(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_log() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, StoragePool, 4) as StoragePool;
        }
        set data(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get external() {
            return pb_1.Message.getWrapperField(this, StoragePool, 5) as StoragePool;
        }
        set external(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_external() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get keep_in_memory() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set keep_in_memory(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 6, value);
        }
        get column_families() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnFamilyPolicy, 7) as ColumnFamilyPolicy[];
        }
        set column_families(value: ColumnFamilyPolicy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            preset_name?: string;
            syslog?: ReturnType<typeof StoragePool.prototype.toObject>;
            log?: ReturnType<typeof StoragePool.prototype.toObject>;
            data?: ReturnType<typeof StoragePool.prototype.toObject>;
            external?: ReturnType<typeof StoragePool.prototype.toObject>;
            keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
            column_families?: ReturnType<typeof ColumnFamilyPolicy.prototype.toObject>[];
        }): StoragePolicy {
            const message = new StoragePolicy({});
            if (data.preset_name != null) {
                message.preset_name = data.preset_name;
            }
            if (data.syslog != null) {
                message.syslog = StoragePool.fromObject(data.syslog);
            }
            if (data.log != null) {
                message.log = StoragePool.fromObject(data.log);
            }
            if (data.data != null) {
                message.data = StoragePool.fromObject(data.data);
            }
            if (data.external != null) {
                message.external = StoragePool.fromObject(data.external);
            }
            if (data.keep_in_memory != null) {
                message.keep_in_memory = data.keep_in_memory;
            }
            if (data.column_families != null) {
                message.column_families = data.column_families.map(item => ColumnFamilyPolicy.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                preset_name?: string;
                syslog?: ReturnType<typeof StoragePool.prototype.toObject>;
                log?: ReturnType<typeof StoragePool.prototype.toObject>;
                data?: ReturnType<typeof StoragePool.prototype.toObject>;
                external?: ReturnType<typeof StoragePool.prototype.toObject>;
                keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
                column_families?: ReturnType<typeof ColumnFamilyPolicy.prototype.toObject>[];
            } = {};
            if (this.preset_name != null) {
                data.preset_name = this.preset_name;
            }
            if (this.syslog != null) {
                data.syslog = this.syslog.toObject();
            }
            if (this.log != null) {
                data.log = this.log.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.external != null) {
                data.external = this.external.toObject();
            }
            if (this.keep_in_memory != null) {
                data.keep_in_memory = this.keep_in_memory;
            }
            if (this.column_families != null) {
                data.column_families = this.column_families.map((item: ColumnFamilyPolicy) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preset_name.length)
                writer.writeString(1, this.preset_name);
            if (this.has_syslog)
                writer.writeMessage(2, this.syslog, () => this.syslog.serialize(writer));
            if (this.has_log)
                writer.writeMessage(3, this.log, () => this.log.serialize(writer));
            if (this.has_data)
                writer.writeMessage(4, this.data, () => this.data.serialize(writer));
            if (this.has_external)
                writer.writeMessage(5, this.external, () => this.external.serialize(writer));
            if (this.keep_in_memory != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(6, this.keep_in_memory);
            if (this.column_families.length)
                writer.writeRepeatedMessage(7, this.column_families, (item: ColumnFamilyPolicy) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoragePolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoragePolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preset_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.syslog, () => message.syslog = StoragePool.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.log, () => message.log = StoragePool.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = StoragePool.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.external, () => message.external = StoragePool.deserialize(reader));
                        break;
                    case 6:
                        message.keep_in_memory = reader.readEnum();
                        break;
                    case 7:
                        reader.readMessage(message.column_families, () => pb_1.Message.addToRepeatedWrapperField(message, 7, ColumnFamilyPolicy.deserialize(reader), ColumnFamilyPolicy));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoragePolicy {
            return StoragePolicy.deserialize(bytes);
        }
    }
    export class ColumnFamilyPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            data?: StoragePool;
            external?: StoragePool;
            keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
            compression?: ColumnFamilyPolicy.Compression;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("external" in data && data.external != undefined) {
                    this.external = data.external;
                }
                if ("keep_in_memory" in data && data.keep_in_memory != undefined) {
                    this.keep_in_memory = data.keep_in_memory;
                }
                if ("compression" in data && data.compression != undefined) {
                    this.compression = data.compression;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, StoragePool, 2) as StoragePool;
        }
        set data(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get external() {
            return pb_1.Message.getWrapperField(this, StoragePool, 3) as StoragePool;
        }
        set external(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_external() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get keep_in_memory() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set keep_in_memory(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 4, value);
        }
        get compression() {
            return pb_1.Message.getFieldWithDefault(this, 5, ColumnFamilyPolicy.Compression.COMPRESSION_UNSPECIFIED) as ColumnFamilyPolicy.Compression;
        }
        set compression(value: ColumnFamilyPolicy.Compression) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            data?: ReturnType<typeof StoragePool.prototype.toObject>;
            external?: ReturnType<typeof StoragePool.prototype.toObject>;
            keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
            compression?: ColumnFamilyPolicy.Compression;
        }): ColumnFamilyPolicy {
            const message = new ColumnFamilyPolicy({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.data != null) {
                message.data = StoragePool.fromObject(data.data);
            }
            if (data.external != null) {
                message.external = StoragePool.fromObject(data.external);
            }
            if (data.keep_in_memory != null) {
                message.keep_in_memory = data.keep_in_memory;
            }
            if (data.compression != null) {
                message.compression = data.compression;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                data?: ReturnType<typeof StoragePool.prototype.toObject>;
                external?: ReturnType<typeof StoragePool.prototype.toObject>;
                keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
                compression?: ColumnFamilyPolicy.Compression;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.external != null) {
                data.external = this.external.toObject();
            }
            if (this.keep_in_memory != null) {
                data.keep_in_memory = this.keep_in_memory;
            }
            if (this.compression != null) {
                data.compression = this.compression;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (this.has_external)
                writer.writeMessage(3, this.external, () => this.external.serialize(writer));
            if (this.keep_in_memory != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(4, this.keep_in_memory);
            if (this.compression != ColumnFamilyPolicy.Compression.COMPRESSION_UNSPECIFIED)
                writer.writeEnum(5, this.compression);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColumnFamilyPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColumnFamilyPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = StoragePool.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.external, () => message.external = StoragePool.deserialize(reader));
                        break;
                    case 4:
                        message.keep_in_memory = reader.readEnum();
                        break;
                    case 5:
                        message.compression = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ColumnFamilyPolicy {
            return ColumnFamilyPolicy.deserialize(bytes);
        }
    }
    export namespace ColumnFamilyPolicy {
        export enum Compression {
            COMPRESSION_UNSPECIFIED = 0,
            UNCOMPRESSED = 1,
            COMPRESSED = 2
        }
    }
    export class CompactionPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preset_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preset_name" in data && data.preset_name != undefined) {
                    this.preset_name = data.preset_name;
                }
            }
        }
        get preset_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set preset_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            preset_name?: string;
        }): CompactionPolicy {
            const message = new CompactionPolicy({});
            if (data.preset_name != null) {
                message.preset_name = data.preset_name;
            }
            return message;
        }
        toObject() {
            const data: {
                preset_name?: string;
            } = {};
            if (this.preset_name != null) {
                data.preset_name = this.preset_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preset_name.length)
                writer.writeString(1, this.preset_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompactionPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompactionPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preset_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompactionPolicy {
            return CompactionPolicy.deserialize(bytes);
        }
    }
    export class ExplicitPartitions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            split_points?: dependency_6.Ydb.TypedValue[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("split_points" in data && data.split_points != undefined) {
                    this.split_points = data.split_points;
                }
            }
        }
        get split_points() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.Ydb.TypedValue, 1) as dependency_6.Ydb.TypedValue[];
        }
        set split_points(value: dependency_6.Ydb.TypedValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            split_points?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>[];
        }): ExplicitPartitions {
            const message = new ExplicitPartitions({});
            if (data.split_points != null) {
                message.split_points = data.split_points.map(item => dependency_6.Ydb.TypedValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                split_points?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>[];
            } = {};
            if (this.split_points != null) {
                data.split_points = this.split_points.map((item: dependency_6.Ydb.TypedValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.split_points.length)
                writer.writeRepeatedMessage(1, this.split_points, (item: dependency_6.Ydb.TypedValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExplicitPartitions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExplicitPartitions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.split_points, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_6.Ydb.TypedValue.deserialize(reader), dependency_6.Ydb.TypedValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExplicitPartitions {
            return ExplicitPartitions.deserialize(bytes);
        }
    }
    export class PartitionStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rows_estimate?: number;
            store_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rows_estimate" in data && data.rows_estimate != undefined) {
                    this.rows_estimate = data.rows_estimate;
                }
                if ("store_size" in data && data.store_size != undefined) {
                    this.store_size = data.store_size;
                }
            }
        }
        get rows_estimate() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set rows_estimate(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get store_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set store_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            rows_estimate?: number;
            store_size?: number;
        }): PartitionStats {
            const message = new PartitionStats({});
            if (data.rows_estimate != null) {
                message.rows_estimate = data.rows_estimate;
            }
            if (data.store_size != null) {
                message.store_size = data.store_size;
            }
            return message;
        }
        toObject() {
            const data: {
                rows_estimate?: number;
                store_size?: number;
            } = {};
            if (this.rows_estimate != null) {
                data.rows_estimate = this.rows_estimate;
            }
            if (this.store_size != null) {
                data.store_size = this.store_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rows_estimate != 0)
                writer.writeUint64(1, this.rows_estimate);
            if (this.store_size != 0)
                writer.writeUint64(2, this.store_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitionStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitionStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rows_estimate = reader.readUint64();
                        break;
                    case 2:
                        message.store_size = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PartitionStats {
            return PartitionStats.deserialize(bytes);
        }
    }
    export class TableStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            partition_stats?: PartitionStats[];
            rows_estimate?: number;
            store_size?: number;
            partitions?: number;
            creation_time?: dependency_12.google.protobuf.Timestamp;
            modification_time?: dependency_12.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("partition_stats" in data && data.partition_stats != undefined) {
                    this.partition_stats = data.partition_stats;
                }
                if ("rows_estimate" in data && data.rows_estimate != undefined) {
                    this.rows_estimate = data.rows_estimate;
                }
                if ("store_size" in data && data.store_size != undefined) {
                    this.store_size = data.store_size;
                }
                if ("partitions" in data && data.partitions != undefined) {
                    this.partitions = data.partitions;
                }
                if ("creation_time" in data && data.creation_time != undefined) {
                    this.creation_time = data.creation_time;
                }
                if ("modification_time" in data && data.modification_time != undefined) {
                    this.modification_time = data.modification_time;
                }
            }
        }
        get partition_stats() {
            return pb_1.Message.getRepeatedWrapperField(this, PartitionStats, 1) as PartitionStats[];
        }
        set partition_stats(value: PartitionStats[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get rows_estimate() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set rows_estimate(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get store_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set store_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get partitions() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set partitions(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get creation_time() {
            return pb_1.Message.getWrapperField(this, dependency_12.google.protobuf.Timestamp, 5) as dependency_12.google.protobuf.Timestamp;
        }
        set creation_time(value: dependency_12.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_creation_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get modification_time() {
            return pb_1.Message.getWrapperField(this, dependency_12.google.protobuf.Timestamp, 6) as dependency_12.google.protobuf.Timestamp;
        }
        set modification_time(value: dependency_12.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_modification_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            partition_stats?: ReturnType<typeof PartitionStats.prototype.toObject>[];
            rows_estimate?: number;
            store_size?: number;
            partitions?: number;
            creation_time?: ReturnType<typeof dependency_12.google.protobuf.Timestamp.prototype.toObject>;
            modification_time?: ReturnType<typeof dependency_12.google.protobuf.Timestamp.prototype.toObject>;
        }): TableStats {
            const message = new TableStats({});
            if (data.partition_stats != null) {
                message.partition_stats = data.partition_stats.map(item => PartitionStats.fromObject(item));
            }
            if (data.rows_estimate != null) {
                message.rows_estimate = data.rows_estimate;
            }
            if (data.store_size != null) {
                message.store_size = data.store_size;
            }
            if (data.partitions != null) {
                message.partitions = data.partitions;
            }
            if (data.creation_time != null) {
                message.creation_time = dependency_12.google.protobuf.Timestamp.fromObject(data.creation_time);
            }
            if (data.modification_time != null) {
                message.modification_time = dependency_12.google.protobuf.Timestamp.fromObject(data.modification_time);
            }
            return message;
        }
        toObject() {
            const data: {
                partition_stats?: ReturnType<typeof PartitionStats.prototype.toObject>[];
                rows_estimate?: number;
                store_size?: number;
                partitions?: number;
                creation_time?: ReturnType<typeof dependency_12.google.protobuf.Timestamp.prototype.toObject>;
                modification_time?: ReturnType<typeof dependency_12.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.partition_stats != null) {
                data.partition_stats = this.partition_stats.map((item: PartitionStats) => item.toObject());
            }
            if (this.rows_estimate != null) {
                data.rows_estimate = this.rows_estimate;
            }
            if (this.store_size != null) {
                data.store_size = this.store_size;
            }
            if (this.partitions != null) {
                data.partitions = this.partitions;
            }
            if (this.creation_time != null) {
                data.creation_time = this.creation_time.toObject();
            }
            if (this.modification_time != null) {
                data.modification_time = this.modification_time.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.partition_stats.length)
                writer.writeRepeatedMessage(1, this.partition_stats, (item: PartitionStats) => item.serialize(writer));
            if (this.rows_estimate != 0)
                writer.writeUint64(2, this.rows_estimate);
            if (this.store_size != 0)
                writer.writeUint64(3, this.store_size);
            if (this.partitions != 0)
                writer.writeUint64(4, this.partitions);
            if (this.has_creation_time)
                writer.writeMessage(5, this.creation_time, () => this.creation_time.serialize(writer));
            if (this.has_modification_time)
                writer.writeMessage(6, this.modification_time, () => this.modification_time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.partition_stats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PartitionStats.deserialize(reader), PartitionStats));
                        break;
                    case 2:
                        message.rows_estimate = reader.readUint64();
                        break;
                    case 3:
                        message.store_size = reader.readUint64();
                        break;
                    case 4:
                        message.partitions = reader.readUint64();
                        break;
                    case 5:
                        reader.readMessage(message.creation_time, () => message.creation_time = dependency_12.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.modification_time, () => message.modification_time = dependency_12.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableStats {
            return TableStats.deserialize(bytes);
        }
    }
    export class PartitioningPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4]];
        constructor(data?: any[] | ({
            preset_name?: string;
            auto_partitioning?: PartitioningPolicy.AutoPartitioningPolicy;
        } & (({
            uniform_partitions?: number;
            explicit_partitions?: never;
        } | {
            uniform_partitions?: never;
            explicit_partitions?: ExplicitPartitions;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preset_name" in data && data.preset_name != undefined) {
                    this.preset_name = data.preset_name;
                }
                if ("auto_partitioning" in data && data.auto_partitioning != undefined) {
                    this.auto_partitioning = data.auto_partitioning;
                }
                if ("uniform_partitions" in data && data.uniform_partitions != undefined) {
                    this.uniform_partitions = data.uniform_partitions;
                }
                if ("explicit_partitions" in data && data.explicit_partitions != undefined) {
                    this.explicit_partitions = data.explicit_partitions;
                }
            }
        }
        get preset_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set preset_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get auto_partitioning() {
            return pb_1.Message.getFieldWithDefault(this, 2, PartitioningPolicy.AutoPartitioningPolicy.AUTO_PARTITIONING_POLICY_UNSPECIFIED) as PartitioningPolicy.AutoPartitioningPolicy;
        }
        set auto_partitioning(value: PartitioningPolicy.AutoPartitioningPolicy) {
            pb_1.Message.setField(this, 2, value);
        }
        get uniform_partitions() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set uniform_partitions(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_uniform_partitions() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get explicit_partitions() {
            return pb_1.Message.getWrapperField(this, ExplicitPartitions, 4) as ExplicitPartitions;
        }
        set explicit_partitions(value: ExplicitPartitions) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_explicit_partitions() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get partitions() {
            const cases: {
                [index: number]: "none" | "uniform_partitions" | "explicit_partitions";
            } = {
                0: "none",
                3: "uniform_partitions",
                4: "explicit_partitions"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            preset_name?: string;
            auto_partitioning?: PartitioningPolicy.AutoPartitioningPolicy;
            uniform_partitions?: number;
            explicit_partitions?: ReturnType<typeof ExplicitPartitions.prototype.toObject>;
        }): PartitioningPolicy {
            const message = new PartitioningPolicy({});
            if (data.preset_name != null) {
                message.preset_name = data.preset_name;
            }
            if (data.auto_partitioning != null) {
                message.auto_partitioning = data.auto_partitioning;
            }
            if (data.uniform_partitions != null) {
                message.uniform_partitions = data.uniform_partitions;
            }
            if (data.explicit_partitions != null) {
                message.explicit_partitions = ExplicitPartitions.fromObject(data.explicit_partitions);
            }
            return message;
        }
        toObject() {
            const data: {
                preset_name?: string;
                auto_partitioning?: PartitioningPolicy.AutoPartitioningPolicy;
                uniform_partitions?: number;
                explicit_partitions?: ReturnType<typeof ExplicitPartitions.prototype.toObject>;
            } = {};
            if (this.preset_name != null) {
                data.preset_name = this.preset_name;
            }
            if (this.auto_partitioning != null) {
                data.auto_partitioning = this.auto_partitioning;
            }
            if (this.uniform_partitions != null) {
                data.uniform_partitions = this.uniform_partitions;
            }
            if (this.explicit_partitions != null) {
                data.explicit_partitions = this.explicit_partitions.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preset_name.length)
                writer.writeString(1, this.preset_name);
            if (this.auto_partitioning != PartitioningPolicy.AutoPartitioningPolicy.AUTO_PARTITIONING_POLICY_UNSPECIFIED)
                writer.writeEnum(2, this.auto_partitioning);
            if (this.has_uniform_partitions)
                writer.writeUint64(3, this.uniform_partitions);
            if (this.has_explicit_partitions)
                writer.writeMessage(4, this.explicit_partitions, () => this.explicit_partitions.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitioningPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitioningPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preset_name = reader.readString();
                        break;
                    case 2:
                        message.auto_partitioning = reader.readEnum();
                        break;
                    case 3:
                        message.uniform_partitions = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.explicit_partitions, () => message.explicit_partitions = ExplicitPartitions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PartitioningPolicy {
            return PartitioningPolicy.deserialize(bytes);
        }
    }
    export namespace PartitioningPolicy {
        export enum AutoPartitioningPolicy {
            AUTO_PARTITIONING_POLICY_UNSPECIFIED = 0,
            DISABLED = 1,
            AUTO_SPLIT = 2,
            AUTO_SPLIT_MERGE = 3
        }
    }
    export class ExecutionPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preset_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preset_name" in data && data.preset_name != undefined) {
                    this.preset_name = data.preset_name;
                }
            }
        }
        get preset_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set preset_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            preset_name?: string;
        }): ExecutionPolicy {
            const message = new ExecutionPolicy({});
            if (data.preset_name != null) {
                message.preset_name = data.preset_name;
            }
            return message;
        }
        toObject() {
            const data: {
                preset_name?: string;
            } = {};
            if (this.preset_name != null) {
                data.preset_name = this.preset_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preset_name.length)
                writer.writeString(1, this.preset_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecutionPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecutionPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preset_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecutionPolicy {
            return ExecutionPolicy.deserialize(bytes);
        }
    }
    export class ReplicationPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preset_name?: string;
            replicas_count?: number;
            create_per_availability_zone?: dependency_2.Ydb.FeatureFlag.Status;
            allow_promotion?: dependency_2.Ydb.FeatureFlag.Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preset_name" in data && data.preset_name != undefined) {
                    this.preset_name = data.preset_name;
                }
                if ("replicas_count" in data && data.replicas_count != undefined) {
                    this.replicas_count = data.replicas_count;
                }
                if ("create_per_availability_zone" in data && data.create_per_availability_zone != undefined) {
                    this.create_per_availability_zone = data.create_per_availability_zone;
                }
                if ("allow_promotion" in data && data.allow_promotion != undefined) {
                    this.allow_promotion = data.allow_promotion;
                }
            }
        }
        get preset_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set preset_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get replicas_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set replicas_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get create_per_availability_zone() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set create_per_availability_zone(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 3, value);
        }
        get allow_promotion() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set allow_promotion(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            preset_name?: string;
            replicas_count?: number;
            create_per_availability_zone?: dependency_2.Ydb.FeatureFlag.Status;
            allow_promotion?: dependency_2.Ydb.FeatureFlag.Status;
        }): ReplicationPolicy {
            const message = new ReplicationPolicy({});
            if (data.preset_name != null) {
                message.preset_name = data.preset_name;
            }
            if (data.replicas_count != null) {
                message.replicas_count = data.replicas_count;
            }
            if (data.create_per_availability_zone != null) {
                message.create_per_availability_zone = data.create_per_availability_zone;
            }
            if (data.allow_promotion != null) {
                message.allow_promotion = data.allow_promotion;
            }
            return message;
        }
        toObject() {
            const data: {
                preset_name?: string;
                replicas_count?: number;
                create_per_availability_zone?: dependency_2.Ydb.FeatureFlag.Status;
                allow_promotion?: dependency_2.Ydb.FeatureFlag.Status;
            } = {};
            if (this.preset_name != null) {
                data.preset_name = this.preset_name;
            }
            if (this.replicas_count != null) {
                data.replicas_count = this.replicas_count;
            }
            if (this.create_per_availability_zone != null) {
                data.create_per_availability_zone = this.create_per_availability_zone;
            }
            if (this.allow_promotion != null) {
                data.allow_promotion = this.allow_promotion;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preset_name.length)
                writer.writeString(1, this.preset_name);
            if (this.replicas_count != 0)
                writer.writeUint32(2, this.replicas_count);
            if (this.create_per_availability_zone != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(3, this.create_per_availability_zone);
            if (this.allow_promotion != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(4, this.allow_promotion);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplicationPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplicationPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preset_name = reader.readString();
                        break;
                    case 2:
                        message.replicas_count = reader.readUint32();
                        break;
                    case 3:
                        message.create_per_availability_zone = reader.readEnum();
                        break;
                    case 4:
                        message.allow_promotion = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplicationPolicy {
            return ReplicationPolicy.deserialize(bytes);
        }
    }
    export class CachingPolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preset_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preset_name" in data && data.preset_name != undefined) {
                    this.preset_name = data.preset_name;
                }
            }
        }
        get preset_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set preset_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            preset_name?: string;
        }): CachingPolicy {
            const message = new CachingPolicy({});
            if (data.preset_name != null) {
                message.preset_name = data.preset_name;
            }
            return message;
        }
        toObject() {
            const data: {
                preset_name?: string;
            } = {};
            if (this.preset_name != null) {
                data.preset_name = this.preset_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preset_name.length)
                writer.writeString(1, this.preset_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CachingPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CachingPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preset_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CachingPolicy {
            return CachingPolicy.deserialize(bytes);
        }
    }
    export class TableProfile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preset_name?: string;
            storage_policy?: StoragePolicy;
            compaction_policy?: CompactionPolicy;
            partitioning_policy?: PartitioningPolicy;
            execution_policy?: ExecutionPolicy;
            replication_policy?: ReplicationPolicy;
            caching_policy?: CachingPolicy;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preset_name" in data && data.preset_name != undefined) {
                    this.preset_name = data.preset_name;
                }
                if ("storage_policy" in data && data.storage_policy != undefined) {
                    this.storage_policy = data.storage_policy;
                }
                if ("compaction_policy" in data && data.compaction_policy != undefined) {
                    this.compaction_policy = data.compaction_policy;
                }
                if ("partitioning_policy" in data && data.partitioning_policy != undefined) {
                    this.partitioning_policy = data.partitioning_policy;
                }
                if ("execution_policy" in data && data.execution_policy != undefined) {
                    this.execution_policy = data.execution_policy;
                }
                if ("replication_policy" in data && data.replication_policy != undefined) {
                    this.replication_policy = data.replication_policy;
                }
                if ("caching_policy" in data && data.caching_policy != undefined) {
                    this.caching_policy = data.caching_policy;
                }
            }
        }
        get preset_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set preset_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get storage_policy() {
            return pb_1.Message.getWrapperField(this, StoragePolicy, 2) as StoragePolicy;
        }
        set storage_policy(value: StoragePolicy) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_storage_policy() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get compaction_policy() {
            return pb_1.Message.getWrapperField(this, CompactionPolicy, 3) as CompactionPolicy;
        }
        set compaction_policy(value: CompactionPolicy) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_compaction_policy() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get partitioning_policy() {
            return pb_1.Message.getWrapperField(this, PartitioningPolicy, 4) as PartitioningPolicy;
        }
        set partitioning_policy(value: PartitioningPolicy) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_partitioning_policy() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get execution_policy() {
            return pb_1.Message.getWrapperField(this, ExecutionPolicy, 5) as ExecutionPolicy;
        }
        set execution_policy(value: ExecutionPolicy) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_execution_policy() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get replication_policy() {
            return pb_1.Message.getWrapperField(this, ReplicationPolicy, 6) as ReplicationPolicy;
        }
        set replication_policy(value: ReplicationPolicy) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_replication_policy() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get caching_policy() {
            return pb_1.Message.getWrapperField(this, CachingPolicy, 7) as CachingPolicy;
        }
        set caching_policy(value: CachingPolicy) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_caching_policy() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            preset_name?: string;
            storage_policy?: ReturnType<typeof StoragePolicy.prototype.toObject>;
            compaction_policy?: ReturnType<typeof CompactionPolicy.prototype.toObject>;
            partitioning_policy?: ReturnType<typeof PartitioningPolicy.prototype.toObject>;
            execution_policy?: ReturnType<typeof ExecutionPolicy.prototype.toObject>;
            replication_policy?: ReturnType<typeof ReplicationPolicy.prototype.toObject>;
            caching_policy?: ReturnType<typeof CachingPolicy.prototype.toObject>;
        }): TableProfile {
            const message = new TableProfile({});
            if (data.preset_name != null) {
                message.preset_name = data.preset_name;
            }
            if (data.storage_policy != null) {
                message.storage_policy = StoragePolicy.fromObject(data.storage_policy);
            }
            if (data.compaction_policy != null) {
                message.compaction_policy = CompactionPolicy.fromObject(data.compaction_policy);
            }
            if (data.partitioning_policy != null) {
                message.partitioning_policy = PartitioningPolicy.fromObject(data.partitioning_policy);
            }
            if (data.execution_policy != null) {
                message.execution_policy = ExecutionPolicy.fromObject(data.execution_policy);
            }
            if (data.replication_policy != null) {
                message.replication_policy = ReplicationPolicy.fromObject(data.replication_policy);
            }
            if (data.caching_policy != null) {
                message.caching_policy = CachingPolicy.fromObject(data.caching_policy);
            }
            return message;
        }
        toObject() {
            const data: {
                preset_name?: string;
                storage_policy?: ReturnType<typeof StoragePolicy.prototype.toObject>;
                compaction_policy?: ReturnType<typeof CompactionPolicy.prototype.toObject>;
                partitioning_policy?: ReturnType<typeof PartitioningPolicy.prototype.toObject>;
                execution_policy?: ReturnType<typeof ExecutionPolicy.prototype.toObject>;
                replication_policy?: ReturnType<typeof ReplicationPolicy.prototype.toObject>;
                caching_policy?: ReturnType<typeof CachingPolicy.prototype.toObject>;
            } = {};
            if (this.preset_name != null) {
                data.preset_name = this.preset_name;
            }
            if (this.storage_policy != null) {
                data.storage_policy = this.storage_policy.toObject();
            }
            if (this.compaction_policy != null) {
                data.compaction_policy = this.compaction_policy.toObject();
            }
            if (this.partitioning_policy != null) {
                data.partitioning_policy = this.partitioning_policy.toObject();
            }
            if (this.execution_policy != null) {
                data.execution_policy = this.execution_policy.toObject();
            }
            if (this.replication_policy != null) {
                data.replication_policy = this.replication_policy.toObject();
            }
            if (this.caching_policy != null) {
                data.caching_policy = this.caching_policy.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preset_name.length)
                writer.writeString(1, this.preset_name);
            if (this.has_storage_policy)
                writer.writeMessage(2, this.storage_policy, () => this.storage_policy.serialize(writer));
            if (this.has_compaction_policy)
                writer.writeMessage(3, this.compaction_policy, () => this.compaction_policy.serialize(writer));
            if (this.has_partitioning_policy)
                writer.writeMessage(4, this.partitioning_policy, () => this.partitioning_policy.serialize(writer));
            if (this.has_execution_policy)
                writer.writeMessage(5, this.execution_policy, () => this.execution_policy.serialize(writer));
            if (this.has_replication_policy)
                writer.writeMessage(6, this.replication_policy, () => this.replication_policy.serialize(writer));
            if (this.has_caching_policy)
                writer.writeMessage(7, this.caching_policy, () => this.caching_policy.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableProfile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableProfile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preset_name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.storage_policy, () => message.storage_policy = StoragePolicy.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.compaction_policy, () => message.compaction_policy = CompactionPolicy.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.partitioning_policy, () => message.partitioning_policy = PartitioningPolicy.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.execution_policy, () => message.execution_policy = ExecutionPolicy.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.replication_policy, () => message.replication_policy = ReplicationPolicy.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.caching_policy, () => message.caching_policy = CachingPolicy.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableProfile {
            return TableProfile.deserialize(bytes);
        }
    }
    export class ColumnMeta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            type?: dependency_6.Ydb.Type;
            family?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("family" in data && data.family != undefined) {
                    this.family = data.family;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getWrapperField(this, dependency_6.Ydb.Type, 2) as dependency_6.Ydb.Type;
        }
        set type(value: dependency_6.Ydb.Type) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get family() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set family(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            type?: ReturnType<typeof dependency_6.Ydb.Type.prototype.toObject>;
            family?: string;
        }): ColumnMeta {
            const message = new ColumnMeta({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type != null) {
                message.type = dependency_6.Ydb.Type.fromObject(data.type);
            }
            if (data.family != null) {
                message.family = data.family;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                type?: ReturnType<typeof dependency_6.Ydb.Type.prototype.toObject>;
                family?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type != null) {
                data.type = this.type.toObject();
            }
            if (this.family != null) {
                data.family = this.family;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_type)
                writer.writeMessage(2, this.type, () => this.type.serialize(writer));
            if (this.family.length)
                writer.writeString(3, this.family);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColumnMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColumnMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.type, () => message.type = dependency_6.Ydb.Type.deserialize(reader));
                        break;
                    case 3:
                        message.family = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ColumnMeta {
            return ColumnMeta.deserialize(bytes);
        }
    }
    export class DateTypeColumnModeSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            column_name?: string;
            expire_after_seconds?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("column_name" in data && data.column_name != undefined) {
                    this.column_name = data.column_name;
                }
                if ("expire_after_seconds" in data && data.expire_after_seconds != undefined) {
                    this.expire_after_seconds = data.expire_after_seconds;
                }
            }
        }
        get column_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set column_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get expire_after_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set expire_after_seconds(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            column_name?: string;
            expire_after_seconds?: number;
        }): DateTypeColumnModeSettings {
            const message = new DateTypeColumnModeSettings({});
            if (data.column_name != null) {
                message.column_name = data.column_name;
            }
            if (data.expire_after_seconds != null) {
                message.expire_after_seconds = data.expire_after_seconds;
            }
            return message;
        }
        toObject() {
            const data: {
                column_name?: string;
                expire_after_seconds?: number;
            } = {};
            if (this.column_name != null) {
                data.column_name = this.column_name;
            }
            if (this.expire_after_seconds != null) {
                data.expire_after_seconds = this.expire_after_seconds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.column_name.length)
                writer.writeString(1, this.column_name);
            if (this.expire_after_seconds != 0)
                writer.writeUint32(2, this.expire_after_seconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DateTypeColumnModeSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DateTypeColumnModeSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.column_name = reader.readString();
                        break;
                    case 2:
                        message.expire_after_seconds = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DateTypeColumnModeSettings {
            return DateTypeColumnModeSettings.deserialize(bytes);
        }
    }
    export class ValueSinceUnixEpochModeSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            column_name?: string;
            column_unit?: ValueSinceUnixEpochModeSettings.Unit;
            expire_after_seconds?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("column_name" in data && data.column_name != undefined) {
                    this.column_name = data.column_name;
                }
                if ("column_unit" in data && data.column_unit != undefined) {
                    this.column_unit = data.column_unit;
                }
                if ("expire_after_seconds" in data && data.expire_after_seconds != undefined) {
                    this.expire_after_seconds = data.expire_after_seconds;
                }
            }
        }
        get column_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set column_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get column_unit() {
            return pb_1.Message.getFieldWithDefault(this, 2, ValueSinceUnixEpochModeSettings.Unit.UNIT_UNSPECIFIED) as ValueSinceUnixEpochModeSettings.Unit;
        }
        set column_unit(value: ValueSinceUnixEpochModeSettings.Unit) {
            pb_1.Message.setField(this, 2, value);
        }
        get expire_after_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set expire_after_seconds(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            column_name?: string;
            column_unit?: ValueSinceUnixEpochModeSettings.Unit;
            expire_after_seconds?: number;
        }): ValueSinceUnixEpochModeSettings {
            const message = new ValueSinceUnixEpochModeSettings({});
            if (data.column_name != null) {
                message.column_name = data.column_name;
            }
            if (data.column_unit != null) {
                message.column_unit = data.column_unit;
            }
            if (data.expire_after_seconds != null) {
                message.expire_after_seconds = data.expire_after_seconds;
            }
            return message;
        }
        toObject() {
            const data: {
                column_name?: string;
                column_unit?: ValueSinceUnixEpochModeSettings.Unit;
                expire_after_seconds?: number;
            } = {};
            if (this.column_name != null) {
                data.column_name = this.column_name;
            }
            if (this.column_unit != null) {
                data.column_unit = this.column_unit;
            }
            if (this.expire_after_seconds != null) {
                data.expire_after_seconds = this.expire_after_seconds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.column_name.length)
                writer.writeString(1, this.column_name);
            if (this.column_unit != ValueSinceUnixEpochModeSettings.Unit.UNIT_UNSPECIFIED)
                writer.writeEnum(2, this.column_unit);
            if (this.expire_after_seconds != 0)
                writer.writeUint32(3, this.expire_after_seconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValueSinceUnixEpochModeSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValueSinceUnixEpochModeSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.column_name = reader.readString();
                        break;
                    case 2:
                        message.column_unit = reader.readEnum();
                        break;
                    case 3:
                        message.expire_after_seconds = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValueSinceUnixEpochModeSettings {
            return ValueSinceUnixEpochModeSettings.deserialize(bytes);
        }
    }
    export namespace ValueSinceUnixEpochModeSettings {
        export enum Unit {
            UNIT_UNSPECIFIED = 0,
            UNIT_SECONDS = 1,
            UNIT_MILLISECONDS = 2,
            UNIT_MICROSECONDS = 3,
            UNIT_NANOSECONDS = 4
        }
    }
    export class TtlSettings extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            run_interval_seconds?: number;
        } & (({
            date_type_column?: DateTypeColumnModeSettings;
            value_since_unix_epoch?: never;
        } | {
            date_type_column?: never;
            value_since_unix_epoch?: ValueSinceUnixEpochModeSettings;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("date_type_column" in data && data.date_type_column != undefined) {
                    this.date_type_column = data.date_type_column;
                }
                if ("value_since_unix_epoch" in data && data.value_since_unix_epoch != undefined) {
                    this.value_since_unix_epoch = data.value_since_unix_epoch;
                }
                if ("run_interval_seconds" in data && data.run_interval_seconds != undefined) {
                    this.run_interval_seconds = data.run_interval_seconds;
                }
            }
        }
        get date_type_column() {
            return pb_1.Message.getWrapperField(this, DateTypeColumnModeSettings, 1) as DateTypeColumnModeSettings;
        }
        set date_type_column(value: DateTypeColumnModeSettings) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_date_type_column() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value_since_unix_epoch() {
            return pb_1.Message.getWrapperField(this, ValueSinceUnixEpochModeSettings, 2) as ValueSinceUnixEpochModeSettings;
        }
        set value_since_unix_epoch(value: ValueSinceUnixEpochModeSettings) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_value_since_unix_epoch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get run_interval_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set run_interval_seconds(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get mode() {
            const cases: {
                [index: number]: "none" | "date_type_column" | "value_since_unix_epoch";
            } = {
                0: "none",
                1: "date_type_column",
                2: "value_since_unix_epoch"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            date_type_column?: ReturnType<typeof DateTypeColumnModeSettings.prototype.toObject>;
            value_since_unix_epoch?: ReturnType<typeof ValueSinceUnixEpochModeSettings.prototype.toObject>;
            run_interval_seconds?: number;
        }): TtlSettings {
            const message = new TtlSettings({});
            if (data.date_type_column != null) {
                message.date_type_column = DateTypeColumnModeSettings.fromObject(data.date_type_column);
            }
            if (data.value_since_unix_epoch != null) {
                message.value_since_unix_epoch = ValueSinceUnixEpochModeSettings.fromObject(data.value_since_unix_epoch);
            }
            if (data.run_interval_seconds != null) {
                message.run_interval_seconds = data.run_interval_seconds;
            }
            return message;
        }
        toObject() {
            const data: {
                date_type_column?: ReturnType<typeof DateTypeColumnModeSettings.prototype.toObject>;
                value_since_unix_epoch?: ReturnType<typeof ValueSinceUnixEpochModeSettings.prototype.toObject>;
                run_interval_seconds?: number;
            } = {};
            if (this.date_type_column != null) {
                data.date_type_column = this.date_type_column.toObject();
            }
            if (this.value_since_unix_epoch != null) {
                data.value_since_unix_epoch = this.value_since_unix_epoch.toObject();
            }
            if (this.run_interval_seconds != null) {
                data.run_interval_seconds = this.run_interval_seconds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_date_type_column)
                writer.writeMessage(1, this.date_type_column, () => this.date_type_column.serialize(writer));
            if (this.has_value_since_unix_epoch)
                writer.writeMessage(2, this.value_since_unix_epoch, () => this.value_since_unix_epoch.serialize(writer));
            if (this.run_interval_seconds != 0)
                writer.writeUint32(3, this.run_interval_seconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TtlSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TtlSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.date_type_column, () => message.date_type_column = DateTypeColumnModeSettings.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.value_since_unix_epoch, () => message.value_since_unix_epoch = ValueSinceUnixEpochModeSettings.deserialize(reader));
                        break;
                    case 3:
                        message.run_interval_seconds = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TtlSettings {
            return TtlSettings.deserialize(bytes);
        }
    }
    export class StorageSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tablet_commit_log0?: StoragePool;
            tablet_commit_log1?: StoragePool;
            external?: StoragePool;
            store_external_blobs?: dependency_2.Ydb.FeatureFlag.Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tablet_commit_log0" in data && data.tablet_commit_log0 != undefined) {
                    this.tablet_commit_log0 = data.tablet_commit_log0;
                }
                if ("tablet_commit_log1" in data && data.tablet_commit_log1 != undefined) {
                    this.tablet_commit_log1 = data.tablet_commit_log1;
                }
                if ("external" in data && data.external != undefined) {
                    this.external = data.external;
                }
                if ("store_external_blobs" in data && data.store_external_blobs != undefined) {
                    this.store_external_blobs = data.store_external_blobs;
                }
            }
        }
        get tablet_commit_log0() {
            return pb_1.Message.getWrapperField(this, StoragePool, 1) as StoragePool;
        }
        set tablet_commit_log0(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tablet_commit_log0() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tablet_commit_log1() {
            return pb_1.Message.getWrapperField(this, StoragePool, 2) as StoragePool;
        }
        set tablet_commit_log1(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_tablet_commit_log1() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get external() {
            return pb_1.Message.getWrapperField(this, StoragePool, 4) as StoragePool;
        }
        set external(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_external() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get store_external_blobs() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set store_external_blobs(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            tablet_commit_log0?: ReturnType<typeof StoragePool.prototype.toObject>;
            tablet_commit_log1?: ReturnType<typeof StoragePool.prototype.toObject>;
            external?: ReturnType<typeof StoragePool.prototype.toObject>;
            store_external_blobs?: dependency_2.Ydb.FeatureFlag.Status;
        }): StorageSettings {
            const message = new StorageSettings({});
            if (data.tablet_commit_log0 != null) {
                message.tablet_commit_log0 = StoragePool.fromObject(data.tablet_commit_log0);
            }
            if (data.tablet_commit_log1 != null) {
                message.tablet_commit_log1 = StoragePool.fromObject(data.tablet_commit_log1);
            }
            if (data.external != null) {
                message.external = StoragePool.fromObject(data.external);
            }
            if (data.store_external_blobs != null) {
                message.store_external_blobs = data.store_external_blobs;
            }
            return message;
        }
        toObject() {
            const data: {
                tablet_commit_log0?: ReturnType<typeof StoragePool.prototype.toObject>;
                tablet_commit_log1?: ReturnType<typeof StoragePool.prototype.toObject>;
                external?: ReturnType<typeof StoragePool.prototype.toObject>;
                store_external_blobs?: dependency_2.Ydb.FeatureFlag.Status;
            } = {};
            if (this.tablet_commit_log0 != null) {
                data.tablet_commit_log0 = this.tablet_commit_log0.toObject();
            }
            if (this.tablet_commit_log1 != null) {
                data.tablet_commit_log1 = this.tablet_commit_log1.toObject();
            }
            if (this.external != null) {
                data.external = this.external.toObject();
            }
            if (this.store_external_blobs != null) {
                data.store_external_blobs = this.store_external_blobs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tablet_commit_log0)
                writer.writeMessage(1, this.tablet_commit_log0, () => this.tablet_commit_log0.serialize(writer));
            if (this.has_tablet_commit_log1)
                writer.writeMessage(2, this.tablet_commit_log1, () => this.tablet_commit_log1.serialize(writer));
            if (this.has_external)
                writer.writeMessage(4, this.external, () => this.external.serialize(writer));
            if (this.store_external_blobs != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(5, this.store_external_blobs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tablet_commit_log0, () => message.tablet_commit_log0 = StoragePool.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.tablet_commit_log1, () => message.tablet_commit_log1 = StoragePool.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.external, () => message.external = StoragePool.deserialize(reader));
                        break;
                    case 5:
                        message.store_external_blobs = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageSettings {
            return StorageSettings.deserialize(bytes);
        }
    }
    export class ColumnFamily extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            data?: StoragePool;
            compression?: ColumnFamily.Compression;
            keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("compression" in data && data.compression != undefined) {
                    this.compression = data.compression;
                }
                if ("keep_in_memory" in data && data.keep_in_memory != undefined) {
                    this.keep_in_memory = data.keep_in_memory;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getWrapperField(this, StoragePool, 2) as StoragePool;
        }
        set data(value: StoragePool) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get compression() {
            return pb_1.Message.getFieldWithDefault(this, 3, ColumnFamily.Compression.COMPRESSION_UNSPECIFIED) as ColumnFamily.Compression;
        }
        set compression(value: ColumnFamily.Compression) {
            pb_1.Message.setField(this, 3, value);
        }
        get keep_in_memory() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set keep_in_memory(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            data?: ReturnType<typeof StoragePool.prototype.toObject>;
            compression?: ColumnFamily.Compression;
            keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
        }): ColumnFamily {
            const message = new ColumnFamily({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.data != null) {
                message.data = StoragePool.fromObject(data.data);
            }
            if (data.compression != null) {
                message.compression = data.compression;
            }
            if (data.keep_in_memory != null) {
                message.keep_in_memory = data.keep_in_memory;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                data?: ReturnType<typeof StoragePool.prototype.toObject>;
                compression?: ColumnFamily.Compression;
                keep_in_memory?: dependency_2.Ydb.FeatureFlag.Status;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.compression != null) {
                data.compression = this.compression;
            }
            if (this.keep_in_memory != null) {
                data.keep_in_memory = this.keep_in_memory;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_data)
                writer.writeMessage(2, this.data, () => this.data.serialize(writer));
            if (this.compression != ColumnFamily.Compression.COMPRESSION_UNSPECIFIED)
                writer.writeEnum(3, this.compression);
            if (this.keep_in_memory != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(4, this.keep_in_memory);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ColumnFamily {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ColumnFamily();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.data, () => message.data = StoragePool.deserialize(reader));
                        break;
                    case 3:
                        message.compression = reader.readEnum();
                        break;
                    case 4:
                        message.keep_in_memory = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ColumnFamily {
            return ColumnFamily.deserialize(bytes);
        }
    }
    export namespace ColumnFamily {
        export enum Compression {
            COMPRESSION_UNSPECIFIED = 0,
            COMPRESSION_NONE = 1,
            COMPRESSION_LZ4 = 2
        }
    }
    export class PartitioningSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            partition_by?: string[];
            partitioning_by_size?: dependency_2.Ydb.FeatureFlag.Status;
            partition_size_mb?: number;
            partitioning_by_load?: dependency_2.Ydb.FeatureFlag.Status;
            min_partitions_count?: number;
            max_partitions_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("partition_by" in data && data.partition_by != undefined) {
                    this.partition_by = data.partition_by;
                }
                if ("partitioning_by_size" in data && data.partitioning_by_size != undefined) {
                    this.partitioning_by_size = data.partitioning_by_size;
                }
                if ("partition_size_mb" in data && data.partition_size_mb != undefined) {
                    this.partition_size_mb = data.partition_size_mb;
                }
                if ("partitioning_by_load" in data && data.partitioning_by_load != undefined) {
                    this.partitioning_by_load = data.partitioning_by_load;
                }
                if ("min_partitions_count" in data && data.min_partitions_count != undefined) {
                    this.min_partitions_count = data.min_partitions_count;
                }
                if ("max_partitions_count" in data && data.max_partitions_count != undefined) {
                    this.max_partitions_count = data.max_partitions_count;
                }
            }
        }
        get partition_by() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set partition_by(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get partitioning_by_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set partitioning_by_size(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 2, value);
        }
        get partition_size_mb() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set partition_size_mb(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get partitioning_by_load() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set partitioning_by_load(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 4, value);
        }
        get min_partitions_count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set min_partitions_count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get max_partitions_count() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set max_partitions_count(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            partition_by?: string[];
            partitioning_by_size?: dependency_2.Ydb.FeatureFlag.Status;
            partition_size_mb?: number;
            partitioning_by_load?: dependency_2.Ydb.FeatureFlag.Status;
            min_partitions_count?: number;
            max_partitions_count?: number;
        }): PartitioningSettings {
            const message = new PartitioningSettings({});
            if (data.partition_by != null) {
                message.partition_by = data.partition_by;
            }
            if (data.partitioning_by_size != null) {
                message.partitioning_by_size = data.partitioning_by_size;
            }
            if (data.partition_size_mb != null) {
                message.partition_size_mb = data.partition_size_mb;
            }
            if (data.partitioning_by_load != null) {
                message.partitioning_by_load = data.partitioning_by_load;
            }
            if (data.min_partitions_count != null) {
                message.min_partitions_count = data.min_partitions_count;
            }
            if (data.max_partitions_count != null) {
                message.max_partitions_count = data.max_partitions_count;
            }
            return message;
        }
        toObject() {
            const data: {
                partition_by?: string[];
                partitioning_by_size?: dependency_2.Ydb.FeatureFlag.Status;
                partition_size_mb?: number;
                partitioning_by_load?: dependency_2.Ydb.FeatureFlag.Status;
                min_partitions_count?: number;
                max_partitions_count?: number;
            } = {};
            if (this.partition_by != null) {
                data.partition_by = this.partition_by;
            }
            if (this.partitioning_by_size != null) {
                data.partitioning_by_size = this.partitioning_by_size;
            }
            if (this.partition_size_mb != null) {
                data.partition_size_mb = this.partition_size_mb;
            }
            if (this.partitioning_by_load != null) {
                data.partitioning_by_load = this.partitioning_by_load;
            }
            if (this.min_partitions_count != null) {
                data.min_partitions_count = this.min_partitions_count;
            }
            if (this.max_partitions_count != null) {
                data.max_partitions_count = this.max_partitions_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.partition_by.length)
                writer.writeRepeatedString(1, this.partition_by);
            if (this.partitioning_by_size != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(2, this.partitioning_by_size);
            if (this.partition_size_mb != 0)
                writer.writeUint64(3, this.partition_size_mb);
            if (this.partitioning_by_load != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(4, this.partitioning_by_load);
            if (this.min_partitions_count != 0)
                writer.writeUint64(6, this.min_partitions_count);
            if (this.max_partitions_count != 0)
                writer.writeUint64(7, this.max_partitions_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitioningSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitioningSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.partitioning_by_size = reader.readEnum();
                        break;
                    case 3:
                        message.partition_size_mb = reader.readUint64();
                        break;
                    case 4:
                        message.partitioning_by_load = reader.readEnum();
                        break;
                    case 6:
                        message.min_partitions_count = reader.readUint64();
                        break;
                    case 7:
                        message.max_partitions_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PartitioningSettings {
            return PartitioningSettings.deserialize(bytes);
        }
    }
    export class AzReadReplicasSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            read_replicas_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("read_replicas_count" in data && data.read_replicas_count != undefined) {
                    this.read_replicas_count = data.read_replicas_count;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get read_replicas_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set read_replicas_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            read_replicas_count?: number;
        }): AzReadReplicasSettings {
            const message = new AzReadReplicasSettings({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.read_replicas_count != null) {
                message.read_replicas_count = data.read_replicas_count;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                read_replicas_count?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.read_replicas_count != null) {
                data.read_replicas_count = this.read_replicas_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.read_replicas_count != 0)
                writer.writeUint64(2, this.read_replicas_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AzReadReplicasSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AzReadReplicasSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.read_replicas_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AzReadReplicasSettings {
            return AzReadReplicasSettings.deserialize(bytes);
        }
    }
    export class ClusterReplicasSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            az_read_replicas_settings?: AzReadReplicasSettings[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("az_read_replicas_settings" in data && data.az_read_replicas_settings != undefined) {
                    this.az_read_replicas_settings = data.az_read_replicas_settings;
                }
            }
        }
        get az_read_replicas_settings() {
            return pb_1.Message.getRepeatedWrapperField(this, AzReadReplicasSettings, 2) as AzReadReplicasSettings[];
        }
        set az_read_replicas_settings(value: AzReadReplicasSettings[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            az_read_replicas_settings?: ReturnType<typeof AzReadReplicasSettings.prototype.toObject>[];
        }): ClusterReplicasSettings {
            const message = new ClusterReplicasSettings({});
            if (data.az_read_replicas_settings != null) {
                message.az_read_replicas_settings = data.az_read_replicas_settings.map(item => AzReadReplicasSettings.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                az_read_replicas_settings?: ReturnType<typeof AzReadReplicasSettings.prototype.toObject>[];
            } = {};
            if (this.az_read_replicas_settings != null) {
                data.az_read_replicas_settings = this.az_read_replicas_settings.map((item: AzReadReplicasSettings) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.az_read_replicas_settings.length)
                writer.writeRepeatedMessage(2, this.az_read_replicas_settings, (item: AzReadReplicasSettings) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClusterReplicasSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClusterReplicasSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.az_read_replicas_settings, () => pb_1.Message.addToRepeatedWrapperField(message, 2, AzReadReplicasSettings.deserialize(reader), AzReadReplicasSettings));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClusterReplicasSettings {
            return ClusterReplicasSettings.deserialize(bytes);
        }
    }
    export class ReadReplicasSettings extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            per_az_read_replicas_count?: number;
            any_az_read_replicas_count?: never;
        } | {
            per_az_read_replicas_count?: never;
            any_az_read_replicas_count?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("per_az_read_replicas_count" in data && data.per_az_read_replicas_count != undefined) {
                    this.per_az_read_replicas_count = data.per_az_read_replicas_count;
                }
                if ("any_az_read_replicas_count" in data && data.any_az_read_replicas_count != undefined) {
                    this.any_az_read_replicas_count = data.any_az_read_replicas_count;
                }
            }
        }
        get per_az_read_replicas_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set per_az_read_replicas_count(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_per_az_read_replicas_count() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get any_az_read_replicas_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set any_az_read_replicas_count(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_any_az_read_replicas_count() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get settings() {
            const cases: {
                [index: number]: "none" | "per_az_read_replicas_count" | "any_az_read_replicas_count";
            } = {
                0: "none",
                1: "per_az_read_replicas_count",
                2: "any_az_read_replicas_count"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            per_az_read_replicas_count?: number;
            any_az_read_replicas_count?: number;
        }): ReadReplicasSettings {
            const message = new ReadReplicasSettings({});
            if (data.per_az_read_replicas_count != null) {
                message.per_az_read_replicas_count = data.per_az_read_replicas_count;
            }
            if (data.any_az_read_replicas_count != null) {
                message.any_az_read_replicas_count = data.any_az_read_replicas_count;
            }
            return message;
        }
        toObject() {
            const data: {
                per_az_read_replicas_count?: number;
                any_az_read_replicas_count?: number;
            } = {};
            if (this.per_az_read_replicas_count != null) {
                data.per_az_read_replicas_count = this.per_az_read_replicas_count;
            }
            if (this.any_az_read_replicas_count != null) {
                data.any_az_read_replicas_count = this.any_az_read_replicas_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_per_az_read_replicas_count)
                writer.writeUint64(1, this.per_az_read_replicas_count);
            if (this.has_any_az_read_replicas_count)
                writer.writeUint64(2, this.any_az_read_replicas_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadReplicasSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadReplicasSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.per_az_read_replicas_count = reader.readUint64();
                        break;
                    case 2:
                        message.any_az_read_replicas_count = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadReplicasSettings {
            return ReadReplicasSettings.deserialize(bytes);
        }
    }
    export class CreateTableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[13, 14]];
        constructor(data?: any[] | ({
            session_id?: string;
            path?: string;
            columns?: ColumnMeta[];
            primary_key?: string[];
            profile?: TableProfile;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
            indexes?: TableIndex[];
            ttl_settings?: TtlSettings;
            storage_settings?: StorageSettings;
            column_families?: ColumnFamily[];
            attributes?: Map<string, string>;
            compaction_policy?: string;
            partitioning_settings?: PartitioningSettings;
            key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
            read_replicas_settings?: ReadReplicasSettings;
        } & (({
            uniform_partitions?: number;
            partition_at_keys?: never;
        } | {
            uniform_partitions?: never;
            partition_at_keys?: ExplicitPartitions;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 7, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("columns" in data && data.columns != undefined) {
                    this.columns = data.columns;
                }
                if ("primary_key" in data && data.primary_key != undefined) {
                    this.primary_key = data.primary_key;
                }
                if ("profile" in data && data.profile != undefined) {
                    this.profile = data.profile;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("indexes" in data && data.indexes != undefined) {
                    this.indexes = data.indexes;
                }
                if ("ttl_settings" in data && data.ttl_settings != undefined) {
                    this.ttl_settings = data.ttl_settings;
                }
                if ("storage_settings" in data && data.storage_settings != undefined) {
                    this.storage_settings = data.storage_settings;
                }
                if ("column_families" in data && data.column_families != undefined) {
                    this.column_families = data.column_families;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("compaction_policy" in data && data.compaction_policy != undefined) {
                    this.compaction_policy = data.compaction_policy;
                }
                if ("uniform_partitions" in data && data.uniform_partitions != undefined) {
                    this.uniform_partitions = data.uniform_partitions;
                }
                if ("partition_at_keys" in data && data.partition_at_keys != undefined) {
                    this.partition_at_keys = data.partition_at_keys;
                }
                if ("partitioning_settings" in data && data.partitioning_settings != undefined) {
                    this.partitioning_settings = data.partitioning_settings;
                }
                if ("key_bloom_filter" in data && data.key_bloom_filter != undefined) {
                    this.key_bloom_filter = data.key_bloom_filter;
                }
                if ("read_replicas_settings" in data && data.read_replicas_settings != undefined) {
                    this.read_replicas_settings = data.read_replicas_settings;
                }
            }
            if (!this.attributes)
                this.attributes = new Map();
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get columns() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnMeta, 3) as ColumnMeta[];
        }
        set columns(value: ColumnMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get primary_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set primary_key(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get profile() {
            return pb_1.Message.getWrapperField(this, TableProfile, 5) as TableProfile;
        }
        set profile(value: TableProfile) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_profile() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 6) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get indexes() {
            return pb_1.Message.getRepeatedWrapperField(this, TableIndex, 7) as TableIndex[];
        }
        set indexes(value: TableIndex[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get ttl_settings() {
            return pb_1.Message.getWrapperField(this, TtlSettings, 8) as TtlSettings;
        }
        set ttl_settings(value: TtlSettings) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_ttl_settings() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get storage_settings() {
            return pb_1.Message.getWrapperField(this, StorageSettings, 9) as StorageSettings;
        }
        set storage_settings(value: StorageSettings) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_storage_settings() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get column_families() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnFamily, 10) as ColumnFamily[];
        }
        set column_families(value: ColumnFamily[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get attributes() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get compaction_policy() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set compaction_policy(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get uniform_partitions() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set uniform_partitions(value: number) {
            pb_1.Message.setOneofField(this, 13, this.#one_of_decls[0], value);
        }
        get has_uniform_partitions() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get partition_at_keys() {
            return pb_1.Message.getWrapperField(this, ExplicitPartitions, 14) as ExplicitPartitions;
        }
        set partition_at_keys(value: ExplicitPartitions) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_partition_at_keys() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get partitioning_settings() {
            return pb_1.Message.getWrapperField(this, PartitioningSettings, 15) as PartitioningSettings;
        }
        set partitioning_settings(value: PartitioningSettings) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_partitioning_settings() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get key_bloom_filter() {
            return pb_1.Message.getFieldWithDefault(this, 16, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set key_bloom_filter(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 16, value);
        }
        get read_replicas_settings() {
            return pb_1.Message.getWrapperField(this, ReadReplicasSettings, 17) as ReadReplicasSettings;
        }
        set read_replicas_settings(value: ReadReplicasSettings) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get has_read_replicas_settings() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get partitions() {
            const cases: {
                [index: number]: "none" | "uniform_partitions" | "partition_at_keys";
            } = {
                0: "none",
                13: "uniform_partitions",
                14: "partition_at_keys"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13, 14])];
        }
        static fromObject(data: {
            session_id?: string;
            path?: string;
            columns?: ReturnType<typeof ColumnMeta.prototype.toObject>[];
            primary_key?: string[];
            profile?: ReturnType<typeof TableProfile.prototype.toObject>;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            indexes?: ReturnType<typeof TableIndex.prototype.toObject>[];
            ttl_settings?: ReturnType<typeof TtlSettings.prototype.toObject>;
            storage_settings?: ReturnType<typeof StorageSettings.prototype.toObject>;
            column_families?: ReturnType<typeof ColumnFamily.prototype.toObject>[];
            attributes?: {
                [key: string]: string;
            };
            compaction_policy?: string;
            uniform_partitions?: number;
            partition_at_keys?: ReturnType<typeof ExplicitPartitions.prototype.toObject>;
            partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
            key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
            read_replicas_settings?: ReturnType<typeof ReadReplicasSettings.prototype.toObject>;
        }): CreateTableRequest {
            const message = new CreateTableRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.columns != null) {
                message.columns = data.columns.map(item => ColumnMeta.fromObject(item));
            }
            if (data.primary_key != null) {
                message.primary_key = data.primary_key;
            }
            if (data.profile != null) {
                message.profile = TableProfile.fromObject(data.profile);
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.indexes != null) {
                message.indexes = data.indexes.map(item => TableIndex.fromObject(item));
            }
            if (data.ttl_settings != null) {
                message.ttl_settings = TtlSettings.fromObject(data.ttl_settings);
            }
            if (data.storage_settings != null) {
                message.storage_settings = StorageSettings.fromObject(data.storage_settings);
            }
            if (data.column_families != null) {
                message.column_families = data.column_families.map(item => ColumnFamily.fromObject(item));
            }
            if (typeof data.attributes == "object") {
                message.attributes = new Map(Object.entries(data.attributes));
            }
            if (data.compaction_policy != null) {
                message.compaction_policy = data.compaction_policy;
            }
            if (data.uniform_partitions != null) {
                message.uniform_partitions = data.uniform_partitions;
            }
            if (data.partition_at_keys != null) {
                message.partition_at_keys = ExplicitPartitions.fromObject(data.partition_at_keys);
            }
            if (data.partitioning_settings != null) {
                message.partitioning_settings = PartitioningSettings.fromObject(data.partitioning_settings);
            }
            if (data.key_bloom_filter != null) {
                message.key_bloom_filter = data.key_bloom_filter;
            }
            if (data.read_replicas_settings != null) {
                message.read_replicas_settings = ReadReplicasSettings.fromObject(data.read_replicas_settings);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                path?: string;
                columns?: ReturnType<typeof ColumnMeta.prototype.toObject>[];
                primary_key?: string[];
                profile?: ReturnType<typeof TableProfile.prototype.toObject>;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
                indexes?: ReturnType<typeof TableIndex.prototype.toObject>[];
                ttl_settings?: ReturnType<typeof TtlSettings.prototype.toObject>;
                storage_settings?: ReturnType<typeof StorageSettings.prototype.toObject>;
                column_families?: ReturnType<typeof ColumnFamily.prototype.toObject>[];
                attributes?: {
                    [key: string]: string;
                };
                compaction_policy?: string;
                uniform_partitions?: number;
                partition_at_keys?: ReturnType<typeof ExplicitPartitions.prototype.toObject>;
                partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
                key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
                read_replicas_settings?: ReturnType<typeof ReadReplicasSettings.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.columns != null) {
                data.columns = this.columns.map((item: ColumnMeta) => item.toObject());
            }
            if (this.primary_key != null) {
                data.primary_key = this.primary_key;
            }
            if (this.profile != null) {
                data.profile = this.profile.toObject();
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.indexes != null) {
                data.indexes = this.indexes.map((item: TableIndex) => item.toObject());
            }
            if (this.ttl_settings != null) {
                data.ttl_settings = this.ttl_settings.toObject();
            }
            if (this.storage_settings != null) {
                data.storage_settings = this.storage_settings.toObject();
            }
            if (this.column_families != null) {
                data.column_families = this.column_families.map((item: ColumnFamily) => item.toObject());
            }
            if (this.attributes != null) {
                data.attributes = (Object.fromEntries)(this.attributes);
            }
            if (this.compaction_policy != null) {
                data.compaction_policy = this.compaction_policy;
            }
            if (this.uniform_partitions != null) {
                data.uniform_partitions = this.uniform_partitions;
            }
            if (this.partition_at_keys != null) {
                data.partition_at_keys = this.partition_at_keys.toObject();
            }
            if (this.partitioning_settings != null) {
                data.partitioning_settings = this.partitioning_settings.toObject();
            }
            if (this.key_bloom_filter != null) {
                data.key_bloom_filter = this.key_bloom_filter;
            }
            if (this.read_replicas_settings != null) {
                data.read_replicas_settings = this.read_replicas_settings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.columns.length)
                writer.writeRepeatedMessage(3, this.columns, (item: ColumnMeta) => item.serialize(writer));
            if (this.primary_key.length)
                writer.writeRepeatedString(4, this.primary_key);
            if (this.has_profile)
                writer.writeMessage(5, this.profile, () => this.profile.serialize(writer));
            if (this.has_operation_params)
                writer.writeMessage(6, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.indexes.length)
                writer.writeRepeatedMessage(7, this.indexes, (item: TableIndex) => item.serialize(writer));
            if (this.has_ttl_settings)
                writer.writeMessage(8, this.ttl_settings, () => this.ttl_settings.serialize(writer));
            if (this.has_storage_settings)
                writer.writeMessage(9, this.storage_settings, () => this.storage_settings.serialize(writer));
            if (this.column_families.length)
                writer.writeRepeatedMessage(10, this.column_families, (item: ColumnFamily) => item.serialize(writer));
            for (const [key, value] of this.attributes) {
                writer.writeMessage(11, this.attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.compaction_policy.length)
                writer.writeString(12, this.compaction_policy);
            if (this.has_uniform_partitions)
                writer.writeUint64(13, this.uniform_partitions);
            if (this.has_partition_at_keys)
                writer.writeMessage(14, this.partition_at_keys, () => this.partition_at_keys.serialize(writer));
            if (this.has_partitioning_settings)
                writer.writeMessage(15, this.partitioning_settings, () => this.partitioning_settings.serialize(writer));
            if (this.key_bloom_filter != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(16, this.key_bloom_filter);
            if (this.has_read_replicas_settings)
                writer.writeMessage(17, this.read_replicas_settings, () => this.read_replicas_settings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.columns, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ColumnMeta.deserialize(reader), ColumnMeta));
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        reader.readMessage(message.profile, () => message.profile = TableProfile.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.indexes, () => pb_1.Message.addToRepeatedWrapperField(message, 7, TableIndex.deserialize(reader), TableIndex));
                        break;
                    case 8:
                        reader.readMessage(message.ttl_settings, () => message.ttl_settings = TtlSettings.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.storage_settings, () => message.storage_settings = StorageSettings.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.column_families, () => pb_1.Message.addToRepeatedWrapperField(message, 10, ColumnFamily.deserialize(reader), ColumnFamily));
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 12:
                        message.compaction_policy = reader.readString();
                        break;
                    case 13:
                        message.uniform_partitions = reader.readUint64();
                        break;
                    case 14:
                        reader.readMessage(message.partition_at_keys, () => message.partition_at_keys = ExplicitPartitions.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.partitioning_settings, () => message.partitioning_settings = PartitioningSettings.deserialize(reader));
                        break;
                    case 16:
                        message.key_bloom_filter = reader.readEnum();
                        break;
                    case 17:
                        reader.readMessage(message.read_replicas_settings, () => message.read_replicas_settings = ReadReplicasSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTableRequest {
            return CreateTableRequest.deserialize(bytes);
        }
    }
    export class CreateTableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): CreateTableResponse {
            const message = new CreateTableResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTableResponse {
            return CreateTableResponse.deserialize(bytes);
        }
    }
    export class DropTableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            path?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 4) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            session_id?: string;
            path?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): DropTableRequest {
            const message = new DropTableRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                path?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.has_operation_params)
                writer.writeMessage(4, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropTableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropTableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropTableRequest {
            return DropTableRequest.deserialize(bytes);
        }
    }
    export class DropTableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): DropTableResponse {
            const message = new DropTableResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DropTableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DropTableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DropTableResponse {
            return DropTableResponse.deserialize(bytes);
        }
    }
    export class RenameIndexItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_name?: string;
            destination_name?: string;
            replace_destination?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_name" in data && data.source_name != undefined) {
                    this.source_name = data.source_name;
                }
                if ("destination_name" in data && data.destination_name != undefined) {
                    this.destination_name = data.destination_name;
                }
                if ("replace_destination" in data && data.replace_destination != undefined) {
                    this.replace_destination = data.replace_destination;
                }
            }
        }
        get source_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set source_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get destination_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set destination_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get replace_destination() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set replace_destination(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            source_name?: string;
            destination_name?: string;
            replace_destination?: boolean;
        }): RenameIndexItem {
            const message = new RenameIndexItem({});
            if (data.source_name != null) {
                message.source_name = data.source_name;
            }
            if (data.destination_name != null) {
                message.destination_name = data.destination_name;
            }
            if (data.replace_destination != null) {
                message.replace_destination = data.replace_destination;
            }
            return message;
        }
        toObject() {
            const data: {
                source_name?: string;
                destination_name?: string;
                replace_destination?: boolean;
            } = {};
            if (this.source_name != null) {
                data.source_name = this.source_name;
            }
            if (this.destination_name != null) {
                data.destination_name = this.destination_name;
            }
            if (this.replace_destination != null) {
                data.replace_destination = this.replace_destination;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_name.length)
                writer.writeString(1, this.source_name);
            if (this.destination_name.length)
                writer.writeString(2, this.destination_name);
            if (this.replace_destination != false)
                writer.writeBool(3, this.replace_destination);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameIndexItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameIndexItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_name = reader.readString();
                        break;
                    case 2:
                        message.destination_name = reader.readString();
                        break;
                    case 3:
                        message.replace_destination = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameIndexItem {
            return RenameIndexItem.deserialize(bytes);
        }
    }
    export class AlterTableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[7, 8]];
        constructor(data?: any[] | ({
            session_id?: string;
            path?: string;
            add_columns?: ColumnMeta[];
            drop_columns?: string[];
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
            alter_columns?: ColumnMeta[];
            add_indexes?: TableIndex[];
            drop_indexes?: string[];
            alter_storage_settings?: StorageSettings;
            add_column_families?: ColumnFamily[];
            alter_column_families?: ColumnFamily[];
            alter_attributes?: Map<string, string>;
            set_compaction_policy?: string;
            alter_partitioning_settings?: PartitioningSettings;
            set_key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
            set_read_replicas_settings?: ReadReplicasSettings;
            add_changefeeds?: Changefeed[];
            drop_changefeeds?: string[];
            rename_indexes?: RenameIndexItem[];
        } & (({
            set_ttl_settings?: TtlSettings;
            drop_ttl_settings?: never;
        } | {
            set_ttl_settings?: never;
            drop_ttl_settings?: dependency_10.google.protobuf.Empty;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 6, 9, 10, 12, 13, 19, 20, 21], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("add_columns" in data && data.add_columns != undefined) {
                    this.add_columns = data.add_columns;
                }
                if ("drop_columns" in data && data.drop_columns != undefined) {
                    this.drop_columns = data.drop_columns;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("alter_columns" in data && data.alter_columns != undefined) {
                    this.alter_columns = data.alter_columns;
                }
                if ("set_ttl_settings" in data && data.set_ttl_settings != undefined) {
                    this.set_ttl_settings = data.set_ttl_settings;
                }
                if ("drop_ttl_settings" in data && data.drop_ttl_settings != undefined) {
                    this.drop_ttl_settings = data.drop_ttl_settings;
                }
                if ("add_indexes" in data && data.add_indexes != undefined) {
                    this.add_indexes = data.add_indexes;
                }
                if ("drop_indexes" in data && data.drop_indexes != undefined) {
                    this.drop_indexes = data.drop_indexes;
                }
                if ("alter_storage_settings" in data && data.alter_storage_settings != undefined) {
                    this.alter_storage_settings = data.alter_storage_settings;
                }
                if ("add_column_families" in data && data.add_column_families != undefined) {
                    this.add_column_families = data.add_column_families;
                }
                if ("alter_column_families" in data && data.alter_column_families != undefined) {
                    this.alter_column_families = data.alter_column_families;
                }
                if ("alter_attributes" in data && data.alter_attributes != undefined) {
                    this.alter_attributes = data.alter_attributes;
                }
                if ("set_compaction_policy" in data && data.set_compaction_policy != undefined) {
                    this.set_compaction_policy = data.set_compaction_policy;
                }
                if ("alter_partitioning_settings" in data && data.alter_partitioning_settings != undefined) {
                    this.alter_partitioning_settings = data.alter_partitioning_settings;
                }
                if ("set_key_bloom_filter" in data && data.set_key_bloom_filter != undefined) {
                    this.set_key_bloom_filter = data.set_key_bloom_filter;
                }
                if ("set_read_replicas_settings" in data && data.set_read_replicas_settings != undefined) {
                    this.set_read_replicas_settings = data.set_read_replicas_settings;
                }
                if ("add_changefeeds" in data && data.add_changefeeds != undefined) {
                    this.add_changefeeds = data.add_changefeeds;
                }
                if ("drop_changefeeds" in data && data.drop_changefeeds != undefined) {
                    this.drop_changefeeds = data.drop_changefeeds;
                }
                if ("rename_indexes" in data && data.rename_indexes != undefined) {
                    this.rename_indexes = data.rename_indexes;
                }
            }
            if (!this.alter_attributes)
                this.alter_attributes = new Map();
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get add_columns() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnMeta, 3) as ColumnMeta[];
        }
        set add_columns(value: ColumnMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get drop_columns() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set drop_columns(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 5) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get alter_columns() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnMeta, 6) as ColumnMeta[];
        }
        set alter_columns(value: ColumnMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get set_ttl_settings() {
            return pb_1.Message.getWrapperField(this, TtlSettings, 7) as TtlSettings;
        }
        set set_ttl_settings(value: TtlSettings) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_set_ttl_settings() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get drop_ttl_settings() {
            return pb_1.Message.getWrapperField(this, dependency_10.google.protobuf.Empty, 8) as dependency_10.google.protobuf.Empty;
        }
        set drop_ttl_settings(value: dependency_10.google.protobuf.Empty) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_drop_ttl_settings() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get add_indexes() {
            return pb_1.Message.getRepeatedWrapperField(this, TableIndex, 9) as TableIndex[];
        }
        set add_indexes(value: TableIndex[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get drop_indexes() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set drop_indexes(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get alter_storage_settings() {
            return pb_1.Message.getWrapperField(this, StorageSettings, 11) as StorageSettings;
        }
        set alter_storage_settings(value: StorageSettings) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_alter_storage_settings() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get add_column_families() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnFamily, 12) as ColumnFamily[];
        }
        set add_column_families(value: ColumnFamily[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get alter_column_families() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnFamily, 13) as ColumnFamily[];
        }
        set alter_column_families(value: ColumnFamily[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get alter_attributes() {
            return pb_1.Message.getField(this, 14) as any as Map<string, string>;
        }
        set alter_attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 14, value as any);
        }
        get set_compaction_policy() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set set_compaction_policy(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get alter_partitioning_settings() {
            return pb_1.Message.getWrapperField(this, PartitioningSettings, 16) as PartitioningSettings;
        }
        set alter_partitioning_settings(value: PartitioningSettings) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_alter_partitioning_settings() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get set_key_bloom_filter() {
            return pb_1.Message.getFieldWithDefault(this, 17, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set set_key_bloom_filter(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 17, value);
        }
        get set_read_replicas_settings() {
            return pb_1.Message.getWrapperField(this, ReadReplicasSettings, 18) as ReadReplicasSettings;
        }
        set set_read_replicas_settings(value: ReadReplicasSettings) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get has_set_read_replicas_settings() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get add_changefeeds() {
            return pb_1.Message.getRepeatedWrapperField(this, Changefeed, 19) as Changefeed[];
        }
        set add_changefeeds(value: Changefeed[]) {
            pb_1.Message.setRepeatedWrapperField(this, 19, value);
        }
        get drop_changefeeds() {
            return pb_1.Message.getFieldWithDefault(this, 20, []) as string[];
        }
        set drop_changefeeds(value: string[]) {
            pb_1.Message.setField(this, 20, value);
        }
        get rename_indexes() {
            return pb_1.Message.getRepeatedWrapperField(this, RenameIndexItem, 21) as RenameIndexItem[];
        }
        set rename_indexes(value: RenameIndexItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 21, value);
        }
        get ttl_action() {
            const cases: {
                [index: number]: "none" | "set_ttl_settings" | "drop_ttl_settings";
            } = {
                0: "none",
                7: "set_ttl_settings",
                8: "drop_ttl_settings"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7, 8])];
        }
        static fromObject(data: {
            session_id?: string;
            path?: string;
            add_columns?: ReturnType<typeof ColumnMeta.prototype.toObject>[];
            drop_columns?: string[];
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            alter_columns?: ReturnType<typeof ColumnMeta.prototype.toObject>[];
            set_ttl_settings?: ReturnType<typeof TtlSettings.prototype.toObject>;
            drop_ttl_settings?: ReturnType<typeof dependency_10.google.protobuf.Empty.prototype.toObject>;
            add_indexes?: ReturnType<typeof TableIndex.prototype.toObject>[];
            drop_indexes?: string[];
            alter_storage_settings?: ReturnType<typeof StorageSettings.prototype.toObject>;
            add_column_families?: ReturnType<typeof ColumnFamily.prototype.toObject>[];
            alter_column_families?: ReturnType<typeof ColumnFamily.prototype.toObject>[];
            alter_attributes?: {
                [key: string]: string;
            };
            set_compaction_policy?: string;
            alter_partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
            set_key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
            set_read_replicas_settings?: ReturnType<typeof ReadReplicasSettings.prototype.toObject>;
            add_changefeeds?: ReturnType<typeof Changefeed.prototype.toObject>[];
            drop_changefeeds?: string[];
            rename_indexes?: ReturnType<typeof RenameIndexItem.prototype.toObject>[];
        }): AlterTableRequest {
            const message = new AlterTableRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.add_columns != null) {
                message.add_columns = data.add_columns.map(item => ColumnMeta.fromObject(item));
            }
            if (data.drop_columns != null) {
                message.drop_columns = data.drop_columns;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.alter_columns != null) {
                message.alter_columns = data.alter_columns.map(item => ColumnMeta.fromObject(item));
            }
            if (data.set_ttl_settings != null) {
                message.set_ttl_settings = TtlSettings.fromObject(data.set_ttl_settings);
            }
            if (data.drop_ttl_settings != null) {
                message.drop_ttl_settings = dependency_10.google.protobuf.Empty.fromObject(data.drop_ttl_settings);
            }
            if (data.add_indexes != null) {
                message.add_indexes = data.add_indexes.map(item => TableIndex.fromObject(item));
            }
            if (data.drop_indexes != null) {
                message.drop_indexes = data.drop_indexes;
            }
            if (data.alter_storage_settings != null) {
                message.alter_storage_settings = StorageSettings.fromObject(data.alter_storage_settings);
            }
            if (data.add_column_families != null) {
                message.add_column_families = data.add_column_families.map(item => ColumnFamily.fromObject(item));
            }
            if (data.alter_column_families != null) {
                message.alter_column_families = data.alter_column_families.map(item => ColumnFamily.fromObject(item));
            }
            if (typeof data.alter_attributes == "object") {
                message.alter_attributes = new Map(Object.entries(data.alter_attributes));
            }
            if (data.set_compaction_policy != null) {
                message.set_compaction_policy = data.set_compaction_policy;
            }
            if (data.alter_partitioning_settings != null) {
                message.alter_partitioning_settings = PartitioningSettings.fromObject(data.alter_partitioning_settings);
            }
            if (data.set_key_bloom_filter != null) {
                message.set_key_bloom_filter = data.set_key_bloom_filter;
            }
            if (data.set_read_replicas_settings != null) {
                message.set_read_replicas_settings = ReadReplicasSettings.fromObject(data.set_read_replicas_settings);
            }
            if (data.add_changefeeds != null) {
                message.add_changefeeds = data.add_changefeeds.map(item => Changefeed.fromObject(item));
            }
            if (data.drop_changefeeds != null) {
                message.drop_changefeeds = data.drop_changefeeds;
            }
            if (data.rename_indexes != null) {
                message.rename_indexes = data.rename_indexes.map(item => RenameIndexItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                path?: string;
                add_columns?: ReturnType<typeof ColumnMeta.prototype.toObject>[];
                drop_columns?: string[];
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
                alter_columns?: ReturnType<typeof ColumnMeta.prototype.toObject>[];
                set_ttl_settings?: ReturnType<typeof TtlSettings.prototype.toObject>;
                drop_ttl_settings?: ReturnType<typeof dependency_10.google.protobuf.Empty.prototype.toObject>;
                add_indexes?: ReturnType<typeof TableIndex.prototype.toObject>[];
                drop_indexes?: string[];
                alter_storage_settings?: ReturnType<typeof StorageSettings.prototype.toObject>;
                add_column_families?: ReturnType<typeof ColumnFamily.prototype.toObject>[];
                alter_column_families?: ReturnType<typeof ColumnFamily.prototype.toObject>[];
                alter_attributes?: {
                    [key: string]: string;
                };
                set_compaction_policy?: string;
                alter_partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
                set_key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
                set_read_replicas_settings?: ReturnType<typeof ReadReplicasSettings.prototype.toObject>;
                add_changefeeds?: ReturnType<typeof Changefeed.prototype.toObject>[];
                drop_changefeeds?: string[];
                rename_indexes?: ReturnType<typeof RenameIndexItem.prototype.toObject>[];
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.add_columns != null) {
                data.add_columns = this.add_columns.map((item: ColumnMeta) => item.toObject());
            }
            if (this.drop_columns != null) {
                data.drop_columns = this.drop_columns;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.alter_columns != null) {
                data.alter_columns = this.alter_columns.map((item: ColumnMeta) => item.toObject());
            }
            if (this.set_ttl_settings != null) {
                data.set_ttl_settings = this.set_ttl_settings.toObject();
            }
            if (this.drop_ttl_settings != null) {
                data.drop_ttl_settings = this.drop_ttl_settings.toObject();
            }
            if (this.add_indexes != null) {
                data.add_indexes = this.add_indexes.map((item: TableIndex) => item.toObject());
            }
            if (this.drop_indexes != null) {
                data.drop_indexes = this.drop_indexes;
            }
            if (this.alter_storage_settings != null) {
                data.alter_storage_settings = this.alter_storage_settings.toObject();
            }
            if (this.add_column_families != null) {
                data.add_column_families = this.add_column_families.map((item: ColumnFamily) => item.toObject());
            }
            if (this.alter_column_families != null) {
                data.alter_column_families = this.alter_column_families.map((item: ColumnFamily) => item.toObject());
            }
            if (this.alter_attributes != null) {
                data.alter_attributes = (Object.fromEntries)(this.alter_attributes);
            }
            if (this.set_compaction_policy != null) {
                data.set_compaction_policy = this.set_compaction_policy;
            }
            if (this.alter_partitioning_settings != null) {
                data.alter_partitioning_settings = this.alter_partitioning_settings.toObject();
            }
            if (this.set_key_bloom_filter != null) {
                data.set_key_bloom_filter = this.set_key_bloom_filter;
            }
            if (this.set_read_replicas_settings != null) {
                data.set_read_replicas_settings = this.set_read_replicas_settings.toObject();
            }
            if (this.add_changefeeds != null) {
                data.add_changefeeds = this.add_changefeeds.map((item: Changefeed) => item.toObject());
            }
            if (this.drop_changefeeds != null) {
                data.drop_changefeeds = this.drop_changefeeds;
            }
            if (this.rename_indexes != null) {
                data.rename_indexes = this.rename_indexes.map((item: RenameIndexItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.add_columns.length)
                writer.writeRepeatedMessage(3, this.add_columns, (item: ColumnMeta) => item.serialize(writer));
            if (this.drop_columns.length)
                writer.writeRepeatedString(4, this.drop_columns);
            if (this.has_operation_params)
                writer.writeMessage(5, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.alter_columns.length)
                writer.writeRepeatedMessage(6, this.alter_columns, (item: ColumnMeta) => item.serialize(writer));
            if (this.has_set_ttl_settings)
                writer.writeMessage(7, this.set_ttl_settings, () => this.set_ttl_settings.serialize(writer));
            if (this.has_drop_ttl_settings)
                writer.writeMessage(8, this.drop_ttl_settings, () => this.drop_ttl_settings.serialize(writer));
            if (this.add_indexes.length)
                writer.writeRepeatedMessage(9, this.add_indexes, (item: TableIndex) => item.serialize(writer));
            if (this.drop_indexes.length)
                writer.writeRepeatedString(10, this.drop_indexes);
            if (this.has_alter_storage_settings)
                writer.writeMessage(11, this.alter_storage_settings, () => this.alter_storage_settings.serialize(writer));
            if (this.add_column_families.length)
                writer.writeRepeatedMessage(12, this.add_column_families, (item: ColumnFamily) => item.serialize(writer));
            if (this.alter_column_families.length)
                writer.writeRepeatedMessage(13, this.alter_column_families, (item: ColumnFamily) => item.serialize(writer));
            for (const [key, value] of this.alter_attributes) {
                writer.writeMessage(14, this.alter_attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.set_compaction_policy.length)
                writer.writeString(15, this.set_compaction_policy);
            if (this.has_alter_partitioning_settings)
                writer.writeMessage(16, this.alter_partitioning_settings, () => this.alter_partitioning_settings.serialize(writer));
            if (this.set_key_bloom_filter != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(17, this.set_key_bloom_filter);
            if (this.has_set_read_replicas_settings)
                writer.writeMessage(18, this.set_read_replicas_settings, () => this.set_read_replicas_settings.serialize(writer));
            if (this.add_changefeeds.length)
                writer.writeRepeatedMessage(19, this.add_changefeeds, (item: Changefeed) => item.serialize(writer));
            if (this.drop_changefeeds.length)
                writer.writeRepeatedString(20, this.drop_changefeeds);
            if (this.rename_indexes.length)
                writer.writeRepeatedMessage(21, this.rename_indexes, (item: RenameIndexItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterTableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterTableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.add_columns, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ColumnMeta.deserialize(reader), ColumnMeta));
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.alter_columns, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ColumnMeta.deserialize(reader), ColumnMeta));
                        break;
                    case 7:
                        reader.readMessage(message.set_ttl_settings, () => message.set_ttl_settings = TtlSettings.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.drop_ttl_settings, () => message.drop_ttl_settings = dependency_10.google.protobuf.Empty.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.add_indexes, () => pb_1.Message.addToRepeatedWrapperField(message, 9, TableIndex.deserialize(reader), TableIndex));
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    case 11:
                        reader.readMessage(message.alter_storage_settings, () => message.alter_storage_settings = StorageSettings.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.add_column_families, () => pb_1.Message.addToRepeatedWrapperField(message, 12, ColumnFamily.deserialize(reader), ColumnFamily));
                        break;
                    case 13:
                        reader.readMessage(message.alter_column_families, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ColumnFamily.deserialize(reader), ColumnFamily));
                        break;
                    case 14:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.alter_attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 15:
                        message.set_compaction_policy = reader.readString();
                        break;
                    case 16:
                        reader.readMessage(message.alter_partitioning_settings, () => message.alter_partitioning_settings = PartitioningSettings.deserialize(reader));
                        break;
                    case 17:
                        message.set_key_bloom_filter = reader.readEnum();
                        break;
                    case 18:
                        reader.readMessage(message.set_read_replicas_settings, () => message.set_read_replicas_settings = ReadReplicasSettings.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.add_changefeeds, () => pb_1.Message.addToRepeatedWrapperField(message, 19, Changefeed.deserialize(reader), Changefeed));
                        break;
                    case 20:
                        pb_1.Message.addToRepeatedField(message, 20, reader.readString());
                        break;
                    case 21:
                        reader.readMessage(message.rename_indexes, () => pb_1.Message.addToRepeatedWrapperField(message, 21, RenameIndexItem.deserialize(reader), RenameIndexItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterTableRequest {
            return AlterTableRequest.deserialize(bytes);
        }
    }
    export class AlterTableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): AlterTableResponse {
            const message = new AlterTableResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlterTableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlterTableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlterTableResponse {
            return AlterTableResponse.deserialize(bytes);
        }
    }
    export class CopyTableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            source_path?: string;
            destination_path?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("source_path" in data && data.source_path != undefined) {
                    this.source_path = data.source_path;
                }
                if ("destination_path" in data && data.destination_path != undefined) {
                    this.destination_path = data.destination_path;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set source_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get destination_path() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set destination_path(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 4) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            session_id?: string;
            source_path?: string;
            destination_path?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): CopyTableRequest {
            const message = new CopyTableRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.source_path != null) {
                message.source_path = data.source_path;
            }
            if (data.destination_path != null) {
                message.destination_path = data.destination_path;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                source_path?: string;
                destination_path?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.source_path != null) {
                data.source_path = this.source_path;
            }
            if (this.destination_path != null) {
                data.destination_path = this.destination_path;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.source_path.length)
                writer.writeString(2, this.source_path);
            if (this.destination_path.length)
                writer.writeString(3, this.destination_path);
            if (this.has_operation_params)
                writer.writeMessage(4, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyTableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyTableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.source_path = reader.readString();
                        break;
                    case 3:
                        message.destination_path = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CopyTableRequest {
            return CopyTableRequest.deserialize(bytes);
        }
    }
    export class CopyTableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): CopyTableResponse {
            const message = new CopyTableResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyTableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyTableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CopyTableResponse {
            return CopyTableResponse.deserialize(bytes);
        }
    }
    export class CopyTableItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_path?: string;
            destination_path?: string;
            omit_indexes?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_path" in data && data.source_path != undefined) {
                    this.source_path = data.source_path;
                }
                if ("destination_path" in data && data.destination_path != undefined) {
                    this.destination_path = data.destination_path;
                }
                if ("omit_indexes" in data && data.omit_indexes != undefined) {
                    this.omit_indexes = data.omit_indexes;
                }
            }
        }
        get source_path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set source_path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get destination_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set destination_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get omit_indexes() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set omit_indexes(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            source_path?: string;
            destination_path?: string;
            omit_indexes?: boolean;
        }): CopyTableItem {
            const message = new CopyTableItem({});
            if (data.source_path != null) {
                message.source_path = data.source_path;
            }
            if (data.destination_path != null) {
                message.destination_path = data.destination_path;
            }
            if (data.omit_indexes != null) {
                message.omit_indexes = data.omit_indexes;
            }
            return message;
        }
        toObject() {
            const data: {
                source_path?: string;
                destination_path?: string;
                omit_indexes?: boolean;
            } = {};
            if (this.source_path != null) {
                data.source_path = this.source_path;
            }
            if (this.destination_path != null) {
                data.destination_path = this.destination_path;
            }
            if (this.omit_indexes != null) {
                data.omit_indexes = this.omit_indexes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_path.length)
                writer.writeString(1, this.source_path);
            if (this.destination_path.length)
                writer.writeString(2, this.destination_path);
            if (this.omit_indexes != false)
                writer.writeBool(3, this.omit_indexes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyTableItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyTableItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_path = reader.readString();
                        break;
                    case 2:
                        message.destination_path = reader.readString();
                        break;
                    case 3:
                        message.omit_indexes = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CopyTableItem {
            return CopyTableItem.deserialize(bytes);
        }
    }
    export class CopyTablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
            session_id?: string;
            tables?: CopyTableItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("tables" in data && data.tables != undefined) {
                    this.tables = data.tables;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 1) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tables() {
            return pb_1.Message.getRepeatedWrapperField(this, CopyTableItem, 3) as CopyTableItem[];
        }
        set tables(value: CopyTableItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            session_id?: string;
            tables?: ReturnType<typeof CopyTableItem.prototype.toObject>[];
        }): CopyTablesRequest {
            const message = new CopyTablesRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.tables != null) {
                message.tables = data.tables.map(item => CopyTableItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
                session_id?: string;
                tables?: ReturnType<typeof CopyTableItem.prototype.toObject>[];
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.tables != null) {
                data.tables = this.tables.map((item: CopyTableItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.session_id.length)
                writer.writeString(2, this.session_id);
            if (this.tables.length)
                writer.writeRepeatedMessage(3, this.tables, (item: CopyTableItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyTablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyTablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.session_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.tables, () => pb_1.Message.addToRepeatedWrapperField(message, 3, CopyTableItem.deserialize(reader), CopyTableItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CopyTablesRequest {
            return CopyTablesRequest.deserialize(bytes);
        }
    }
    export class CopyTablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): CopyTablesResponse {
            const message = new CopyTablesResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyTablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyTablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CopyTablesResponse {
            return CopyTablesResponse.deserialize(bytes);
        }
    }
    export class RenameTableItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source_path?: string;
            destination_path?: string;
            replace_destination?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source_path" in data && data.source_path != undefined) {
                    this.source_path = data.source_path;
                }
                if ("destination_path" in data && data.destination_path != undefined) {
                    this.destination_path = data.destination_path;
                }
                if ("replace_destination" in data && data.replace_destination != undefined) {
                    this.replace_destination = data.replace_destination;
                }
            }
        }
        get source_path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set source_path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get destination_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set destination_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get replace_destination() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set replace_destination(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            source_path?: string;
            destination_path?: string;
            replace_destination?: boolean;
        }): RenameTableItem {
            const message = new RenameTableItem({});
            if (data.source_path != null) {
                message.source_path = data.source_path;
            }
            if (data.destination_path != null) {
                message.destination_path = data.destination_path;
            }
            if (data.replace_destination != null) {
                message.replace_destination = data.replace_destination;
            }
            return message;
        }
        toObject() {
            const data: {
                source_path?: string;
                destination_path?: string;
                replace_destination?: boolean;
            } = {};
            if (this.source_path != null) {
                data.source_path = this.source_path;
            }
            if (this.destination_path != null) {
                data.destination_path = this.destination_path;
            }
            if (this.replace_destination != null) {
                data.replace_destination = this.replace_destination;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source_path.length)
                writer.writeString(1, this.source_path);
            if (this.destination_path.length)
                writer.writeString(2, this.destination_path);
            if (this.replace_destination != false)
                writer.writeBool(3, this.replace_destination);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameTableItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameTableItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source_path = reader.readString();
                        break;
                    case 2:
                        message.destination_path = reader.readString();
                        break;
                    case 3:
                        message.replace_destination = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameTableItem {
            return RenameTableItem.deserialize(bytes);
        }
    }
    export class RenameTablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
            session_id?: string;
            tables?: RenameTableItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("tables" in data && data.tables != undefined) {
                    this.tables = data.tables;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 1) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tables() {
            return pb_1.Message.getRepeatedWrapperField(this, RenameTableItem, 3) as RenameTableItem[];
        }
        set tables(value: RenameTableItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            session_id?: string;
            tables?: ReturnType<typeof RenameTableItem.prototype.toObject>[];
        }): RenameTablesRequest {
            const message = new RenameTablesRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.tables != null) {
                message.tables = data.tables.map(item => RenameTableItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
                session_id?: string;
                tables?: ReturnType<typeof RenameTableItem.prototype.toObject>[];
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.tables != null) {
                data.tables = this.tables.map((item: RenameTableItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.session_id.length)
                writer.writeString(2, this.session_id);
            if (this.tables.length)
                writer.writeRepeatedMessage(3, this.tables, (item: RenameTableItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameTablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameTablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 2:
                        message.session_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.tables, () => pb_1.Message.addToRepeatedWrapperField(message, 3, RenameTableItem.deserialize(reader), RenameTableItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameTablesRequest {
            return RenameTablesRequest.deserialize(bytes);
        }
    }
    export class RenameTablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): RenameTablesResponse {
            const message = new RenameTablesResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RenameTablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RenameTablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RenameTablesResponse {
            return RenameTablesResponse.deserialize(bytes);
        }
    }
    export class DescribeTableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            path?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
            include_shard_key_bounds?: boolean;
            include_table_stats?: boolean;
            include_partition_stats?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("include_shard_key_bounds" in data && data.include_shard_key_bounds != undefined) {
                    this.include_shard_key_bounds = data.include_shard_key_bounds;
                }
                if ("include_table_stats" in data && data.include_table_stats != undefined) {
                    this.include_table_stats = data.include_table_stats;
                }
                if ("include_partition_stats" in data && data.include_partition_stats != undefined) {
                    this.include_partition_stats = data.include_partition_stats;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 4) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get include_shard_key_bounds() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set include_shard_key_bounds(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get include_table_stats() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set include_table_stats(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get include_partition_stats() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set include_partition_stats(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            session_id?: string;
            path?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            include_shard_key_bounds?: boolean;
            include_table_stats?: boolean;
            include_partition_stats?: boolean;
        }): DescribeTableRequest {
            const message = new DescribeTableRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.include_shard_key_bounds != null) {
                message.include_shard_key_bounds = data.include_shard_key_bounds;
            }
            if (data.include_table_stats != null) {
                message.include_table_stats = data.include_table_stats;
            }
            if (data.include_partition_stats != null) {
                message.include_partition_stats = data.include_partition_stats;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                path?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
                include_shard_key_bounds?: boolean;
                include_table_stats?: boolean;
                include_partition_stats?: boolean;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.include_shard_key_bounds != null) {
                data.include_shard_key_bounds = this.include_shard_key_bounds;
            }
            if (this.include_table_stats != null) {
                data.include_table_stats = this.include_table_stats;
            }
            if (this.include_partition_stats != null) {
                data.include_partition_stats = this.include_partition_stats;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.has_operation_params)
                writer.writeMessage(4, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.include_shard_key_bounds != false)
                writer.writeBool(5, this.include_shard_key_bounds);
            if (this.include_table_stats != false)
                writer.writeBool(6, this.include_table_stats);
            if (this.include_partition_stats != false)
                writer.writeBool(7, this.include_partition_stats);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 5:
                        message.include_shard_key_bounds = reader.readBool();
                        break;
                    case 6:
                        message.include_table_stats = reader.readBool();
                        break;
                    case 7:
                        message.include_partition_stats = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTableRequest {
            return DescribeTableRequest.deserialize(bytes);
        }
    }
    export class DescribeTableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): DescribeTableResponse {
            const message = new DescribeTableResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTableResponse {
            return DescribeTableResponse.deserialize(bytes);
        }
    }
    export class DescribeTableResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            self?: dependency_7.Ydb.Scheme.Entry;
            columns?: ColumnMeta[];
            primary_key?: string[];
            shard_key_bounds?: dependency_6.Ydb.TypedValue[];
            indexes?: TableIndexDescription[];
            table_stats?: TableStats;
            ttl_settings?: TtlSettings;
            storage_settings?: StorageSettings;
            column_families?: ColumnFamily[];
            attributes?: Map<string, string>;
            partitioning_settings?: PartitioningSettings;
            key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
            read_replicas_settings?: ReadReplicasSettings;
            changefeeds?: ChangefeedDescription[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4, 5, 9, 15], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("self" in data && data.self != undefined) {
                    this.self = data.self;
                }
                if ("columns" in data && data.columns != undefined) {
                    this.columns = data.columns;
                }
                if ("primary_key" in data && data.primary_key != undefined) {
                    this.primary_key = data.primary_key;
                }
                if ("shard_key_bounds" in data && data.shard_key_bounds != undefined) {
                    this.shard_key_bounds = data.shard_key_bounds;
                }
                if ("indexes" in data && data.indexes != undefined) {
                    this.indexes = data.indexes;
                }
                if ("table_stats" in data && data.table_stats != undefined) {
                    this.table_stats = data.table_stats;
                }
                if ("ttl_settings" in data && data.ttl_settings != undefined) {
                    this.ttl_settings = data.ttl_settings;
                }
                if ("storage_settings" in data && data.storage_settings != undefined) {
                    this.storage_settings = data.storage_settings;
                }
                if ("column_families" in data && data.column_families != undefined) {
                    this.column_families = data.column_families;
                }
                if ("attributes" in data && data.attributes != undefined) {
                    this.attributes = data.attributes;
                }
                if ("partitioning_settings" in data && data.partitioning_settings != undefined) {
                    this.partitioning_settings = data.partitioning_settings;
                }
                if ("key_bloom_filter" in data && data.key_bloom_filter != undefined) {
                    this.key_bloom_filter = data.key_bloom_filter;
                }
                if ("read_replicas_settings" in data && data.read_replicas_settings != undefined) {
                    this.read_replicas_settings = data.read_replicas_settings;
                }
                if ("changefeeds" in data && data.changefeeds != undefined) {
                    this.changefeeds = data.changefeeds;
                }
            }
            if (!this.attributes)
                this.attributes = new Map();
        }
        get self() {
            return pb_1.Message.getWrapperField(this, dependency_7.Ydb.Scheme.Entry, 1) as dependency_7.Ydb.Scheme.Entry;
        }
        set self(value: dependency_7.Ydb.Scheme.Entry) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_self() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get columns() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnMeta, 2) as ColumnMeta[];
        }
        set columns(value: ColumnMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get primary_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set primary_key(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get shard_key_bounds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.Ydb.TypedValue, 4) as dependency_6.Ydb.TypedValue[];
        }
        set shard_key_bounds(value: dependency_6.Ydb.TypedValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get indexes() {
            return pb_1.Message.getRepeatedWrapperField(this, TableIndexDescription, 5) as TableIndexDescription[];
        }
        set indexes(value: TableIndexDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get table_stats() {
            return pb_1.Message.getWrapperField(this, TableStats, 6) as TableStats;
        }
        set table_stats(value: TableStats) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_table_stats() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get ttl_settings() {
            return pb_1.Message.getWrapperField(this, TtlSettings, 7) as TtlSettings;
        }
        set ttl_settings(value: TtlSettings) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_ttl_settings() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get storage_settings() {
            return pb_1.Message.getWrapperField(this, StorageSettings, 8) as StorageSettings;
        }
        set storage_settings(value: StorageSettings) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_storage_settings() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get column_families() {
            return pb_1.Message.getRepeatedWrapperField(this, ColumnFamily, 9) as ColumnFamily[];
        }
        set column_families(value: ColumnFamily[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get attributes() {
            return pb_1.Message.getField(this, 10) as any as Map<string, string>;
        }
        set attributes(value: Map<string, string>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        get partitioning_settings() {
            return pb_1.Message.getWrapperField(this, PartitioningSettings, 12) as PartitioningSettings;
        }
        set partitioning_settings(value: PartitioningSettings) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_partitioning_settings() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get key_bloom_filter() {
            return pb_1.Message.getFieldWithDefault(this, 13, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set key_bloom_filter(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 13, value);
        }
        get read_replicas_settings() {
            return pb_1.Message.getWrapperField(this, ReadReplicasSettings, 14) as ReadReplicasSettings;
        }
        set read_replicas_settings(value: ReadReplicasSettings) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_read_replicas_settings() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get changefeeds() {
            return pb_1.Message.getRepeatedWrapperField(this, ChangefeedDescription, 15) as ChangefeedDescription[];
        }
        set changefeeds(value: ChangefeedDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        static fromObject(data: {
            self?: ReturnType<typeof dependency_7.Ydb.Scheme.Entry.prototype.toObject>;
            columns?: ReturnType<typeof ColumnMeta.prototype.toObject>[];
            primary_key?: string[];
            shard_key_bounds?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>[];
            indexes?: ReturnType<typeof TableIndexDescription.prototype.toObject>[];
            table_stats?: ReturnType<typeof TableStats.prototype.toObject>;
            ttl_settings?: ReturnType<typeof TtlSettings.prototype.toObject>;
            storage_settings?: ReturnType<typeof StorageSettings.prototype.toObject>;
            column_families?: ReturnType<typeof ColumnFamily.prototype.toObject>[];
            attributes?: {
                [key: string]: string;
            };
            partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
            key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
            read_replicas_settings?: ReturnType<typeof ReadReplicasSettings.prototype.toObject>;
            changefeeds?: ReturnType<typeof ChangefeedDescription.prototype.toObject>[];
        }): DescribeTableResult {
            const message = new DescribeTableResult({});
            if (data.self != null) {
                message.self = dependency_7.Ydb.Scheme.Entry.fromObject(data.self);
            }
            if (data.columns != null) {
                message.columns = data.columns.map(item => ColumnMeta.fromObject(item));
            }
            if (data.primary_key != null) {
                message.primary_key = data.primary_key;
            }
            if (data.shard_key_bounds != null) {
                message.shard_key_bounds = data.shard_key_bounds.map(item => dependency_6.Ydb.TypedValue.fromObject(item));
            }
            if (data.indexes != null) {
                message.indexes = data.indexes.map(item => TableIndexDescription.fromObject(item));
            }
            if (data.table_stats != null) {
                message.table_stats = TableStats.fromObject(data.table_stats);
            }
            if (data.ttl_settings != null) {
                message.ttl_settings = TtlSettings.fromObject(data.ttl_settings);
            }
            if (data.storage_settings != null) {
                message.storage_settings = StorageSettings.fromObject(data.storage_settings);
            }
            if (data.column_families != null) {
                message.column_families = data.column_families.map(item => ColumnFamily.fromObject(item));
            }
            if (typeof data.attributes == "object") {
                message.attributes = new Map(Object.entries(data.attributes));
            }
            if (data.partitioning_settings != null) {
                message.partitioning_settings = PartitioningSettings.fromObject(data.partitioning_settings);
            }
            if (data.key_bloom_filter != null) {
                message.key_bloom_filter = data.key_bloom_filter;
            }
            if (data.read_replicas_settings != null) {
                message.read_replicas_settings = ReadReplicasSettings.fromObject(data.read_replicas_settings);
            }
            if (data.changefeeds != null) {
                message.changefeeds = data.changefeeds.map(item => ChangefeedDescription.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                self?: ReturnType<typeof dependency_7.Ydb.Scheme.Entry.prototype.toObject>;
                columns?: ReturnType<typeof ColumnMeta.prototype.toObject>[];
                primary_key?: string[];
                shard_key_bounds?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>[];
                indexes?: ReturnType<typeof TableIndexDescription.prototype.toObject>[];
                table_stats?: ReturnType<typeof TableStats.prototype.toObject>;
                ttl_settings?: ReturnType<typeof TtlSettings.prototype.toObject>;
                storage_settings?: ReturnType<typeof StorageSettings.prototype.toObject>;
                column_families?: ReturnType<typeof ColumnFamily.prototype.toObject>[];
                attributes?: {
                    [key: string]: string;
                };
                partitioning_settings?: ReturnType<typeof PartitioningSettings.prototype.toObject>;
                key_bloom_filter?: dependency_2.Ydb.FeatureFlag.Status;
                read_replicas_settings?: ReturnType<typeof ReadReplicasSettings.prototype.toObject>;
                changefeeds?: ReturnType<typeof ChangefeedDescription.prototype.toObject>[];
            } = {};
            if (this.self != null) {
                data.self = this.self.toObject();
            }
            if (this.columns != null) {
                data.columns = this.columns.map((item: ColumnMeta) => item.toObject());
            }
            if (this.primary_key != null) {
                data.primary_key = this.primary_key;
            }
            if (this.shard_key_bounds != null) {
                data.shard_key_bounds = this.shard_key_bounds.map((item: dependency_6.Ydb.TypedValue) => item.toObject());
            }
            if (this.indexes != null) {
                data.indexes = this.indexes.map((item: TableIndexDescription) => item.toObject());
            }
            if (this.table_stats != null) {
                data.table_stats = this.table_stats.toObject();
            }
            if (this.ttl_settings != null) {
                data.ttl_settings = this.ttl_settings.toObject();
            }
            if (this.storage_settings != null) {
                data.storage_settings = this.storage_settings.toObject();
            }
            if (this.column_families != null) {
                data.column_families = this.column_families.map((item: ColumnFamily) => item.toObject());
            }
            if (this.attributes != null) {
                data.attributes = (Object.fromEntries)(this.attributes);
            }
            if (this.partitioning_settings != null) {
                data.partitioning_settings = this.partitioning_settings.toObject();
            }
            if (this.key_bloom_filter != null) {
                data.key_bloom_filter = this.key_bloom_filter;
            }
            if (this.read_replicas_settings != null) {
                data.read_replicas_settings = this.read_replicas_settings.toObject();
            }
            if (this.changefeeds != null) {
                data.changefeeds = this.changefeeds.map((item: ChangefeedDescription) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_self)
                writer.writeMessage(1, this.self, () => this.self.serialize(writer));
            if (this.columns.length)
                writer.writeRepeatedMessage(2, this.columns, (item: ColumnMeta) => item.serialize(writer));
            if (this.primary_key.length)
                writer.writeRepeatedString(3, this.primary_key);
            if (this.shard_key_bounds.length)
                writer.writeRepeatedMessage(4, this.shard_key_bounds, (item: dependency_6.Ydb.TypedValue) => item.serialize(writer));
            if (this.indexes.length)
                writer.writeRepeatedMessage(5, this.indexes, (item: TableIndexDescription) => item.serialize(writer));
            if (this.has_table_stats)
                writer.writeMessage(6, this.table_stats, () => this.table_stats.serialize(writer));
            if (this.has_ttl_settings)
                writer.writeMessage(7, this.ttl_settings, () => this.ttl_settings.serialize(writer));
            if (this.has_storage_settings)
                writer.writeMessage(8, this.storage_settings, () => this.storage_settings.serialize(writer));
            if (this.column_families.length)
                writer.writeRepeatedMessage(9, this.column_families, (item: ColumnFamily) => item.serialize(writer));
            for (const [key, value] of this.attributes) {
                writer.writeMessage(10, this.attributes, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_partitioning_settings)
                writer.writeMessage(12, this.partitioning_settings, () => this.partitioning_settings.serialize(writer));
            if (this.key_bloom_filter != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(13, this.key_bloom_filter);
            if (this.has_read_replicas_settings)
                writer.writeMessage(14, this.read_replicas_settings, () => this.read_replicas_settings.serialize(writer));
            if (this.changefeeds.length)
                writer.writeRepeatedMessage(15, this.changefeeds, (item: ChangefeedDescription) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTableResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTableResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.self, () => message.self = dependency_7.Ydb.Scheme.Entry.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.columns, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ColumnMeta.deserialize(reader), ColumnMeta));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.shard_key_bounds, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_6.Ydb.TypedValue.deserialize(reader), dependency_6.Ydb.TypedValue));
                        break;
                    case 5:
                        reader.readMessage(message.indexes, () => pb_1.Message.addToRepeatedWrapperField(message, 5, TableIndexDescription.deserialize(reader), TableIndexDescription));
                        break;
                    case 6:
                        reader.readMessage(message.table_stats, () => message.table_stats = TableStats.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.ttl_settings, () => message.ttl_settings = TtlSettings.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.storage_settings, () => message.storage_settings = StorageSettings.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.column_families, () => pb_1.Message.addToRepeatedWrapperField(message, 9, ColumnFamily.deserialize(reader), ColumnFamily));
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.attributes as any, reader, reader.readString, reader.readString));
                        break;
                    case 12:
                        reader.readMessage(message.partitioning_settings, () => message.partitioning_settings = PartitioningSettings.deserialize(reader));
                        break;
                    case 13:
                        message.key_bloom_filter = reader.readEnum();
                        break;
                    case 14:
                        reader.readMessage(message.read_replicas_settings, () => message.read_replicas_settings = ReadReplicasSettings.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.changefeeds, () => pb_1.Message.addToRepeatedWrapperField(message, 15, ChangefeedDescription.deserialize(reader), ChangefeedDescription));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTableResult {
            return DescribeTableResult.deserialize(bytes);
        }
    }
    export class Query extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            yql_text?: string;
            id?: never;
        } | {
            yql_text?: never;
            id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("yql_text" in data && data.yql_text != undefined) {
                    this.yql_text = data.yql_text;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get yql_text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set yql_text(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_yql_text() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get query() {
            const cases: {
                [index: number]: "none" | "yql_text" | "id";
            } = {
                0: "none",
                1: "yql_text",
                2: "id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            yql_text?: string;
            id?: string;
        }): Query {
            const message = new Query({});
            if (data.yql_text != null) {
                message.yql_text = data.yql_text;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                yql_text?: string;
                id?: string;
            } = {};
            if (this.yql_text != null) {
                data.yql_text = this.yql_text;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_yql_text)
                writer.writeString(1, this.yql_text);
            if (this.has_id)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Query {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Query();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.yql_text = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Query {
            return Query.deserialize(bytes);
        }
    }
    export class SerializableModeSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SerializableModeSettings {
            const message = new SerializableModeSettings({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SerializableModeSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SerializableModeSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SerializableModeSettings {
            return SerializableModeSettings.deserialize(bytes);
        }
    }
    export class OnlineModeSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            allow_inconsistent_reads?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("allow_inconsistent_reads" in data && data.allow_inconsistent_reads != undefined) {
                    this.allow_inconsistent_reads = data.allow_inconsistent_reads;
                }
            }
        }
        get allow_inconsistent_reads() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set allow_inconsistent_reads(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            allow_inconsistent_reads?: boolean;
        }): OnlineModeSettings {
            const message = new OnlineModeSettings({});
            if (data.allow_inconsistent_reads != null) {
                message.allow_inconsistent_reads = data.allow_inconsistent_reads;
            }
            return message;
        }
        toObject() {
            const data: {
                allow_inconsistent_reads?: boolean;
            } = {};
            if (this.allow_inconsistent_reads != null) {
                data.allow_inconsistent_reads = this.allow_inconsistent_reads;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.allow_inconsistent_reads != false)
                writer.writeBool(1, this.allow_inconsistent_reads);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineModeSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnlineModeSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.allow_inconsistent_reads = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OnlineModeSettings {
            return OnlineModeSettings.deserialize(bytes);
        }
    }
    export class StaleModeSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): StaleModeSettings {
            const message = new StaleModeSettings({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StaleModeSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StaleModeSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StaleModeSettings {
            return StaleModeSettings.deserialize(bytes);
        }
    }
    export class SnapshotModeSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SnapshotModeSettings {
            const message = new SnapshotModeSettings({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SnapshotModeSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SnapshotModeSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SnapshotModeSettings {
            return SnapshotModeSettings.deserialize(bytes);
        }
    }
    export class TransactionSettings extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            serializable_read_write?: SerializableModeSettings;
            online_read_only?: never;
            stale_read_only?: never;
            snapshot_read_only?: never;
        } | {
            serializable_read_write?: never;
            online_read_only?: OnlineModeSettings;
            stale_read_only?: never;
            snapshot_read_only?: never;
        } | {
            serializable_read_write?: never;
            online_read_only?: never;
            stale_read_only?: StaleModeSettings;
            snapshot_read_only?: never;
        } | {
            serializable_read_write?: never;
            online_read_only?: never;
            stale_read_only?: never;
            snapshot_read_only?: SnapshotModeSettings;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("serializable_read_write" in data && data.serializable_read_write != undefined) {
                    this.serializable_read_write = data.serializable_read_write;
                }
                if ("online_read_only" in data && data.online_read_only != undefined) {
                    this.online_read_only = data.online_read_only;
                }
                if ("stale_read_only" in data && data.stale_read_only != undefined) {
                    this.stale_read_only = data.stale_read_only;
                }
                if ("snapshot_read_only" in data && data.snapshot_read_only != undefined) {
                    this.snapshot_read_only = data.snapshot_read_only;
                }
            }
        }
        get serializable_read_write() {
            return pb_1.Message.getWrapperField(this, SerializableModeSettings, 1) as SerializableModeSettings;
        }
        set serializable_read_write(value: SerializableModeSettings) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_serializable_read_write() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get online_read_only() {
            return pb_1.Message.getWrapperField(this, OnlineModeSettings, 2) as OnlineModeSettings;
        }
        set online_read_only(value: OnlineModeSettings) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_online_read_only() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get stale_read_only() {
            return pb_1.Message.getWrapperField(this, StaleModeSettings, 3) as StaleModeSettings;
        }
        set stale_read_only(value: StaleModeSettings) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_stale_read_only() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get snapshot_read_only() {
            return pb_1.Message.getWrapperField(this, SnapshotModeSettings, 4) as SnapshotModeSettings;
        }
        set snapshot_read_only(value: SnapshotModeSettings) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_snapshot_read_only() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get tx_mode() {
            const cases: {
                [index: number]: "none" | "serializable_read_write" | "online_read_only" | "stale_read_only" | "snapshot_read_only";
            } = {
                0: "none",
                1: "serializable_read_write",
                2: "online_read_only",
                3: "stale_read_only",
                4: "snapshot_read_only"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            serializable_read_write?: ReturnType<typeof SerializableModeSettings.prototype.toObject>;
            online_read_only?: ReturnType<typeof OnlineModeSettings.prototype.toObject>;
            stale_read_only?: ReturnType<typeof StaleModeSettings.prototype.toObject>;
            snapshot_read_only?: ReturnType<typeof SnapshotModeSettings.prototype.toObject>;
        }): TransactionSettings {
            const message = new TransactionSettings({});
            if (data.serializable_read_write != null) {
                message.serializable_read_write = SerializableModeSettings.fromObject(data.serializable_read_write);
            }
            if (data.online_read_only != null) {
                message.online_read_only = OnlineModeSettings.fromObject(data.online_read_only);
            }
            if (data.stale_read_only != null) {
                message.stale_read_only = StaleModeSettings.fromObject(data.stale_read_only);
            }
            if (data.snapshot_read_only != null) {
                message.snapshot_read_only = SnapshotModeSettings.fromObject(data.snapshot_read_only);
            }
            return message;
        }
        toObject() {
            const data: {
                serializable_read_write?: ReturnType<typeof SerializableModeSettings.prototype.toObject>;
                online_read_only?: ReturnType<typeof OnlineModeSettings.prototype.toObject>;
                stale_read_only?: ReturnType<typeof StaleModeSettings.prototype.toObject>;
                snapshot_read_only?: ReturnType<typeof SnapshotModeSettings.prototype.toObject>;
            } = {};
            if (this.serializable_read_write != null) {
                data.serializable_read_write = this.serializable_read_write.toObject();
            }
            if (this.online_read_only != null) {
                data.online_read_only = this.online_read_only.toObject();
            }
            if (this.stale_read_only != null) {
                data.stale_read_only = this.stale_read_only.toObject();
            }
            if (this.snapshot_read_only != null) {
                data.snapshot_read_only = this.snapshot_read_only.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_serializable_read_write)
                writer.writeMessage(1, this.serializable_read_write, () => this.serializable_read_write.serialize(writer));
            if (this.has_online_read_only)
                writer.writeMessage(2, this.online_read_only, () => this.online_read_only.serialize(writer));
            if (this.has_stale_read_only)
                writer.writeMessage(3, this.stale_read_only, () => this.stale_read_only.serialize(writer));
            if (this.has_snapshot_read_only)
                writer.writeMessage(4, this.snapshot_read_only, () => this.snapshot_read_only.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.serializable_read_write, () => message.serializable_read_write = SerializableModeSettings.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.online_read_only, () => message.online_read_only = OnlineModeSettings.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.stale_read_only, () => message.stale_read_only = StaleModeSettings.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.snapshot_read_only, () => message.snapshot_read_only = SnapshotModeSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionSettings {
            return TransactionSettings.deserialize(bytes);
        }
    }
    export class TransactionControl extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            commit_tx?: boolean;
        } & (({
            tx_id?: string;
            begin_tx?: never;
        } | {
            tx_id?: never;
            begin_tx?: TransactionSettings;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_id" in data && data.tx_id != undefined) {
                    this.tx_id = data.tx_id;
                }
                if ("begin_tx" in data && data.begin_tx != undefined) {
                    this.begin_tx = data.begin_tx;
                }
                if ("commit_tx" in data && data.commit_tx != undefined) {
                    this.commit_tx = data.commit_tx;
                }
            }
        }
        get tx_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tx_id(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_tx_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get begin_tx() {
            return pb_1.Message.getWrapperField(this, TransactionSettings, 2) as TransactionSettings;
        }
        set begin_tx(value: TransactionSettings) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_begin_tx() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get commit_tx() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set commit_tx(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get tx_selector() {
            const cases: {
                [index: number]: "none" | "tx_id" | "begin_tx";
            } = {
                0: "none",
                1: "tx_id",
                2: "begin_tx"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            tx_id?: string;
            begin_tx?: ReturnType<typeof TransactionSettings.prototype.toObject>;
            commit_tx?: boolean;
        }): TransactionControl {
            const message = new TransactionControl({});
            if (data.tx_id != null) {
                message.tx_id = data.tx_id;
            }
            if (data.begin_tx != null) {
                message.begin_tx = TransactionSettings.fromObject(data.begin_tx);
            }
            if (data.commit_tx != null) {
                message.commit_tx = data.commit_tx;
            }
            return message;
        }
        toObject() {
            const data: {
                tx_id?: string;
                begin_tx?: ReturnType<typeof TransactionSettings.prototype.toObject>;
                commit_tx?: boolean;
            } = {};
            if (this.tx_id != null) {
                data.tx_id = this.tx_id;
            }
            if (this.begin_tx != null) {
                data.begin_tx = this.begin_tx.toObject();
            }
            if (this.commit_tx != null) {
                data.commit_tx = this.commit_tx;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tx_id)
                writer.writeString(1, this.tx_id);
            if (this.has_begin_tx)
                writer.writeMessage(2, this.begin_tx, () => this.begin_tx.serialize(writer));
            if (this.commit_tx != false)
                writer.writeBool(10, this.commit_tx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionControl {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionControl();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tx_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.begin_tx, () => message.begin_tx = TransactionSettings.deserialize(reader));
                        break;
                    case 10:
                        message.commit_tx = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionControl {
            return TransactionControl.deserialize(bytes);
        }
    }
    export class QueryCachePolicy extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            keep_in_cache?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("keep_in_cache" in data && data.keep_in_cache != undefined) {
                    this.keep_in_cache = data.keep_in_cache;
                }
            }
        }
        get keep_in_cache() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set keep_in_cache(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            keep_in_cache?: boolean;
        }): QueryCachePolicy {
            const message = new QueryCachePolicy({});
            if (data.keep_in_cache != null) {
                message.keep_in_cache = data.keep_in_cache;
            }
            return message;
        }
        toObject() {
            const data: {
                keep_in_cache?: boolean;
            } = {};
            if (this.keep_in_cache != null) {
                data.keep_in_cache = this.keep_in_cache;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.keep_in_cache != false)
                writer.writeBool(1, this.keep_in_cache);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCachePolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCachePolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.keep_in_cache = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCachePolicy {
            return QueryCachePolicy.deserialize(bytes);
        }
    }
    export class QueryStatsCollection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryStatsCollection {
            const message = new QueryStatsCollection({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryStatsCollection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryStatsCollection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryStatsCollection {
            return QueryStatsCollection.deserialize(bytes);
        }
    }
    export namespace QueryStatsCollection {
        export enum Mode {
            STATS_COLLECTION_UNSPECIFIED = 0,
            STATS_COLLECTION_NONE = 1,
            STATS_COLLECTION_BASIC = 2,
            STATS_COLLECTION_FULL = 3,
            STATS_COLLECTION_PROFILE = 4
        }
    }
    export class ExecuteDataQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            tx_control?: TransactionControl;
            query?: Query;
            parameters?: Map<string, dependency_6.Ydb.TypedValue>;
            query_cache_policy?: QueryCachePolicy;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
            collect_stats?: QueryStatsCollection.Mode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("tx_control" in data && data.tx_control != undefined) {
                    this.tx_control = data.tx_control;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
                if ("query_cache_policy" in data && data.query_cache_policy != undefined) {
                    this.query_cache_policy = data.query_cache_policy;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("collect_stats" in data && data.collect_stats != undefined) {
                    this.collect_stats = data.collect_stats;
                }
            }
            if (!this.parameters)
                this.parameters = new Map();
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_control() {
            return pb_1.Message.getWrapperField(this, TransactionControl, 2) as TransactionControl;
        }
        set tx_control(value: TransactionControl) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_tx_control() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get query() {
            return pb_1.Message.getWrapperField(this, Query, 3) as Query;
        }
        set query(value: Query) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get parameters() {
            return pb_1.Message.getField(this, 4) as any as Map<string, dependency_6.Ydb.TypedValue>;
        }
        set parameters(value: Map<string, dependency_6.Ydb.TypedValue>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get query_cache_policy() {
            return pb_1.Message.getWrapperField(this, QueryCachePolicy, 5) as QueryCachePolicy;
        }
        set query_cache_policy(value: QueryCachePolicy) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_query_cache_policy() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 6) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get collect_stats() {
            return pb_1.Message.getFieldWithDefault(this, 7, QueryStatsCollection.Mode.STATS_COLLECTION_UNSPECIFIED) as QueryStatsCollection.Mode;
        }
        set collect_stats(value: QueryStatsCollection.Mode) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            session_id?: string;
            tx_control?: ReturnType<typeof TransactionControl.prototype.toObject>;
            query?: ReturnType<typeof Query.prototype.toObject>;
            parameters?: {
                [key: string]: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
            };
            query_cache_policy?: ReturnType<typeof QueryCachePolicy.prototype.toObject>;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            collect_stats?: QueryStatsCollection.Mode;
        }): ExecuteDataQueryRequest {
            const message = new ExecuteDataQueryRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.tx_control != null) {
                message.tx_control = TransactionControl.fromObject(data.tx_control);
            }
            if (data.query != null) {
                message.query = Query.fromObject(data.query);
            }
            if (typeof data.parameters == "object") {
                message.parameters = new Map(Object.entries(data.parameters).map(([key, value]) => [key, dependency_6.Ydb.TypedValue.fromObject(value)]));
            }
            if (data.query_cache_policy != null) {
                message.query_cache_policy = QueryCachePolicy.fromObject(data.query_cache_policy);
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.collect_stats != null) {
                message.collect_stats = data.collect_stats;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                tx_control?: ReturnType<typeof TransactionControl.prototype.toObject>;
                query?: ReturnType<typeof Query.prototype.toObject>;
                parameters?: {
                    [key: string]: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
                };
                query_cache_policy?: ReturnType<typeof QueryCachePolicy.prototype.toObject>;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
                collect_stats?: QueryStatsCollection.Mode;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.tx_control != null) {
                data.tx_control = this.tx_control.toObject();
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.parameters != null) {
                data.parameters = (Object.fromEntries)((Array.from)(this.parameters).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.query_cache_policy != null) {
                data.query_cache_policy = this.query_cache_policy.toObject();
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.collect_stats != null) {
                data.collect_stats = this.collect_stats;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.has_tx_control)
                writer.writeMessage(2, this.tx_control, () => this.tx_control.serialize(writer));
            if (this.has_query)
                writer.writeMessage(3, this.query, () => this.query.serialize(writer));
            for (const [key, value] of this.parameters) {
                writer.writeMessage(4, this.parameters, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.has_query_cache_policy)
                writer.writeMessage(5, this.query_cache_policy, () => this.query_cache_policy.serialize(writer));
            if (this.has_operation_params)
                writer.writeMessage(6, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.collect_stats != QueryStatsCollection.Mode.STATS_COLLECTION_UNSPECIFIED)
                writer.writeEnum(7, this.collect_stats);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteDataQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteDataQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.tx_control, () => message.tx_control = TransactionControl.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.query, () => message.query = Query.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.parameters as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_6.Ydb.TypedValue.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 5:
                        reader.readMessage(message.query_cache_policy, () => message.query_cache_policy = QueryCachePolicy.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 7:
                        message.collect_stats = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteDataQueryRequest {
            return ExecuteDataQueryRequest.deserialize(bytes);
        }
    }
    export class ExecuteDataQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): ExecuteDataQueryResponse {
            const message = new ExecuteDataQueryResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteDataQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteDataQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteDataQueryResponse {
            return ExecuteDataQueryResponse.deserialize(bytes);
        }
    }
    export class ExecuteSchemeQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            yql_text?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("yql_text" in data && data.yql_text != undefined) {
                    this.yql_text = data.yql_text;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get yql_text() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set yql_text(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 3) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session_id?: string;
            yql_text?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): ExecuteSchemeQueryRequest {
            const message = new ExecuteSchemeQueryRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.yql_text != null) {
                message.yql_text = data.yql_text;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                yql_text?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.yql_text != null) {
                data.yql_text = this.yql_text;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.yql_text.length)
                writer.writeString(2, this.yql_text);
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteSchemeQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteSchemeQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.yql_text = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteSchemeQueryRequest {
            return ExecuteSchemeQueryRequest.deserialize(bytes);
        }
    }
    export class ExecuteSchemeQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): ExecuteSchemeQueryResponse {
            const message = new ExecuteSchemeQueryResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteSchemeQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteSchemeQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteSchemeQueryResponse {
            return ExecuteSchemeQueryResponse.deserialize(bytes);
        }
    }
    export class TransactionMeta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): TransactionMeta {
            const message = new TransactionMeta({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionMeta {
            return TransactionMeta.deserialize(bytes);
        }
    }
    export class QueryMeta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            parameters_types?: Map<string, dependency_6.Ydb.Type>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("parameters_types" in data && data.parameters_types != undefined) {
                    this.parameters_types = data.parameters_types;
                }
            }
            if (!this.parameters_types)
                this.parameters_types = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get parameters_types() {
            return pb_1.Message.getField(this, 2) as any as Map<string, dependency_6.Ydb.Type>;
        }
        set parameters_types(value: Map<string, dependency_6.Ydb.Type>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            id?: string;
            parameters_types?: {
                [key: string]: ReturnType<typeof dependency_6.Ydb.Type.prototype.toObject>;
            };
        }): QueryMeta {
            const message = new QueryMeta({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (typeof data.parameters_types == "object") {
                message.parameters_types = new Map(Object.entries(data.parameters_types).map(([key, value]) => [key, dependency_6.Ydb.Type.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                parameters_types?: {
                    [key: string]: ReturnType<typeof dependency_6.Ydb.Type.prototype.toObject>;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.parameters_types != null) {
                data.parameters_types = (Object.fromEntries)((Array.from)(this.parameters_types).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            for (const [key, value] of this.parameters_types) {
                writer.writeMessage(2, this.parameters_types, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.parameters_types as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_6.Ydb.Type.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryMeta {
            return QueryMeta.deserialize(bytes);
        }
    }
    export class ExecuteQueryResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result_sets?: dependency_6.Ydb.ResultSet[];
            tx_meta?: TransactionMeta;
            query_meta?: QueryMeta;
            query_stats?: dependency_5.Ydb.TableStats.QueryStats;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result_sets" in data && data.result_sets != undefined) {
                    this.result_sets = data.result_sets;
                }
                if ("tx_meta" in data && data.tx_meta != undefined) {
                    this.tx_meta = data.tx_meta;
                }
                if ("query_meta" in data && data.query_meta != undefined) {
                    this.query_meta = data.query_meta;
                }
                if ("query_stats" in data && data.query_stats != undefined) {
                    this.query_stats = data.query_stats;
                }
            }
        }
        get result_sets() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.Ydb.ResultSet, 1) as dependency_6.Ydb.ResultSet[];
        }
        set result_sets(value: dependency_6.Ydb.ResultSet[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get tx_meta() {
            return pb_1.Message.getWrapperField(this, TransactionMeta, 2) as TransactionMeta;
        }
        set tx_meta(value: TransactionMeta) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_tx_meta() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get query_meta() {
            return pb_1.Message.getWrapperField(this, QueryMeta, 3) as QueryMeta;
        }
        set query_meta(value: QueryMeta) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_query_meta() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get query_stats() {
            return pb_1.Message.getWrapperField(this, dependency_5.Ydb.TableStats.QueryStats, 4) as dependency_5.Ydb.TableStats.QueryStats;
        }
        set query_stats(value: dependency_5.Ydb.TableStats.QueryStats) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_query_stats() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            result_sets?: ReturnType<typeof dependency_6.Ydb.ResultSet.prototype.toObject>[];
            tx_meta?: ReturnType<typeof TransactionMeta.prototype.toObject>;
            query_meta?: ReturnType<typeof QueryMeta.prototype.toObject>;
            query_stats?: ReturnType<typeof dependency_5.Ydb.TableStats.QueryStats.prototype.toObject>;
        }): ExecuteQueryResult {
            const message = new ExecuteQueryResult({});
            if (data.result_sets != null) {
                message.result_sets = data.result_sets.map(item => dependency_6.Ydb.ResultSet.fromObject(item));
            }
            if (data.tx_meta != null) {
                message.tx_meta = TransactionMeta.fromObject(data.tx_meta);
            }
            if (data.query_meta != null) {
                message.query_meta = QueryMeta.fromObject(data.query_meta);
            }
            if (data.query_stats != null) {
                message.query_stats = dependency_5.Ydb.TableStats.QueryStats.fromObject(data.query_stats);
            }
            return message;
        }
        toObject() {
            const data: {
                result_sets?: ReturnType<typeof dependency_6.Ydb.ResultSet.prototype.toObject>[];
                tx_meta?: ReturnType<typeof TransactionMeta.prototype.toObject>;
                query_meta?: ReturnType<typeof QueryMeta.prototype.toObject>;
                query_stats?: ReturnType<typeof dependency_5.Ydb.TableStats.QueryStats.prototype.toObject>;
            } = {};
            if (this.result_sets != null) {
                data.result_sets = this.result_sets.map((item: dependency_6.Ydb.ResultSet) => item.toObject());
            }
            if (this.tx_meta != null) {
                data.tx_meta = this.tx_meta.toObject();
            }
            if (this.query_meta != null) {
                data.query_meta = this.query_meta.toObject();
            }
            if (this.query_stats != null) {
                data.query_stats = this.query_stats.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result_sets.length)
                writer.writeRepeatedMessage(1, this.result_sets, (item: dependency_6.Ydb.ResultSet) => item.serialize(writer));
            if (this.has_tx_meta)
                writer.writeMessage(2, this.tx_meta, () => this.tx_meta.serialize(writer));
            if (this.has_query_meta)
                writer.writeMessage(3, this.query_meta, () => this.query_meta.serialize(writer));
            if (this.has_query_stats)
                writer.writeMessage(4, this.query_stats, () => this.query_stats.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteQueryResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteQueryResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.result_sets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_6.Ydb.ResultSet.deserialize(reader), dependency_6.Ydb.ResultSet));
                        break;
                    case 2:
                        reader.readMessage(message.tx_meta, () => message.tx_meta = TransactionMeta.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.query_meta, () => message.query_meta = QueryMeta.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.query_stats, () => message.query_stats = dependency_5.Ydb.TableStats.QueryStats.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteQueryResult {
            return ExecuteQueryResult.deserialize(bytes);
        }
    }
    export class ExplainDataQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            yql_text?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("yql_text" in data && data.yql_text != undefined) {
                    this.yql_text = data.yql_text;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get yql_text() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set yql_text(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 3) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session_id?: string;
            yql_text?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): ExplainDataQueryRequest {
            const message = new ExplainDataQueryRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.yql_text != null) {
                message.yql_text = data.yql_text;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                yql_text?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.yql_text != null) {
                data.yql_text = this.yql_text;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.yql_text.length)
                writer.writeString(2, this.yql_text);
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExplainDataQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExplainDataQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.yql_text = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExplainDataQueryRequest {
            return ExplainDataQueryRequest.deserialize(bytes);
        }
    }
    export class ExplainDataQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): ExplainDataQueryResponse {
            const message = new ExplainDataQueryResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExplainDataQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExplainDataQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExplainDataQueryResponse {
            return ExplainDataQueryResponse.deserialize(bytes);
        }
    }
    export class ExplainQueryResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query_ast?: string;
            query_plan?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query_ast" in data && data.query_ast != undefined) {
                    this.query_ast = data.query_ast;
                }
                if ("query_plan" in data && data.query_plan != undefined) {
                    this.query_plan = data.query_plan;
                }
            }
        }
        get query_ast() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set query_ast(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get query_plan() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set query_plan(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            query_ast?: string;
            query_plan?: string;
        }): ExplainQueryResult {
            const message = new ExplainQueryResult({});
            if (data.query_ast != null) {
                message.query_ast = data.query_ast;
            }
            if (data.query_plan != null) {
                message.query_plan = data.query_plan;
            }
            return message;
        }
        toObject() {
            const data: {
                query_ast?: string;
                query_plan?: string;
            } = {};
            if (this.query_ast != null) {
                data.query_ast = this.query_ast;
            }
            if (this.query_plan != null) {
                data.query_plan = this.query_plan;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query_ast.length)
                writer.writeString(1, this.query_ast);
            if (this.query_plan.length)
                writer.writeString(2, this.query_plan);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExplainQueryResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExplainQueryResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.query_ast = reader.readString();
                        break;
                    case 2:
                        message.query_plan = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExplainQueryResult {
            return ExplainQueryResult.deserialize(bytes);
        }
    }
    export class PrepareDataQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            yql_text?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("yql_text" in data && data.yql_text != undefined) {
                    this.yql_text = data.yql_text;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get yql_text() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set yql_text(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 3) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session_id?: string;
            yql_text?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): PrepareDataQueryRequest {
            const message = new PrepareDataQueryRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.yql_text != null) {
                message.yql_text = data.yql_text;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                yql_text?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.yql_text != null) {
                data.yql_text = this.yql_text;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.yql_text.length)
                writer.writeString(2, this.yql_text);
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareDataQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareDataQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.yql_text = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareDataQueryRequest {
            return PrepareDataQueryRequest.deserialize(bytes);
        }
    }
    export class PrepareDataQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): PrepareDataQueryResponse {
            const message = new PrepareDataQueryResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareDataQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareDataQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareDataQueryResponse {
            return PrepareDataQueryResponse.deserialize(bytes);
        }
    }
    export class PrepareQueryResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query_id?: string;
            parameters_types?: Map<string, dependency_6.Ydb.Type>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query_id" in data && data.query_id != undefined) {
                    this.query_id = data.query_id;
                }
                if ("parameters_types" in data && data.parameters_types != undefined) {
                    this.parameters_types = data.parameters_types;
                }
            }
            if (!this.parameters_types)
                this.parameters_types = new Map();
        }
        get query_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set query_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get parameters_types() {
            return pb_1.Message.getField(this, 2) as any as Map<string, dependency_6.Ydb.Type>;
        }
        set parameters_types(value: Map<string, dependency_6.Ydb.Type>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            query_id?: string;
            parameters_types?: {
                [key: string]: ReturnType<typeof dependency_6.Ydb.Type.prototype.toObject>;
            };
        }): PrepareQueryResult {
            const message = new PrepareQueryResult({});
            if (data.query_id != null) {
                message.query_id = data.query_id;
            }
            if (typeof data.parameters_types == "object") {
                message.parameters_types = new Map(Object.entries(data.parameters_types).map(([key, value]) => [key, dependency_6.Ydb.Type.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                query_id?: string;
                parameters_types?: {
                    [key: string]: ReturnType<typeof dependency_6.Ydb.Type.prototype.toObject>;
                };
            } = {};
            if (this.query_id != null) {
                data.query_id = this.query_id;
            }
            if (this.parameters_types != null) {
                data.parameters_types = (Object.fromEntries)((Array.from)(this.parameters_types).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query_id.length)
                writer.writeString(1, this.query_id);
            for (const [key, value] of this.parameters_types) {
                writer.writeMessage(2, this.parameters_types, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareQueryResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareQueryResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.query_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.parameters_types as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_6.Ydb.Type.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrepareQueryResult {
            return PrepareQueryResult.deserialize(bytes);
        }
    }
    export class KeepAliveRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 2) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            session_id?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): KeepAliveRequest {
            const message = new KeepAliveRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.has_operation_params)
                writer.writeMessage(2, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeepAliveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeepAliveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeepAliveRequest {
            return KeepAliveRequest.deserialize(bytes);
        }
    }
    export class KeepAliveResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): KeepAliveResponse {
            const message = new KeepAliveResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeepAliveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeepAliveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeepAliveResponse {
            return KeepAliveResponse.deserialize(bytes);
        }
    }
    export class KeepAliveResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_status?: KeepAliveResult.SessionStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_status" in data && data.session_status != undefined) {
                    this.session_status = data.session_status;
                }
            }
        }
        get session_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, KeepAliveResult.SessionStatus.SESSION_STATUS_UNSPECIFIED) as KeepAliveResult.SessionStatus;
        }
        set session_status(value: KeepAliveResult.SessionStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            session_status?: KeepAliveResult.SessionStatus;
        }): KeepAliveResult {
            const message = new KeepAliveResult({});
            if (data.session_status != null) {
                message.session_status = data.session_status;
            }
            return message;
        }
        toObject() {
            const data: {
                session_status?: KeepAliveResult.SessionStatus;
            } = {};
            if (this.session_status != null) {
                data.session_status = this.session_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_status != KeepAliveResult.SessionStatus.SESSION_STATUS_UNSPECIFIED)
                writer.writeEnum(1, this.session_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeepAliveResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeepAliveResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeepAliveResult {
            return KeepAliveResult.deserialize(bytes);
        }
    }
    export namespace KeepAliveResult {
        export enum SessionStatus {
            SESSION_STATUS_UNSPECIFIED = 0,
            SESSION_STATUS_READY = 1,
            SESSION_STATUS_BUSY = 2
        }
    }
    export class BeginTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            tx_settings?: TransactionSettings;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("tx_settings" in data && data.tx_settings != undefined) {
                    this.tx_settings = data.tx_settings;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_settings() {
            return pb_1.Message.getWrapperField(this, TransactionSettings, 2) as TransactionSettings;
        }
        set tx_settings(value: TransactionSettings) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_tx_settings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 3) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session_id?: string;
            tx_settings?: ReturnType<typeof TransactionSettings.prototype.toObject>;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): BeginTransactionRequest {
            const message = new BeginTransactionRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.tx_settings != null) {
                message.tx_settings = TransactionSettings.fromObject(data.tx_settings);
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                tx_settings?: ReturnType<typeof TransactionSettings.prototype.toObject>;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.tx_settings != null) {
                data.tx_settings = this.tx_settings.toObject();
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.has_tx_settings)
                writer.writeMessage(2, this.tx_settings, () => this.tx_settings.serialize(writer));
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeginTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeginTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.tx_settings, () => message.tx_settings = TransactionSettings.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeginTransactionRequest {
            return BeginTransactionRequest.deserialize(bytes);
        }
    }
    export class BeginTransactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): BeginTransactionResponse {
            const message = new BeginTransactionResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeginTransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeginTransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeginTransactionResponse {
            return BeginTransactionResponse.deserialize(bytes);
        }
    }
    export class BeginTransactionResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_meta?: TransactionMeta;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_meta" in data && data.tx_meta != undefined) {
                    this.tx_meta = data.tx_meta;
                }
            }
        }
        get tx_meta() {
            return pb_1.Message.getWrapperField(this, TransactionMeta, 1) as TransactionMeta;
        }
        set tx_meta(value: TransactionMeta) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_tx_meta() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            tx_meta?: ReturnType<typeof TransactionMeta.prototype.toObject>;
        }): BeginTransactionResult {
            const message = new BeginTransactionResult({});
            if (data.tx_meta != null) {
                message.tx_meta = TransactionMeta.fromObject(data.tx_meta);
            }
            return message;
        }
        toObject() {
            const data: {
                tx_meta?: ReturnType<typeof TransactionMeta.prototype.toObject>;
            } = {};
            if (this.tx_meta != null) {
                data.tx_meta = this.tx_meta.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_tx_meta)
                writer.writeMessage(1, this.tx_meta, () => this.tx_meta.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BeginTransactionResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BeginTransactionResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx_meta, () => message.tx_meta = TransactionMeta.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BeginTransactionResult {
            return BeginTransactionResult.deserialize(bytes);
        }
    }
    export class CommitTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            tx_id?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
            collect_stats?: QueryStatsCollection.Mode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("tx_id" in data && data.tx_id != undefined) {
                    this.tx_id = data.tx_id;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("collect_stats" in data && data.collect_stats != undefined) {
                    this.collect_stats = data.collect_stats;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tx_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 3) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get collect_stats() {
            return pb_1.Message.getFieldWithDefault(this, 4, QueryStatsCollection.Mode.STATS_COLLECTION_UNSPECIFIED) as QueryStatsCollection.Mode;
        }
        set collect_stats(value: QueryStatsCollection.Mode) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            session_id?: string;
            tx_id?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            collect_stats?: QueryStatsCollection.Mode;
        }): CommitTransactionRequest {
            const message = new CommitTransactionRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.tx_id != null) {
                message.tx_id = data.tx_id;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.collect_stats != null) {
                message.collect_stats = data.collect_stats;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                tx_id?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
                collect_stats?: QueryStatsCollection.Mode;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.tx_id != null) {
                data.tx_id = this.tx_id;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.collect_stats != null) {
                data.collect_stats = this.collect_stats;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.tx_id.length)
                writer.writeString(2, this.tx_id);
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.collect_stats != QueryStatsCollection.Mode.STATS_COLLECTION_UNSPECIFIED)
                writer.writeEnum(4, this.collect_stats);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.tx_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 4:
                        message.collect_stats = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitTransactionRequest {
            return CommitTransactionRequest.deserialize(bytes);
        }
    }
    export class CommitTransactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): CommitTransactionResponse {
            const message = new CommitTransactionResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitTransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitTransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitTransactionResponse {
            return CommitTransactionResponse.deserialize(bytes);
        }
    }
    export class CommitTransactionResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query_stats?: dependency_5.Ydb.TableStats.QueryStats;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query_stats" in data && data.query_stats != undefined) {
                    this.query_stats = data.query_stats;
                }
            }
        }
        get query_stats() {
            return pb_1.Message.getWrapperField(this, dependency_5.Ydb.TableStats.QueryStats, 1) as dependency_5.Ydb.TableStats.QueryStats;
        }
        set query_stats(value: dependency_5.Ydb.TableStats.QueryStats) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_query_stats() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            query_stats?: ReturnType<typeof dependency_5.Ydb.TableStats.QueryStats.prototype.toObject>;
        }): CommitTransactionResult {
            const message = new CommitTransactionResult({});
            if (data.query_stats != null) {
                message.query_stats = dependency_5.Ydb.TableStats.QueryStats.fromObject(data.query_stats);
            }
            return message;
        }
        toObject() {
            const data: {
                query_stats?: ReturnType<typeof dependency_5.Ydb.TableStats.QueryStats.prototype.toObject>;
            } = {};
            if (this.query_stats != null) {
                data.query_stats = this.query_stats.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_query_stats)
                writer.writeMessage(1, this.query_stats, () => this.query_stats.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommitTransactionResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitTransactionResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.query_stats, () => message.query_stats = dependency_5.Ydb.TableStats.QueryStats.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommitTransactionResult {
            return CommitTransactionResult.deserialize(bytes);
        }
    }
    export class RollbackTransactionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            tx_id?: string;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("tx_id" in data && data.tx_id != undefined) {
                    this.tx_id = data.tx_id;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tx_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 3) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            session_id?: string;
            tx_id?: string;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): RollbackTransactionRequest {
            const message = new RollbackTransactionRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.tx_id != null) {
                message.tx_id = data.tx_id;
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                tx_id?: string;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.tx_id != null) {
                data.tx_id = this.tx_id;
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.tx_id.length)
                writer.writeString(2, this.tx_id);
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RollbackTransactionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RollbackTransactionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.tx_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RollbackTransactionRequest {
            return RollbackTransactionRequest.deserialize(bytes);
        }
    }
    export class RollbackTransactionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): RollbackTransactionResponse {
            const message = new RollbackTransactionResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RollbackTransactionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RollbackTransactionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RollbackTransactionResponse {
            return RollbackTransactionResponse.deserialize(bytes);
        }
    }
    export class StoragePolicyDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            name?: string;
            labels?: {
                [key: string]: string;
            };
        }): StoragePolicyDescription {
            const message = new StoragePolicyDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoragePolicyDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoragePolicyDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoragePolicyDescription {
            return StoragePolicyDescription.deserialize(bytes);
        }
    }
    export class CompactionPolicyDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            name?: string;
            labels?: {
                [key: string]: string;
            };
        }): CompactionPolicyDescription {
            const message = new CompactionPolicyDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompactionPolicyDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompactionPolicyDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompactionPolicyDescription {
            return CompactionPolicyDescription.deserialize(bytes);
        }
    }
    export class PartitioningPolicyDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            name?: string;
            labels?: {
                [key: string]: string;
            };
        }): PartitioningPolicyDescription {
            const message = new PartitioningPolicyDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PartitioningPolicyDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartitioningPolicyDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PartitioningPolicyDescription {
            return PartitioningPolicyDescription.deserialize(bytes);
        }
    }
    export class ExecutionPolicyDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            name?: string;
            labels?: {
                [key: string]: string;
            };
        }): ExecutionPolicyDescription {
            const message = new ExecutionPolicyDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecutionPolicyDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecutionPolicyDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecutionPolicyDescription {
            return ExecutionPolicyDescription.deserialize(bytes);
        }
    }
    export class ReplicationPolicyDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            name?: string;
            labels?: {
                [key: string]: string;
            };
        }): ReplicationPolicyDescription {
            const message = new ReplicationPolicyDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplicationPolicyDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplicationPolicyDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplicationPolicyDescription {
            return ReplicationPolicyDescription.deserialize(bytes);
        }
    }
    export class CachingPolicyDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            name?: string;
            labels?: {
                [key: string]: string;
            };
        }): CachingPolicyDescription {
            const message = new CachingPolicyDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CachingPolicyDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CachingPolicyDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CachingPolicyDescription {
            return CachingPolicyDescription.deserialize(bytes);
        }
    }
    export class TableProfileDescription extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            labels?: Map<string, string>;
            default_storage_policy?: string;
            allowed_storage_policies?: string[];
            default_compaction_policy?: string;
            allowed_compaction_policies?: string[];
            default_partitioning_policy?: string;
            allowed_partitioning_policies?: string[];
            default_execution_policy?: string;
            allowed_execution_policies?: string[];
            default_replication_policy?: string;
            allowed_replication_policies?: string[];
            default_caching_policy?: string;
            allowed_caching_policies?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6, 8, 10, 12, 14], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
                if ("default_storage_policy" in data && data.default_storage_policy != undefined) {
                    this.default_storage_policy = data.default_storage_policy;
                }
                if ("allowed_storage_policies" in data && data.allowed_storage_policies != undefined) {
                    this.allowed_storage_policies = data.allowed_storage_policies;
                }
                if ("default_compaction_policy" in data && data.default_compaction_policy != undefined) {
                    this.default_compaction_policy = data.default_compaction_policy;
                }
                if ("allowed_compaction_policies" in data && data.allowed_compaction_policies != undefined) {
                    this.allowed_compaction_policies = data.allowed_compaction_policies;
                }
                if ("default_partitioning_policy" in data && data.default_partitioning_policy != undefined) {
                    this.default_partitioning_policy = data.default_partitioning_policy;
                }
                if ("allowed_partitioning_policies" in data && data.allowed_partitioning_policies != undefined) {
                    this.allowed_partitioning_policies = data.allowed_partitioning_policies;
                }
                if ("default_execution_policy" in data && data.default_execution_policy != undefined) {
                    this.default_execution_policy = data.default_execution_policy;
                }
                if ("allowed_execution_policies" in data && data.allowed_execution_policies != undefined) {
                    this.allowed_execution_policies = data.allowed_execution_policies;
                }
                if ("default_replication_policy" in data && data.default_replication_policy != undefined) {
                    this.default_replication_policy = data.default_replication_policy;
                }
                if ("allowed_replication_policies" in data && data.allowed_replication_policies != undefined) {
                    this.allowed_replication_policies = data.allowed_replication_policies;
                }
                if ("default_caching_policy" in data && data.default_caching_policy != undefined) {
                    this.default_caching_policy = data.default_caching_policy;
                }
                if ("allowed_caching_policies" in data && data.allowed_caching_policies != undefined) {
                    this.allowed_caching_policies = data.allowed_caching_policies;
                }
            }
            if (!this.labels)
                this.labels = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labels() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set labels(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get default_storage_policy() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set default_storage_policy(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get allowed_storage_policies() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set allowed_storage_policies(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get default_compaction_policy() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set default_compaction_policy(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get allowed_compaction_policies() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set allowed_compaction_policies(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get default_partitioning_policy() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set default_partitioning_policy(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get allowed_partitioning_policies() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set allowed_partitioning_policies(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get default_execution_policy() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set default_execution_policy(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get allowed_execution_policies() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set allowed_execution_policies(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get default_replication_policy() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set default_replication_policy(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get allowed_replication_policies() {
            return pb_1.Message.getFieldWithDefault(this, 12, []) as string[];
        }
        set allowed_replication_policies(value: string[]) {
            pb_1.Message.setField(this, 12, value);
        }
        get default_caching_policy() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set default_caching_policy(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get allowed_caching_policies() {
            return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
        }
        set allowed_caching_policies(value: string[]) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            name?: string;
            labels?: {
                [key: string]: string;
            };
            default_storage_policy?: string;
            allowed_storage_policies?: string[];
            default_compaction_policy?: string;
            allowed_compaction_policies?: string[];
            default_partitioning_policy?: string;
            allowed_partitioning_policies?: string[];
            default_execution_policy?: string;
            allowed_execution_policies?: string[];
            default_replication_policy?: string;
            allowed_replication_policies?: string[];
            default_caching_policy?: string;
            allowed_caching_policies?: string[];
        }): TableProfileDescription {
            const message = new TableProfileDescription({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (typeof data.labels == "object") {
                message.labels = new Map(Object.entries(data.labels));
            }
            if (data.default_storage_policy != null) {
                message.default_storage_policy = data.default_storage_policy;
            }
            if (data.allowed_storage_policies != null) {
                message.allowed_storage_policies = data.allowed_storage_policies;
            }
            if (data.default_compaction_policy != null) {
                message.default_compaction_policy = data.default_compaction_policy;
            }
            if (data.allowed_compaction_policies != null) {
                message.allowed_compaction_policies = data.allowed_compaction_policies;
            }
            if (data.default_partitioning_policy != null) {
                message.default_partitioning_policy = data.default_partitioning_policy;
            }
            if (data.allowed_partitioning_policies != null) {
                message.allowed_partitioning_policies = data.allowed_partitioning_policies;
            }
            if (data.default_execution_policy != null) {
                message.default_execution_policy = data.default_execution_policy;
            }
            if (data.allowed_execution_policies != null) {
                message.allowed_execution_policies = data.allowed_execution_policies;
            }
            if (data.default_replication_policy != null) {
                message.default_replication_policy = data.default_replication_policy;
            }
            if (data.allowed_replication_policies != null) {
                message.allowed_replication_policies = data.allowed_replication_policies;
            }
            if (data.default_caching_policy != null) {
                message.default_caching_policy = data.default_caching_policy;
            }
            if (data.allowed_caching_policies != null) {
                message.allowed_caching_policies = data.allowed_caching_policies;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                labels?: {
                    [key: string]: string;
                };
                default_storage_policy?: string;
                allowed_storage_policies?: string[];
                default_compaction_policy?: string;
                allowed_compaction_policies?: string[];
                default_partitioning_policy?: string;
                allowed_partitioning_policies?: string[];
                default_execution_policy?: string;
                allowed_execution_policies?: string[];
                default_replication_policy?: string;
                allowed_replication_policies?: string[];
                default_caching_policy?: string;
                allowed_caching_policies?: string[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.labels != null) {
                data.labels = (Object.fromEntries)(this.labels);
            }
            if (this.default_storage_policy != null) {
                data.default_storage_policy = this.default_storage_policy;
            }
            if (this.allowed_storage_policies != null) {
                data.allowed_storage_policies = this.allowed_storage_policies;
            }
            if (this.default_compaction_policy != null) {
                data.default_compaction_policy = this.default_compaction_policy;
            }
            if (this.allowed_compaction_policies != null) {
                data.allowed_compaction_policies = this.allowed_compaction_policies;
            }
            if (this.default_partitioning_policy != null) {
                data.default_partitioning_policy = this.default_partitioning_policy;
            }
            if (this.allowed_partitioning_policies != null) {
                data.allowed_partitioning_policies = this.allowed_partitioning_policies;
            }
            if (this.default_execution_policy != null) {
                data.default_execution_policy = this.default_execution_policy;
            }
            if (this.allowed_execution_policies != null) {
                data.allowed_execution_policies = this.allowed_execution_policies;
            }
            if (this.default_replication_policy != null) {
                data.default_replication_policy = this.default_replication_policy;
            }
            if (this.allowed_replication_policies != null) {
                data.allowed_replication_policies = this.allowed_replication_policies;
            }
            if (this.default_caching_policy != null) {
                data.default_caching_policy = this.default_caching_policy;
            }
            if (this.allowed_caching_policies != null) {
                data.allowed_caching_policies = this.allowed_caching_policies;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            for (const [key, value] of this.labels) {
                writer.writeMessage(2, this.labels, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.default_storage_policy.length)
                writer.writeString(3, this.default_storage_policy);
            if (this.allowed_storage_policies.length)
                writer.writeRepeatedString(4, this.allowed_storage_policies);
            if (this.default_compaction_policy.length)
                writer.writeString(5, this.default_compaction_policy);
            if (this.allowed_compaction_policies.length)
                writer.writeRepeatedString(6, this.allowed_compaction_policies);
            if (this.default_partitioning_policy.length)
                writer.writeString(7, this.default_partitioning_policy);
            if (this.allowed_partitioning_policies.length)
                writer.writeRepeatedString(8, this.allowed_partitioning_policies);
            if (this.default_execution_policy.length)
                writer.writeString(9, this.default_execution_policy);
            if (this.allowed_execution_policies.length)
                writer.writeRepeatedString(10, this.allowed_execution_policies);
            if (this.default_replication_policy.length)
                writer.writeString(11, this.default_replication_policy);
            if (this.allowed_replication_policies.length)
                writer.writeRepeatedString(12, this.allowed_replication_policies);
            if (this.default_caching_policy.length)
                writer.writeString(13, this.default_caching_policy);
            if (this.allowed_caching_policies.length)
                writer.writeRepeatedString(14, this.allowed_caching_policies);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TableProfileDescription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TableProfileDescription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.labels as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.default_storage_policy = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.default_compaction_policy = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.default_partitioning_policy = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.default_execution_policy = reader.readString();
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    case 11:
                        message.default_replication_policy = reader.readString();
                        break;
                    case 12:
                        pb_1.Message.addToRepeatedField(message, 12, reader.readString());
                        break;
                    case 13:
                        message.default_caching_policy = reader.readString();
                        break;
                    case 14:
                        pb_1.Message.addToRepeatedField(message, 14, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TableProfileDescription {
            return TableProfileDescription.deserialize(bytes);
        }
    }
    export class DescribeTableOptionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
            }
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 1) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
        }): DescribeTableOptionsRequest {
            const message = new DescribeTableOptionsRequest({});
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            return message;
        }
        toObject() {
            const data: {
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            } = {};
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation_params)
                writer.writeMessage(1, this.operation_params, () => this.operation_params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTableOptionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTableOptionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTableOptionsRequest {
            return DescribeTableOptionsRequest.deserialize(bytes);
        }
    }
    export class DescribeTableOptionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): DescribeTableOptionsResponse {
            const message = new DescribeTableOptionsResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTableOptionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTableOptionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTableOptionsResponse {
            return DescribeTableOptionsResponse.deserialize(bytes);
        }
    }
    export class DescribeTableOptionsResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            table_profile_presets?: TableProfileDescription[];
            storage_policy_presets?: StoragePolicyDescription[];
            compaction_policy_presets?: CompactionPolicyDescription[];
            partitioning_policy_presets?: PartitioningPolicyDescription[];
            execution_policy_presets?: ExecutionPolicyDescription[];
            replication_policy_presets?: ReplicationPolicyDescription[];
            caching_policy_presets?: CachingPolicyDescription[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4, 5, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("table_profile_presets" in data && data.table_profile_presets != undefined) {
                    this.table_profile_presets = data.table_profile_presets;
                }
                if ("storage_policy_presets" in data && data.storage_policy_presets != undefined) {
                    this.storage_policy_presets = data.storage_policy_presets;
                }
                if ("compaction_policy_presets" in data && data.compaction_policy_presets != undefined) {
                    this.compaction_policy_presets = data.compaction_policy_presets;
                }
                if ("partitioning_policy_presets" in data && data.partitioning_policy_presets != undefined) {
                    this.partitioning_policy_presets = data.partitioning_policy_presets;
                }
                if ("execution_policy_presets" in data && data.execution_policy_presets != undefined) {
                    this.execution_policy_presets = data.execution_policy_presets;
                }
                if ("replication_policy_presets" in data && data.replication_policy_presets != undefined) {
                    this.replication_policy_presets = data.replication_policy_presets;
                }
                if ("caching_policy_presets" in data && data.caching_policy_presets != undefined) {
                    this.caching_policy_presets = data.caching_policy_presets;
                }
            }
        }
        get table_profile_presets() {
            return pb_1.Message.getRepeatedWrapperField(this, TableProfileDescription, 1) as TableProfileDescription[];
        }
        set table_profile_presets(value: TableProfileDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get storage_policy_presets() {
            return pb_1.Message.getRepeatedWrapperField(this, StoragePolicyDescription, 2) as StoragePolicyDescription[];
        }
        set storage_policy_presets(value: StoragePolicyDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get compaction_policy_presets() {
            return pb_1.Message.getRepeatedWrapperField(this, CompactionPolicyDescription, 3) as CompactionPolicyDescription[];
        }
        set compaction_policy_presets(value: CompactionPolicyDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get partitioning_policy_presets() {
            return pb_1.Message.getRepeatedWrapperField(this, PartitioningPolicyDescription, 4) as PartitioningPolicyDescription[];
        }
        set partitioning_policy_presets(value: PartitioningPolicyDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get execution_policy_presets() {
            return pb_1.Message.getRepeatedWrapperField(this, ExecutionPolicyDescription, 5) as ExecutionPolicyDescription[];
        }
        set execution_policy_presets(value: ExecutionPolicyDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get replication_policy_presets() {
            return pb_1.Message.getRepeatedWrapperField(this, ReplicationPolicyDescription, 6) as ReplicationPolicyDescription[];
        }
        set replication_policy_presets(value: ReplicationPolicyDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get caching_policy_presets() {
            return pb_1.Message.getRepeatedWrapperField(this, CachingPolicyDescription, 7) as CachingPolicyDescription[];
        }
        set caching_policy_presets(value: CachingPolicyDescription[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            table_profile_presets?: ReturnType<typeof TableProfileDescription.prototype.toObject>[];
            storage_policy_presets?: ReturnType<typeof StoragePolicyDescription.prototype.toObject>[];
            compaction_policy_presets?: ReturnType<typeof CompactionPolicyDescription.prototype.toObject>[];
            partitioning_policy_presets?: ReturnType<typeof PartitioningPolicyDescription.prototype.toObject>[];
            execution_policy_presets?: ReturnType<typeof ExecutionPolicyDescription.prototype.toObject>[];
            replication_policy_presets?: ReturnType<typeof ReplicationPolicyDescription.prototype.toObject>[];
            caching_policy_presets?: ReturnType<typeof CachingPolicyDescription.prototype.toObject>[];
        }): DescribeTableOptionsResult {
            const message = new DescribeTableOptionsResult({});
            if (data.table_profile_presets != null) {
                message.table_profile_presets = data.table_profile_presets.map(item => TableProfileDescription.fromObject(item));
            }
            if (data.storage_policy_presets != null) {
                message.storage_policy_presets = data.storage_policy_presets.map(item => StoragePolicyDescription.fromObject(item));
            }
            if (data.compaction_policy_presets != null) {
                message.compaction_policy_presets = data.compaction_policy_presets.map(item => CompactionPolicyDescription.fromObject(item));
            }
            if (data.partitioning_policy_presets != null) {
                message.partitioning_policy_presets = data.partitioning_policy_presets.map(item => PartitioningPolicyDescription.fromObject(item));
            }
            if (data.execution_policy_presets != null) {
                message.execution_policy_presets = data.execution_policy_presets.map(item => ExecutionPolicyDescription.fromObject(item));
            }
            if (data.replication_policy_presets != null) {
                message.replication_policy_presets = data.replication_policy_presets.map(item => ReplicationPolicyDescription.fromObject(item));
            }
            if (data.caching_policy_presets != null) {
                message.caching_policy_presets = data.caching_policy_presets.map(item => CachingPolicyDescription.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                table_profile_presets?: ReturnType<typeof TableProfileDescription.prototype.toObject>[];
                storage_policy_presets?: ReturnType<typeof StoragePolicyDescription.prototype.toObject>[];
                compaction_policy_presets?: ReturnType<typeof CompactionPolicyDescription.prototype.toObject>[];
                partitioning_policy_presets?: ReturnType<typeof PartitioningPolicyDescription.prototype.toObject>[];
                execution_policy_presets?: ReturnType<typeof ExecutionPolicyDescription.prototype.toObject>[];
                replication_policy_presets?: ReturnType<typeof ReplicationPolicyDescription.prototype.toObject>[];
                caching_policy_presets?: ReturnType<typeof CachingPolicyDescription.prototype.toObject>[];
            } = {};
            if (this.table_profile_presets != null) {
                data.table_profile_presets = this.table_profile_presets.map((item: TableProfileDescription) => item.toObject());
            }
            if (this.storage_policy_presets != null) {
                data.storage_policy_presets = this.storage_policy_presets.map((item: StoragePolicyDescription) => item.toObject());
            }
            if (this.compaction_policy_presets != null) {
                data.compaction_policy_presets = this.compaction_policy_presets.map((item: CompactionPolicyDescription) => item.toObject());
            }
            if (this.partitioning_policy_presets != null) {
                data.partitioning_policy_presets = this.partitioning_policy_presets.map((item: PartitioningPolicyDescription) => item.toObject());
            }
            if (this.execution_policy_presets != null) {
                data.execution_policy_presets = this.execution_policy_presets.map((item: ExecutionPolicyDescription) => item.toObject());
            }
            if (this.replication_policy_presets != null) {
                data.replication_policy_presets = this.replication_policy_presets.map((item: ReplicationPolicyDescription) => item.toObject());
            }
            if (this.caching_policy_presets != null) {
                data.caching_policy_presets = this.caching_policy_presets.map((item: CachingPolicyDescription) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.table_profile_presets.length)
                writer.writeRepeatedMessage(1, this.table_profile_presets, (item: TableProfileDescription) => item.serialize(writer));
            if (this.storage_policy_presets.length)
                writer.writeRepeatedMessage(2, this.storage_policy_presets, (item: StoragePolicyDescription) => item.serialize(writer));
            if (this.compaction_policy_presets.length)
                writer.writeRepeatedMessage(3, this.compaction_policy_presets, (item: CompactionPolicyDescription) => item.serialize(writer));
            if (this.partitioning_policy_presets.length)
                writer.writeRepeatedMessage(4, this.partitioning_policy_presets, (item: PartitioningPolicyDescription) => item.serialize(writer));
            if (this.execution_policy_presets.length)
                writer.writeRepeatedMessage(5, this.execution_policy_presets, (item: ExecutionPolicyDescription) => item.serialize(writer));
            if (this.replication_policy_presets.length)
                writer.writeRepeatedMessage(6, this.replication_policy_presets, (item: ReplicationPolicyDescription) => item.serialize(writer));
            if (this.caching_policy_presets.length)
                writer.writeRepeatedMessage(7, this.caching_policy_presets, (item: CachingPolicyDescription) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescribeTableOptionsResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescribeTableOptionsResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.table_profile_presets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TableProfileDescription.deserialize(reader), TableProfileDescription));
                        break;
                    case 2:
                        reader.readMessage(message.storage_policy_presets, () => pb_1.Message.addToRepeatedWrapperField(message, 2, StoragePolicyDescription.deserialize(reader), StoragePolicyDescription));
                        break;
                    case 3:
                        reader.readMessage(message.compaction_policy_presets, () => pb_1.Message.addToRepeatedWrapperField(message, 3, CompactionPolicyDescription.deserialize(reader), CompactionPolicyDescription));
                        break;
                    case 4:
                        reader.readMessage(message.partitioning_policy_presets, () => pb_1.Message.addToRepeatedWrapperField(message, 4, PartitioningPolicyDescription.deserialize(reader), PartitioningPolicyDescription));
                        break;
                    case 5:
                        reader.readMessage(message.execution_policy_presets, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ExecutionPolicyDescription.deserialize(reader), ExecutionPolicyDescription));
                        break;
                    case 6:
                        reader.readMessage(message.replication_policy_presets, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ReplicationPolicyDescription.deserialize(reader), ReplicationPolicyDescription));
                        break;
                    case 7:
                        reader.readMessage(message.caching_policy_presets, () => pb_1.Message.addToRepeatedWrapperField(message, 7, CachingPolicyDescription.deserialize(reader), CachingPolicyDescription));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescribeTableOptionsResult {
            return DescribeTableOptionsResult.deserialize(bytes);
        }
    }
    export class KeyRange extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2], [3, 4]];
        constructor(data?: any[] | ({} & (({
            greater?: dependency_6.Ydb.TypedValue;
            greater_or_equal?: never;
        } | {
            greater?: never;
            greater_or_equal?: dependency_6.Ydb.TypedValue;
        }) | ({
            less?: dependency_6.Ydb.TypedValue;
            less_or_equal?: never;
        } | {
            less?: never;
            less_or_equal?: dependency_6.Ydb.TypedValue;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("greater" in data && data.greater != undefined) {
                    this.greater = data.greater;
                }
                if ("greater_or_equal" in data && data.greater_or_equal != undefined) {
                    this.greater_or_equal = data.greater_or_equal;
                }
                if ("less" in data && data.less != undefined) {
                    this.less = data.less;
                }
                if ("less_or_equal" in data && data.less_or_equal != undefined) {
                    this.less_or_equal = data.less_or_equal;
                }
            }
        }
        get greater() {
            return pb_1.Message.getWrapperField(this, dependency_6.Ydb.TypedValue, 1) as dependency_6.Ydb.TypedValue;
        }
        set greater(value: dependency_6.Ydb.TypedValue) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_greater() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get greater_or_equal() {
            return pb_1.Message.getWrapperField(this, dependency_6.Ydb.TypedValue, 2) as dependency_6.Ydb.TypedValue;
        }
        set greater_or_equal(value: dependency_6.Ydb.TypedValue) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_greater_or_equal() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get less() {
            return pb_1.Message.getWrapperField(this, dependency_6.Ydb.TypedValue, 3) as dependency_6.Ydb.TypedValue;
        }
        set less(value: dependency_6.Ydb.TypedValue) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
        }
        get has_less() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get less_or_equal() {
            return pb_1.Message.getWrapperField(this, dependency_6.Ydb.TypedValue, 4) as dependency_6.Ydb.TypedValue;
        }
        set less_or_equal(value: dependency_6.Ydb.TypedValue) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[1], value);
        }
        get has_less_or_equal() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get from_bound() {
            const cases: {
                [index: number]: "none" | "greater" | "greater_or_equal";
            } = {
                0: "none",
                1: "greater",
                2: "greater_or_equal"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        get to_bound() {
            const cases: {
                [index: number]: "none" | "less" | "less_or_equal";
            } = {
                0: "none",
                3: "less",
                4: "less_or_equal"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            greater?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
            greater_or_equal?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
            less?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
            less_or_equal?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
        }): KeyRange {
            const message = new KeyRange({});
            if (data.greater != null) {
                message.greater = dependency_6.Ydb.TypedValue.fromObject(data.greater);
            }
            if (data.greater_or_equal != null) {
                message.greater_or_equal = dependency_6.Ydb.TypedValue.fromObject(data.greater_or_equal);
            }
            if (data.less != null) {
                message.less = dependency_6.Ydb.TypedValue.fromObject(data.less);
            }
            if (data.less_or_equal != null) {
                message.less_or_equal = dependency_6.Ydb.TypedValue.fromObject(data.less_or_equal);
            }
            return message;
        }
        toObject() {
            const data: {
                greater?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
                greater_or_equal?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
                less?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
                less_or_equal?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
            } = {};
            if (this.greater != null) {
                data.greater = this.greater.toObject();
            }
            if (this.greater_or_equal != null) {
                data.greater_or_equal = this.greater_or_equal.toObject();
            }
            if (this.less != null) {
                data.less = this.less.toObject();
            }
            if (this.less_or_equal != null) {
                data.less_or_equal = this.less_or_equal.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_greater)
                writer.writeMessage(1, this.greater, () => this.greater.serialize(writer));
            if (this.has_greater_or_equal)
                writer.writeMessage(2, this.greater_or_equal, () => this.greater_or_equal.serialize(writer));
            if (this.has_less)
                writer.writeMessage(3, this.less, () => this.less.serialize(writer));
            if (this.has_less_or_equal)
                writer.writeMessage(4, this.less_or_equal, () => this.less_or_equal.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeyRange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeyRange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.greater, () => message.greater = dependency_6.Ydb.TypedValue.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.greater_or_equal, () => message.greater_or_equal = dependency_6.Ydb.TypedValue.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.less, () => message.less = dependency_6.Ydb.TypedValue.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.less_or_equal, () => message.less_or_equal = dependency_6.Ydb.TypedValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KeyRange {
            return KeyRange.deserialize(bytes);
        }
    }
    export class ReadTableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            session_id?: string;
            path?: string;
            key_range?: KeyRange;
            columns?: string[];
            ordered?: boolean;
            row_limit?: number;
            use_snapshot?: dependency_2.Ydb.FeatureFlag.Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("key_range" in data && data.key_range != undefined) {
                    this.key_range = data.key_range;
                }
                if ("columns" in data && data.columns != undefined) {
                    this.columns = data.columns;
                }
                if ("ordered" in data && data.ordered != undefined) {
                    this.ordered = data.ordered;
                }
                if ("row_limit" in data && data.row_limit != undefined) {
                    this.row_limit = data.row_limit;
                }
                if ("use_snapshot" in data && data.use_snapshot != undefined) {
                    this.use_snapshot = data.use_snapshot;
                }
            }
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set session_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key_range() {
            return pb_1.Message.getWrapperField(this, KeyRange, 3) as KeyRange;
        }
        set key_range(value: KeyRange) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_key_range() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get columns() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set columns(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get ordered() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set ordered(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get row_limit() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set row_limit(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get use_snapshot() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED) as dependency_2.Ydb.FeatureFlag.Status;
        }
        set use_snapshot(value: dependency_2.Ydb.FeatureFlag.Status) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            session_id?: string;
            path?: string;
            key_range?: ReturnType<typeof KeyRange.prototype.toObject>;
            columns?: string[];
            ordered?: boolean;
            row_limit?: number;
            use_snapshot?: dependency_2.Ydb.FeatureFlag.Status;
        }): ReadTableRequest {
            const message = new ReadTableRequest({});
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.key_range != null) {
                message.key_range = KeyRange.fromObject(data.key_range);
            }
            if (data.columns != null) {
                message.columns = data.columns;
            }
            if (data.ordered != null) {
                message.ordered = data.ordered;
            }
            if (data.row_limit != null) {
                message.row_limit = data.row_limit;
            }
            if (data.use_snapshot != null) {
                message.use_snapshot = data.use_snapshot;
            }
            return message;
        }
        toObject() {
            const data: {
                session_id?: string;
                path?: string;
                key_range?: ReturnType<typeof KeyRange.prototype.toObject>;
                columns?: string[];
                ordered?: boolean;
                row_limit?: number;
                use_snapshot?: dependency_2.Ydb.FeatureFlag.Status;
            } = {};
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.key_range != null) {
                data.key_range = this.key_range.toObject();
            }
            if (this.columns != null) {
                data.columns = this.columns;
            }
            if (this.ordered != null) {
                data.ordered = this.ordered;
            }
            if (this.row_limit != null) {
                data.row_limit = this.row_limit;
            }
            if (this.use_snapshot != null) {
                data.use_snapshot = this.use_snapshot;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.session_id.length)
                writer.writeString(1, this.session_id);
            if (this.path.length)
                writer.writeString(2, this.path);
            if (this.has_key_range)
                writer.writeMessage(3, this.key_range, () => this.key_range.serialize(writer));
            if (this.columns.length)
                writer.writeRepeatedString(4, this.columns);
            if (this.ordered != false)
                writer.writeBool(5, this.ordered);
            if (this.row_limit != 0)
                writer.writeUint64(6, this.row_limit);
            if (this.use_snapshot != dependency_2.Ydb.FeatureFlag.Status.STATUS_UNSPECIFIED)
                writer.writeEnum(7, this.use_snapshot);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadTableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadTableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_id = reader.readString();
                        break;
                    case 2:
                        message.path = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.key_range, () => message.key_range = KeyRange.deserialize(reader));
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.ordered = reader.readBool();
                        break;
                    case 6:
                        message.row_limit = reader.readUint64();
                        break;
                    case 7:
                        message.use_snapshot = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadTableRequest {
            return ReadTableRequest.deserialize(bytes);
        }
    }
    export class ReadTableResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_8.Ydb.StatusIds.StatusCode;
            issues?: dependency_3.Ydb.Issue.IssueMessage[];
            snapshot?: dependency_2.Ydb.VirtualTimestamp;
            result?: ReadTableResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
                if ("snapshot" in data && data.snapshot != undefined) {
                    this.snapshot = data.snapshot;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_8.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_8.Ydb.StatusIds.StatusCode;
        }
        set status(value: dependency_8.Ydb.StatusIds.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 2) as dependency_3.Ydb.Issue.IssueMessage[];
        }
        set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get snapshot() {
            return pb_1.Message.getWrapperField(this, dependency_2.Ydb.VirtualTimestamp, 4) as dependency_2.Ydb.VirtualTimestamp;
        }
        set snapshot(value: dependency_2.Ydb.VirtualTimestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_snapshot() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get result() {
            return pb_1.Message.getWrapperField(this, ReadTableResult, 3) as ReadTableResult;
        }
        set result(value: ReadTableResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            status?: dependency_8.Ydb.StatusIds.StatusCode;
            issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
            snapshot?: ReturnType<typeof dependency_2.Ydb.VirtualTimestamp.prototype.toObject>;
            result?: ReturnType<typeof ReadTableResult.prototype.toObject>;
        }): ReadTableResponse {
            const message = new ReadTableResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
            }
            if (data.snapshot != null) {
                message.snapshot = dependency_2.Ydb.VirtualTimestamp.fromObject(data.snapshot);
            }
            if (data.result != null) {
                message.result = ReadTableResult.fromObject(data.result);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_8.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                snapshot?: ReturnType<typeof dependency_2.Ydb.VirtualTimestamp.prototype.toObject>;
                result?: ReturnType<typeof ReadTableResult.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
            }
            if (this.snapshot != null) {
                data.snapshot = this.snapshot.toObject();
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_8.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.issues.length)
                writer.writeRepeatedMessage(2, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
            if (this.has_snapshot)
                writer.writeMessage(4, this.snapshot, () => this.snapshot.serialize(writer));
            if (this.has_result)
                writer.writeMessage(3, this.result, () => this.result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadTableResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadTableResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                        break;
                    case 4:
                        reader.readMessage(message.snapshot, () => message.snapshot = dependency_2.Ydb.VirtualTimestamp.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = ReadTableResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadTableResponse {
            return ReadTableResponse.deserialize(bytes);
        }
    }
    export class ReadTableResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result_set?: dependency_6.Ydb.ResultSet;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result_set" in data && data.result_set != undefined) {
                    this.result_set = data.result_set;
                }
            }
        }
        get result_set() {
            return pb_1.Message.getWrapperField(this, dependency_6.Ydb.ResultSet, 1) as dependency_6.Ydb.ResultSet;
        }
        set result_set(value: dependency_6.Ydb.ResultSet) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_result_set() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            result_set?: ReturnType<typeof dependency_6.Ydb.ResultSet.prototype.toObject>;
        }): ReadTableResult {
            const message = new ReadTableResult({});
            if (data.result_set != null) {
                message.result_set = dependency_6.Ydb.ResultSet.fromObject(data.result_set);
            }
            return message;
        }
        toObject() {
            const data: {
                result_set?: ReturnType<typeof dependency_6.Ydb.ResultSet.prototype.toObject>;
            } = {};
            if (this.result_set != null) {
                data.result_set = this.result_set.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_result_set)
                writer.writeMessage(1, this.result_set, () => this.result_set.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadTableResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadTableResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.result_set, () => message.result_set = dependency_6.Ydb.ResultSet.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadTableResult {
            return ReadTableResult.deserialize(bytes);
        }
    }
    export class BulkUpsertRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[7, 8]];
        constructor(data?: any[] | ({
            table?: string;
            rows?: dependency_6.Ydb.TypedValue;
            operation_params?: dependency_4.Ydb.Operations.OperationParams;
            data?: Uint8Array;
        } & (({
            arrow_batch_settings?: dependency_9.Ydb.Formats.ArrowBatchSettings;
            csv_settings?: never;
        } | {
            arrow_batch_settings?: never;
            csv_settings?: dependency_9.Ydb.Formats.CsvSettings;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("table" in data && data.table != undefined) {
                    this.table = data.table;
                }
                if ("rows" in data && data.rows != undefined) {
                    this.rows = data.rows;
                }
                if ("operation_params" in data && data.operation_params != undefined) {
                    this.operation_params = data.operation_params;
                }
                if ("arrow_batch_settings" in data && data.arrow_batch_settings != undefined) {
                    this.arrow_batch_settings = data.arrow_batch_settings;
                }
                if ("csv_settings" in data && data.csv_settings != undefined) {
                    this.csv_settings = data.csv_settings;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get table() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set table(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get rows() {
            return pb_1.Message.getWrapperField(this, dependency_6.Ydb.TypedValue, 2) as dependency_6.Ydb.TypedValue;
        }
        set rows(value: dependency_6.Ydb.TypedValue) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_rows() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get operation_params() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.OperationParams, 3) as dependency_4.Ydb.Operations.OperationParams;
        }
        set operation_params(value: dependency_4.Ydb.Operations.OperationParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_operation_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get arrow_batch_settings() {
            return pb_1.Message.getWrapperField(this, dependency_9.Ydb.Formats.ArrowBatchSettings, 7) as dependency_9.Ydb.Formats.ArrowBatchSettings;
        }
        set arrow_batch_settings(value: dependency_9.Ydb.Formats.ArrowBatchSettings) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_arrow_batch_settings() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get csv_settings() {
            return pb_1.Message.getWrapperField(this, dependency_9.Ydb.Formats.CsvSettings, 8) as dependency_9.Ydb.Formats.CsvSettings;
        }
        set csv_settings(value: dependency_9.Ydb.Formats.CsvSettings) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_csv_settings() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1000, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1000, value);
        }
        get data_format() {
            const cases: {
                [index: number]: "none" | "arrow_batch_settings" | "csv_settings";
            } = {
                0: "none",
                7: "arrow_batch_settings",
                8: "csv_settings"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7, 8])];
        }
        static fromObject(data: {
            table?: string;
            rows?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
            operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
            arrow_batch_settings?: ReturnType<typeof dependency_9.Ydb.Formats.ArrowBatchSettings.prototype.toObject>;
            csv_settings?: ReturnType<typeof dependency_9.Ydb.Formats.CsvSettings.prototype.toObject>;
            data?: Uint8Array;
        }): BulkUpsertRequest {
            const message = new BulkUpsertRequest({});
            if (data.table != null) {
                message.table = data.table;
            }
            if (data.rows != null) {
                message.rows = dependency_6.Ydb.TypedValue.fromObject(data.rows);
            }
            if (data.operation_params != null) {
                message.operation_params = dependency_4.Ydb.Operations.OperationParams.fromObject(data.operation_params);
            }
            if (data.arrow_batch_settings != null) {
                message.arrow_batch_settings = dependency_9.Ydb.Formats.ArrowBatchSettings.fromObject(data.arrow_batch_settings);
            }
            if (data.csv_settings != null) {
                message.csv_settings = dependency_9.Ydb.Formats.CsvSettings.fromObject(data.csv_settings);
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                table?: string;
                rows?: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
                operation_params?: ReturnType<typeof dependency_4.Ydb.Operations.OperationParams.prototype.toObject>;
                arrow_batch_settings?: ReturnType<typeof dependency_9.Ydb.Formats.ArrowBatchSettings.prototype.toObject>;
                csv_settings?: ReturnType<typeof dependency_9.Ydb.Formats.CsvSettings.prototype.toObject>;
                data?: Uint8Array;
            } = {};
            if (this.table != null) {
                data.table = this.table;
            }
            if (this.rows != null) {
                data.rows = this.rows.toObject();
            }
            if (this.operation_params != null) {
                data.operation_params = this.operation_params.toObject();
            }
            if (this.arrow_batch_settings != null) {
                data.arrow_batch_settings = this.arrow_batch_settings.toObject();
            }
            if (this.csv_settings != null) {
                data.csv_settings = this.csv_settings.toObject();
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.table.length)
                writer.writeString(1, this.table);
            if (this.has_rows)
                writer.writeMessage(2, this.rows, () => this.rows.serialize(writer));
            if (this.has_operation_params)
                writer.writeMessage(3, this.operation_params, () => this.operation_params.serialize(writer));
            if (this.has_arrow_batch_settings)
                writer.writeMessage(7, this.arrow_batch_settings, () => this.arrow_batch_settings.serialize(writer));
            if (this.has_csv_settings)
                writer.writeMessage(8, this.csv_settings, () => this.csv_settings.serialize(writer));
            if (this.data.length)
                writer.writeBytes(1000, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkUpsertRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkUpsertRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.table = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.rows, () => message.rows = dependency_6.Ydb.TypedValue.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.operation_params, () => message.operation_params = dependency_4.Ydb.Operations.OperationParams.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.arrow_batch_settings, () => message.arrow_batch_settings = dependency_9.Ydb.Formats.ArrowBatchSettings.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.csv_settings, () => message.csv_settings = dependency_9.Ydb.Formats.CsvSettings.deserialize(reader));
                        break;
                    case 1000:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkUpsertRequest {
            return BulkUpsertRequest.deserialize(bytes);
        }
    }
    export class BulkUpsertResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: dependency_4.Ydb.Operations.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
        }
        get operation() {
            return pb_1.Message.getWrapperField(this, dependency_4.Ydb.Operations.Operation, 1) as dependency_4.Ydb.Operations.Operation;
        }
        set operation(value: dependency_4.Ydb.Operations.Operation) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_operation() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
        }): BulkUpsertResponse {
            const message = new BulkUpsertResponse({});
            if (data.operation != null) {
                message.operation = dependency_4.Ydb.Operations.Operation.fromObject(data.operation);
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ReturnType<typeof dependency_4.Ydb.Operations.Operation.prototype.toObject>;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_operation)
                writer.writeMessage(1, this.operation, () => this.operation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkUpsertResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkUpsertResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.operation, () => message.operation = dependency_4.Ydb.Operations.Operation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkUpsertResponse {
            return BulkUpsertResponse.deserialize(bytes);
        }
    }
    export class BulkUpsertResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): BulkUpsertResult {
            const message = new BulkUpsertResult({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BulkUpsertResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BulkUpsertResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BulkUpsertResult {
            return BulkUpsertResult.deserialize(bytes);
        }
    }
    export class ExecuteScanQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query?: Query;
            parameters?: Map<string, dependency_6.Ydb.TypedValue>;
            mode?: ExecuteScanQueryRequest.Mode;
            collect_stats?: QueryStatsCollection.Mode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("collect_stats" in data && data.collect_stats != undefined) {
                    this.collect_stats = data.collect_stats;
                }
            }
            if (!this.parameters)
                this.parameters = new Map();
        }
        get query() {
            return pb_1.Message.getWrapperField(this, Query, 3) as Query;
        }
        set query(value: Query) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get parameters() {
            return pb_1.Message.getField(this, 4) as any as Map<string, dependency_6.Ydb.TypedValue>;
        }
        set parameters(value: Map<string, dependency_6.Ydb.TypedValue>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 6, ExecuteScanQueryRequest.Mode.MODE_UNSPECIFIED) as ExecuteScanQueryRequest.Mode;
        }
        set mode(value: ExecuteScanQueryRequest.Mode) {
            pb_1.Message.setField(this, 6, value);
        }
        get collect_stats() {
            return pb_1.Message.getFieldWithDefault(this, 8, QueryStatsCollection.Mode.STATS_COLLECTION_UNSPECIFIED) as QueryStatsCollection.Mode;
        }
        set collect_stats(value: QueryStatsCollection.Mode) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            query?: ReturnType<typeof Query.prototype.toObject>;
            parameters?: {
                [key: string]: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
            };
            mode?: ExecuteScanQueryRequest.Mode;
            collect_stats?: QueryStatsCollection.Mode;
        }): ExecuteScanQueryRequest {
            const message = new ExecuteScanQueryRequest({});
            if (data.query != null) {
                message.query = Query.fromObject(data.query);
            }
            if (typeof data.parameters == "object") {
                message.parameters = new Map(Object.entries(data.parameters).map(([key, value]) => [key, dependency_6.Ydb.TypedValue.fromObject(value)]));
            }
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.collect_stats != null) {
                message.collect_stats = data.collect_stats;
            }
            return message;
        }
        toObject() {
            const data: {
                query?: ReturnType<typeof Query.prototype.toObject>;
                parameters?: {
                    [key: string]: ReturnType<typeof dependency_6.Ydb.TypedValue.prototype.toObject>;
                };
                mode?: ExecuteScanQueryRequest.Mode;
                collect_stats?: QueryStatsCollection.Mode;
            } = {};
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.parameters != null) {
                data.parameters = (Object.fromEntries)((Array.from)(this.parameters).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.collect_stats != null) {
                data.collect_stats = this.collect_stats;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_query)
                writer.writeMessage(3, this.query, () => this.query.serialize(writer));
            for (const [key, value] of this.parameters) {
                writer.writeMessage(4, this.parameters, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.mode != ExecuteScanQueryRequest.Mode.MODE_UNSPECIFIED)
                writer.writeEnum(6, this.mode);
            if (this.collect_stats != QueryStatsCollection.Mode.STATS_COLLECTION_UNSPECIFIED)
                writer.writeEnum(8, this.collect_stats);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScanQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScanQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.query, () => message.query = Query.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.parameters as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_6.Ydb.TypedValue.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        message.mode = reader.readEnum();
                        break;
                    case 8:
                        message.collect_stats = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScanQueryRequest {
            return ExecuteScanQueryRequest.deserialize(bytes);
        }
    }
    export namespace ExecuteScanQueryRequest {
        export enum Mode {
            MODE_UNSPECIFIED = 0,
            MODE_EXPLAIN = 1,
            MODE_EXEC = 3
        }
    }
    export class ExecuteScanQueryPartialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_8.Ydb.StatusIds.StatusCode;
            issues?: dependency_3.Ydb.Issue.IssueMessage[];
            result?: ExecuteScanQueryPartialResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("issues" in data && data.issues != undefined) {
                    this.issues = data.issues;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_8.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED) as dependency_8.Ydb.StatusIds.StatusCode;
        }
        set status(value: dependency_8.Ydb.StatusIds.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get issues() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Ydb.Issue.IssueMessage, 2) as dependency_3.Ydb.Issue.IssueMessage[];
        }
        set issues(value: dependency_3.Ydb.Issue.IssueMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, ExecuteScanQueryPartialResult, 3) as ExecuteScanQueryPartialResult;
        }
        set result(value: ExecuteScanQueryPartialResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            status?: dependency_8.Ydb.StatusIds.StatusCode;
            issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
            result?: ReturnType<typeof ExecuteScanQueryPartialResult.prototype.toObject>;
        }): ExecuteScanQueryPartialResponse {
            const message = new ExecuteScanQueryPartialResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.issues != null) {
                message.issues = data.issues.map(item => dependency_3.Ydb.Issue.IssueMessage.fromObject(item));
            }
            if (data.result != null) {
                message.result = ExecuteScanQueryPartialResult.fromObject(data.result);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_8.Ydb.StatusIds.StatusCode;
                issues?: ReturnType<typeof dependency_3.Ydb.Issue.IssueMessage.prototype.toObject>[];
                result?: ReturnType<typeof ExecuteScanQueryPartialResult.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.issues != null) {
                data.issues = this.issues.map((item: dependency_3.Ydb.Issue.IssueMessage) => item.toObject());
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_8.Ydb.StatusIds.StatusCode.STATUS_CODE_UNSPECIFIED)
                writer.writeEnum(1, this.status);
            if (this.issues.length)
                writer.writeRepeatedMessage(2, this.issues, (item: dependency_3.Ydb.Issue.IssueMessage) => item.serialize(writer));
            if (this.has_result)
                writer.writeMessage(3, this.result, () => this.result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScanQueryPartialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScanQueryPartialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.issues, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.Ydb.Issue.IssueMessage.deserialize(reader), dependency_3.Ydb.Issue.IssueMessage));
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = ExecuteScanQueryPartialResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScanQueryPartialResponse {
            return ExecuteScanQueryPartialResponse.deserialize(bytes);
        }
    }
    export class ExecuteScanQueryPartialResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result_set?: dependency_6.Ydb.ResultSet;
            query_stats?: dependency_5.Ydb.TableStats.QueryStats;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result_set" in data && data.result_set != undefined) {
                    this.result_set = data.result_set;
                }
                if ("query_stats" in data && data.query_stats != undefined) {
                    this.query_stats = data.query_stats;
                }
            }
        }
        get result_set() {
            return pb_1.Message.getWrapperField(this, dependency_6.Ydb.ResultSet, 1) as dependency_6.Ydb.ResultSet;
        }
        set result_set(value: dependency_6.Ydb.ResultSet) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_result_set() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get query_stats() {
            return pb_1.Message.getWrapperField(this, dependency_5.Ydb.TableStats.QueryStats, 6) as dependency_5.Ydb.TableStats.QueryStats;
        }
        set query_stats(value: dependency_5.Ydb.TableStats.QueryStats) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_query_stats() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            result_set?: ReturnType<typeof dependency_6.Ydb.ResultSet.prototype.toObject>;
            query_stats?: ReturnType<typeof dependency_5.Ydb.TableStats.QueryStats.prototype.toObject>;
        }): ExecuteScanQueryPartialResult {
            const message = new ExecuteScanQueryPartialResult({});
            if (data.result_set != null) {
                message.result_set = dependency_6.Ydb.ResultSet.fromObject(data.result_set);
            }
            if (data.query_stats != null) {
                message.query_stats = dependency_5.Ydb.TableStats.QueryStats.fromObject(data.query_stats);
            }
            return message;
        }
        toObject() {
            const data: {
                result_set?: ReturnType<typeof dependency_6.Ydb.ResultSet.prototype.toObject>;
                query_stats?: ReturnType<typeof dependency_5.Ydb.TableStats.QueryStats.prototype.toObject>;
            } = {};
            if (this.result_set != null) {
                data.result_set = this.result_set.toObject();
            }
            if (this.query_stats != null) {
                data.query_stats = this.query_stats.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_result_set)
                writer.writeMessage(1, this.result_set, () => this.result_set.serialize(writer));
            if (this.has_query_stats)
                writer.writeMessage(6, this.query_stats, () => this.query_stats.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExecuteScanQueryPartialResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExecuteScanQueryPartialResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.result_set, () => message.result_set = dependency_6.Ydb.ResultSet.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.query_stats, () => message.query_stats = dependency_5.Ydb.TableStats.QueryStats.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExecuteScanQueryPartialResult {
            return ExecuteScanQueryPartialResult.deserialize(bytes);
        }
    }
}
